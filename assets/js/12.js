(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[12],{

/***/ "./src/util/transactionUtils.ts":
/*!**************************************!*\
  !*** ./src/util/transactionUtils.ts ***!
  \**************************************/
/*! exports provided: transactionTypeName, TransactionUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transactionTypeName\", function() { return transactionTypeName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TransactionUtils\", function() { return TransactionUtils; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tsjs-xpx-chain-sdk */ \"./node_modules/tsjs-xpx-chain-sdk/dist/index.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _state_networkState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state/networkState */ \"./src/state/networkState.ts\");\n/* harmony import */ var _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/chainUtils */ \"./src/util/chainUtils.ts\");\n/* harmony import */ var _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/REST/chainAPICall */ \"./src/models/REST/chainAPICall.ts\");\n/* harmony import */ var _util_buildTransactions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/buildTransactions */ \"./src/util/buildTransactions.ts\");\n\n\n\n\n\n\n\nconst networkAPIEndpoint = Object(vue__WEBPACK_IMPORTED_MODULE_1__[\"computed\"])(() => { var _a; return _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].buildAPIEndpoint(_state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].selectedAPIEndpoint, (_a = _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile) === null || _a === void 0 ? void 0 : _a.httpPort); });\nconst localNetworkType = Object(vue__WEBPACK_IMPORTED_MODULE_1__[\"computed\"])(() => { var _a; return _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getNetworkType((_a = _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile) === null || _a === void 0 ? void 0 : _a.network.type); });\nconst transactionTypeName = {\n    transfer: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].TRANSFER,\n        name: 'Transfer'\n    },\n    registerNameSpace: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REGISTER_NAMESPACE,\n        name: 'Register Namespace'\n    },\n    mosaicDefinition: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_DEFINITION,\n        name: 'SDA Definition'\n    },\n    mosaicSupplyChange: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_SUPPLY_CHANGE,\n        name: 'SDA Supply Change'\n    },\n    modifyMultisigAccount: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MULTISIG_ACCOUNT,\n        name: 'Modify Multisig Account'\n    },\n    aggregateComplete: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_COMPLETE,\n        name: 'Aggregate Complete'\n    },\n    aggregateBonded: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_BONDED,\n        name: 'Aggregate Bonded'\n    },\n    mosaicAlias: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_ALIAS,\n        name: 'SDA Alias'\n    },\n    addressAlias: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADDRESS_ALIAS,\n        name: 'Address Alias'\n    },\n    lock: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LOCK,\n        name: 'LockFund'\n    },\n    accountLink: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LINK_ACCOUNT,\n        name: 'Account Link'\n    },\n    exchangeOffer: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].EXCHANGE_OFFER,\n        name: 'Exchange Offer'\n    },\n    addExchangeOffer: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADD_EXCHANGE_OFFER,\n        name: 'Add Exchange Offer'\n    },\n    removeExchangeOffer: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REMOVE_EXCHANGE_OFFER,\n        name: 'Remove Exchange Offer'\n    },\n    modifyAccountMetadata: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_METADATA,\n        name: 'Modify Account Metadata'\n    },\n    modifyMosaicMetadata: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MOSAIC_METADATA,\n        name: 'Modify SDA Metadata'\n    },\n    modifyNamespaceMetadata: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_NAMESPACE_METADATA,\n        name: 'Modify Namespace Metadata'\n    },\n    modifyAccountRestrictionAddress: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_ADDRESS,\n        name: 'Modify Account Address Restriction'\n    },\n    modifyAccountRestrictionMosaic: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_MOSAIC,\n        name: 'Modify Account SDA Restriction'\n    },\n    modifyAccountRestrictionOperation: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_OPERATION,\n        name: 'Modify Account Operation Restriction'\n    },\n    chainConfigure: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_CONFIGURE,\n        name: 'Chain Configure'\n    },\n    chainUpgrade: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_UPGRADE,\n        name: 'Chain Upgrade'\n    },\n    secretLock: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_LOCK,\n        name: \"Secret Lock\"\n    },\n    secretProof: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_PROOF,\n        name: \"Secret Proof\"\n    },\n    modifyAccountMetadata_v2: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ACCOUNT_METADATA_V2,\n        name: \"Account Metadata\"\n    },\n    modifyMosaicMetadata_v2: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_METADATA_V2,\n        name: \"SDA Metadata\"\n    },\n    modifyNamespaceMetadata_v2: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].NAMESPACE_METADATA_V2,\n        name: \"Namespace Metadata\"\n    },\n    modifyMosaicLevy: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MOSAIC_LEVY,\n        name: \"Modify SDA Levy\"\n    },\n    removeRemoveLevy: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REMOVE_MOSAIC_LEVY,\n        name: \"Remove SDA Levy\"\n    }\n};\nclass TransactionUtils {\n    static getAccInfo(address) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            const chainAPICall = new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_5__[\"ChainAPICall\"](networkAPIEndpoint.value);\n            const accountInfo = yield chainAPICall.accountAPI.getAccountInfo(address);\n            // console.log(publicKey);\n            return accountInfo;\n        });\n    }\n    static getTransactionTypeNameByEnum(transactionType) {\n        let name = \"\";\n        for (let key in transactionTypeName) {\n            if (transactionType === transactionTypeName[key].id) {\n                name = transactionTypeName[key].name;\n                break;\n            }\n        }\n        return name;\n    }\n    static getFee(transaction) {\n        return transaction.maxFee.compact();\n    }\n    static getFakeEncryptedMessageSize(message) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"EncryptedMessage\"].create(message, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(\"0\".repeat(64), _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getNetworkType(localNetworkType.value)), \"0\".repeat(64)).size();\n    }\n    static getPlainMessageSize(message) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PlainMessage\"].create(message).size();\n    }\n    static signTransaction(transaction, account, generationHash) {\n        return account.sign(transaction, generationHash);\n    }\n    static aggregateToCosignatureTransaction(aggregateTransaction) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"CosignatureTransaction\"].create(aggregateTransaction);\n    }\n    static cosignTransaction(transactionToCosign, account) {\n        const cosignatureTransaction = TransactionUtils.aggregateToCosignatureTransaction(transactionToCosign);\n        return account.signCosignatureTransaction(cosignatureTransaction);\n    }\n    static getTransactions(publicAccount, queryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactions = yield _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getAccountTransactions(publicAccount, queryParams);\n            return transactions;\n        });\n    }\n    static searchTransactions(txnGroupType, queryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactionsResult = yield _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].searchTransactions(txnGroupType, queryParams);\n            return transactionsResult;\n        });\n    }\n    static getUnconfirmedTransactions(publicAccount, queryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactions = yield _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getAccountUnconfirmedTransactions(publicAccount, queryParams);\n            return transactions;\n        });\n    }\n    static getPartialTransactions(publicAccount, queryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactions = yield _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getAccountPartialTransactions(publicAccount, queryParams);\n            return transactions;\n        });\n    }\n    static announceTransaction(signedTx) {\n        _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].announceTransaction(signedTx);\n    }\n    static announceBondedTransaction(signedTx) {\n        _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].announceBondedTransaction(signedTx);\n    }\n    static getTransactionTypeName(type) {\n        let typeName = \"\";\n        switch (type) {\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADDRESS_ALIAS:\n                typeName = transactionTypeName.addressAlias.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADD_EXCHANGE_OFFER:\n                typeName = transactionTypeName.addExchangeOffer.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_BONDED:\n                typeName = transactionTypeName.aggregateBonded.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_COMPLETE:\n                typeName = transactionTypeName.aggregateComplete.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_CONFIGURE:\n                typeName = transactionTypeName.chainConfigure.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_UPGRADE:\n                typeName = transactionTypeName.chainUpgrade.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].EXCHANGE_OFFER:\n                typeName = transactionTypeName.exchangeOffer.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REMOVE_EXCHANGE_OFFER:\n                typeName = transactionTypeName.removeExchangeOffer.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LINK_ACCOUNT:\n                typeName = transactionTypeName.accountLink.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LOCK:\n                typeName = transactionTypeName.lock.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_METADATA:\n                typeName = transactionTypeName.modifyAccountMetadata.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MOSAIC_METADATA:\n                typeName = transactionTypeName.modifyMosaicMetadata.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_NAMESPACE_METADATA:\n                typeName = transactionTypeName.modifyNamespaceMetadata.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_ADDRESS:\n                typeName = transactionTypeName.modifyAccountRestrictionAddress.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_MOSAIC:\n                typeName = transactionTypeName.modifyAccountRestrictionMosaic.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_OPERATION:\n                typeName = transactionTypeName.modifyAccountRestrictionOperation.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MULTISIG_ACCOUNT:\n                typeName = transactionTypeName.modifyMultisigAccount.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_ALIAS:\n                typeName = transactionTypeName.mosaicAlias.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_DEFINITION:\n                typeName = transactionTypeName.mosaicDefinition.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_SUPPLY_CHANGE:\n                typeName = transactionTypeName.mosaicSupplyChange.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REGISTER_NAMESPACE:\n                typeName = transactionTypeName.registerNameSpace.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_LOCK:\n                typeName = transactionTypeName.secretLock.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_PROOF:\n                typeName = transactionTypeName.secretProof.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].TRANSFER:\n                typeName = transactionTypeName.transfer.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ACCOUNT_METADATA_V2:\n                typeName = transactionTypeName.modifyAccountMetadata_v2.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_METADATA_V2:\n                typeName = transactionTypeName.modifyMosaicMetadata_v2.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].NAMESPACE_METADATA_V2:\n                typeName = transactionTypeName.modifyNamespaceMetadata_v2.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MOSAIC_LEVY:\n                typeName = transactionTypeName.modifyMosaicLevy.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REMOVE_MOSAIC_LEVY:\n                typeName = transactionTypeName.removeRemoveLevy.name;\n                break;\n            default:\n                typeName = null;\n                break;\n        }\n        return typeName;\n    }\n}\nTransactionUtils.getLockFundFee = (networkType, generationHash) => {\n    let buildTransactions = new _util_buildTransactions__WEBPACK_IMPORTED_MODULE_6__[\"BuildTransactions\"](networkType, generationHash);\n    let tempAcc = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Account\"].generateNewAccount(networkType);\n    let txn = buildTransactions.transfer(tempAcc.address, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PlainMessage\"].create('hello'));\n    let abt = buildTransactions.aggregateBonded([txn.toAggregate(tempAcc.publicAccount)]);\n    let signedTxn = tempAcc.sign(abt, generationHash);\n    return buildTransactions.hashLock(new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Mosaic\"](new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NamespaceId\"]('prx.xpx'), tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"UInt64\"].fromUint(10)), tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"UInt64\"].fromUint(10), signedTxn).maxFee.compact();\n};\n\n\n//# sourceURL=webpack:///./src/util/transactionUtils.ts?");

/***/ })

}]);