(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[44],{

/***/ "./src/util/multiSignatory.ts":
/*!************************************!*\
  !*** ./src/util/multiSignatory.ts ***!
  \************************************/
/*! exports provided: multiSign */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiSign\", function() { return multiSign; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tsjs-xpx-chain-sdk */ \"./node_modules/tsjs-xpx-chain-sdk/dist/index.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _state_utils_networkStateUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/state/utils/networkStateUtils */ \"./src/state/utils/networkStateUtils.ts\");\n/* harmony import */ var _util_walletUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/util/walletUtils */ \"./src/util/walletUtils.ts\");\n/* harmony import */ var _state_walletState__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/state/walletState */ \"./src/state/walletState.ts\");\n/* harmony import */ var _state_networkState__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/state/networkState */ \"./src/state/networkState.ts\");\n/* harmony import */ var _util_transactionUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/util/transactionUtils */ \"./src/util/transactionUtils.ts\");\n/* harmony import */ var _state_utils_listenerStateUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/state/utils/listenerStateUtils */ \"./src/state/utils/listenerStateUtils.ts\");\n/* harmony import */ var _state_listenerState__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/state/listenerState */ \"./src/state/listenerState.ts\");\n\n\n\n//line 483,485\n// import { environment } from '../environment/environment.js';\n\n\n\n // chainNetwork\n\n\n\nvar walletKey = \"sw\";\nfunction verifyContactPublicKey(address) {\n    var invalidPublicKey = '0000000000000000000000000000000000000000000000000000000000000000';\n    return new Promise(function (resolve) {\n        var accountInfo = _util_walletUtils__WEBPACK_IMPORTED_MODULE_4__[\"WalletUtils\"].getAccInfo(address);\n        accountInfo.then(function (account) {\n            if (account.publicKey == invalidPublicKey) {\n                console.warn(\"The receiver's public key is not valid for sending encrypted messages\");\n                resolve({ status: false, publicKey: account.publicKey });\n            }\n            else {\n                resolve({ status: true, publicKey: account.publicKey });\n            }\n        }, function (error) {\n            console.warn('Err: ' + error);\n        });\n    });\n}\nfunction generateContact(selected, name) {\n    var wallet = _state_walletState__WEBPACK_IMPORTED_MODULE_5__[\"walletState\"].currentLoggedInWallet;\n    var contact = [];\n    var accounts = wallet.accounts.filter(function (account) { return account.name != name; });\n    accounts.forEach(function (element) {\n        if (element.address == selected) {\n        }\n        else {\n            contact.push({\n                value: element.address,\n                label: element.name + ' - Owner account',\n            });\n        }\n    });\n    if (wallet.contacts != undefined) {\n        wallet.contacts.forEach(function (element) {\n            if (selected.indexOf(element.address) < 0) {\n                contact.push({\n                    value: element.address,\n                    label: element.name + ' - Contact',\n                });\n            }\n        });\n    }\n    return contact;\n}\nvar getPublicKey = function (address) {\n    return new Promise(function (resolve, reject) {\n        try {\n            _util_transactionUtils__WEBPACK_IMPORTED_MODULE_7__[\"TransactionUtils\"].getAccInfo(address).then(function (accountInfo) {\n                resolve(accountInfo.publicKey);\n            }).catch(function (error) {\n                console.log(error);\n                reject(false);\n            });\n        }\n        catch (error) {\n            reject(false);\n            console.log(error);\n        }\n    });\n};\n/* coSign: array() */\nfunction convertAccount(coSign, numApproveTransaction, numDeleteUser, accountToConvertName, walletPassword) {\n    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n        var verify, generationHash, multisigCosignatory, accountDetails, networkType, privateKey, accountToConvert, cosignatory, _i, coSign_1, cosignKey, address, publicKey, error_1, convertIntoMultisigTransaction, aggregateTransaction, signedAggregateBoundedTransaction, lockFundsTransaction, lockFundsTransactionSigned;\n        var _this = this;\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    verify = _util_walletUtils__WEBPACK_IMPORTED_MODULE_4__[\"WalletUtils\"].verifyWalletPassword(_state_walletState__WEBPACK_IMPORTED_MODULE_5__[\"walletState\"].currentLoggedInWallet.name, _state_networkState__WEBPACK_IMPORTED_MODULE_6__[\"networkState\"].chainNetworkName, walletPassword);\n                    if (!verify) {\n                        return [2 /*return*/, verify];\n                    }\n                    generationHash = _state_networkState__WEBPACK_IMPORTED_MODULE_6__[\"networkState\"].currentNetworkProfile.generationHash;\n                    multisigCosignatory = [];\n                    accountDetails = _state_walletState__WEBPACK_IMPORTED_MODULE_5__[\"walletState\"].currentLoggedInWallet.accounts.find(function (element) { return element.name === accountToConvertName; });\n                    networkType = _state_networkState__WEBPACK_IMPORTED_MODULE_6__[\"networkState\"].currentNetworkProfile.network.type;\n                    privateKey = _util_walletUtils__WEBPACK_IMPORTED_MODULE_4__[\"WalletUtils\"].decryptPrivateKey(new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Password\"](walletPassword), accountDetails.encrypted, accountDetails.iv);\n                    accountToConvert = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Account\"].createFromPrivateKey(privateKey, networkType);\n                    _i = 0, coSign_1 = coSign;\n                    _a.label = 1;\n                case 1:\n                    if (!(_i < coSign_1.length)) return [3 /*break*/, 8];\n                    cosignKey = coSign_1[_i];\n                    if (!(cosignKey.length == 64)) return [3 /*break*/, 2];\n                    cosignatory = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(cosignKey, networkType);\n                    return [3 /*break*/, 6];\n                case 2:\n                    if (!(cosignKey.length == 40 || cosignKey.length == 46)) return [3 /*break*/, 6];\n                    address = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(cosignKey);\n                    _a.label = 3;\n                case 3:\n                    _a.trys.push([3, 5, , 6]);\n                    publicKey = void 0;\n                    return [4 /*yield*/, getPublicKey(address)];\n                case 4:\n                    publicKey = _a.sent();\n                    cosignatory = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(publicKey, networkType);\n                    return [3 /*break*/, 6];\n                case 5:\n                    error_1 = _a.sent();\n                    console.log(error_1);\n                    return [3 /*break*/, 6];\n                case 6:\n                    multisigCosignatory.push(new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MultisigCosignatoryModification\"](tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MultisigCosignatoryModificationType\"].Add, cosignatory));\n                    _a.label = 7;\n                case 7:\n                    _i++;\n                    return [3 /*break*/, 1];\n                case 8:\n                    convertIntoMultisigTransaction = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"ModifyMultisigAccountTransaction\"].create(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Deadline\"].create(), numApproveTransaction, numDeleteUser, multisigCosignatory, networkType);\n                    aggregateTransaction = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"AggregateTransaction\"].createBonded(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Deadline\"].create(), [convertIntoMultisigTransaction.toAggregate(accountToConvert.publicAccount)], networkType);\n                    signedAggregateBoundedTransaction = accountToConvert.sign(aggregateTransaction, generationHash);\n                    lockFundsTransaction = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"LockFundsTransaction\"].create(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Deadline\"].create(), tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NetworkCurrencyMosaic\"].createRelative(10), tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"UInt64\"].fromUint(1000), signedAggregateBoundedTransaction, networkType);\n                    lockFundsTransactionSigned = accountToConvert.sign(lockFundsTransaction, generationHash);\n                    /*  const transactionHttp = new TransactionHttp(NetworkStateUtils.buildAPIEndpointURL(networkState.selectedAPIEndpoint)); */\n                    (function () { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(_this, void 0, void 0, function () {\n                        var hashLockAutoAnnounceSignedTx, autoAnnounceSignedTx;\n                        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                            try {\n                                hashLockAutoAnnounceSignedTx = new _state_listenerState__WEBPACK_IMPORTED_MODULE_9__[\"AutoAnnounceSignedTransaction\"](lockFundsTransactionSigned);\n                                hashLockAutoAnnounceSignedTx.announceAtBlock = _state_listenerState__WEBPACK_IMPORTED_MODULE_9__[\"listenerState\"].currentBlock + 1;\n                                autoAnnounceSignedTx = new _state_listenerState__WEBPACK_IMPORTED_MODULE_9__[\"AutoAnnounceSignedTransaction\"](signedAggregateBoundedTransaction);\n                                autoAnnounceSignedTx.hashAnnounceBlock = new _state_listenerState__WEBPACK_IMPORTED_MODULE_9__[\"HashAnnounceBlock\"](lockFundsTransactionSigned.hash);\n                                autoAnnounceSignedTx.hashAnnounceBlock.annouceAfterBlockNum = 1;\n                                autoAnnounceSignedTx.type = _state_listenerState__WEBPACK_IMPORTED_MODULE_9__[\"AnnounceType\"].BONDED;\n                                _state_utils_listenerStateUtils__WEBPACK_IMPORTED_MODULE_8__[\"ListenerStateUtils\"].addAutoAnnounceSignedTransaction(hashLockAutoAnnounceSignedTx);\n                                _state_utils_listenerStateUtils__WEBPACK_IMPORTED_MODULE_8__[\"ListenerStateUtils\"].addAutoAnnounceSignedTransaction(autoAnnounceSignedTx);\n                                /*   const confirmedTx = await announceLockfundAndWaitForConfirmation(accountToConvert.address, lockFundsTransactionSigned, lockFundsTransactionSigned.hash, transactionHttp);\n                                  console.log('confirmedTx');\n                                  console.log(confirmedTx);\n                                  // eslint-disable-next-line no-unused-vars\n                                  let aggregateTx = await announceAggregateBonded(accountToConvert.address, signedAggregateBoundedTransaction, signedAggregateBoundedTransaction.hash, confirmedTx, transactionHttp)\n                                  console.log('aggregateTx');\n                                  console.log(aggregateTx);\n                                  console.log(\"Done\"); */\n                            }\n                            catch (error) {\n                                console.log(error);\n                            }\n                            return [2 /*return*/];\n                        });\n                    }); })();\n                    return [2 /*return*/, verify];\n            }\n        });\n    });\n}\nfunction getAggregateBondedTransactions(publicAccount) {\n    return _util_walletUtils__WEBPACK_IMPORTED_MODULE_4__[\"WalletUtils\"].getAggregateBondedTransactions(publicAccount);\n}\nfunction onPartial(publicAccount) {\n    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n        var isPartial, result;\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    isPartial = new Promise(function (resolve, reject) {\n                        getAggregateBondedTransactions(publicAccount).then(function (txOnpartial) {\n                            if (txOnpartial !== null && txOnpartial.length > 0) {\n                                for (var _i = 0, txOnpartial_1 = txOnpartial; _i < txOnpartial_1.length; _i++) {\n                                    var tx = txOnpartial_1[_i];\n                                    for (var i = 0; i < tx.innerTransactions.length; i++) {\n                                        if (tx.innerTransactions[i].signer.publicKey === publicAccount.publicKey) {\n                                            resolve(true);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }).catch(function (error) {\n                            reject('Err: ' + error);\n                        });\n                    });\n                    return [4 /*yield*/, isPartial];\n                case 1:\n                    result = _a.sent();\n                    return [2 /*return*/, Boolean(result)];\n            }\n        });\n    });\n}\nfunction getMultisigAccountGraphInfo(address) {\n    return _util_walletUtils__WEBPACK_IMPORTED_MODULE_4__[\"WalletUtils\"].getMultisigAccGraphInfo(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(address));\n}\nfunction checkIsMultiSig(accountAddress) {\n    /* let account = walletState.currentLoggedInWallet.accounts.find(element=>element.address ===accountAddress)?walletState.currentLoggedInWallet.accounts.find(element=>element.address ===accountAddress):  walletState.currentLoggedInWallet.others.find(element=>element.address ===accountAddress) */\n    var wallet = _state_walletState__WEBPACK_IMPORTED_MODULE_5__[\"walletState\"].currentLoggedInWallet;\n    var account;\n    if (wallet.accounts.find(function (element) { return element.address === accountAddress; }) === undefined && wallet.others.find(function (element) { return element.address === accountAddress; }) === undefined) {\n        account = null;\n    }\n    else if (wallet.accounts.find(function (element) { return element.address === accountAddress; }) === undefined) {\n        account = wallet.others.find(function (element) { return element.address === accountAddress; });\n    }\n    else if (wallet.others.find(function (element) { return element.address === accountAddress; }) === undefined) {\n        account = wallet.accounts.find(function (element) { return element.address === accountAddress; });\n    }\n    var verify = false;\n    verify = account.getDirectParentMultisig().length ? true : false;\n    return Boolean(verify);\n}\nfunction checkHasMultiSig(accountAddress) {\n    /* let account = walletState.currentLoggedInWallet.accounts.find(element=>element.address ===accountAddress)?walletState.currentLoggedInWallet.accounts.find(element=>element.address ===accountAddress):  walletState.currentLoggedInWallet.others.find(element=>element.address ===accountAddress) */\n    var wallet = _state_walletState__WEBPACK_IMPORTED_MODULE_5__[\"walletState\"].currentLoggedInWallet;\n    var account;\n    if (wallet.accounts.find(function (element) { return element.address === accountAddress; }) === undefined && wallet.others.find(function (element) { return element.address === accountAddress; }) === undefined) {\n        account = null;\n    }\n    else if (wallet.accounts.find(function (element) { return element.address === accountAddress; }) === undefined) {\n        account = wallet.others.find(function (element) { return element.address === accountAddress; });\n    }\n    else if (wallet.others.find(function (element) { return element.address === accountAddress; }) === undefined) {\n        account = wallet.accounts.find(function (element) { return element.address === accountAddress; });\n    }\n    var verify = false;\n    var tempArr = account.multisigInfo.filter(function (account) { return account.level == -1; });\n    verify = tempArr.length > 0 ? true : false;\n    return Boolean(verify);\n}\n// modify multisig\nfunction modifyMultisigAccount(coSign, removeCosign, numApproveTransaction, numDeleteUser, cosigners, multisigAccount, walletPassword) {\n    var _this = this;\n    var verify = _util_walletUtils__WEBPACK_IMPORTED_MODULE_4__[\"WalletUtils\"].verifyWalletPassword(_state_walletState__WEBPACK_IMPORTED_MODULE_5__[\"walletState\"].currentLoggedInWallet.name, _state_networkState__WEBPACK_IMPORTED_MODULE_6__[\"networkState\"].chainNetworkName, walletPassword);\n    if (!verify) {\n        return verify;\n    }\n    var generationHash = _state_networkState__WEBPACK_IMPORTED_MODULE_6__[\"networkState\"].currentNetworkProfile.generationHash;\n    var multisigCosignatory = [];\n    var coSigner = [];\n    var networkType = _state_networkState__WEBPACK_IMPORTED_MODULE_6__[\"networkState\"].currentNetworkProfile.network.type;\n    if (cosigners.length > 0) {\n        cosigners.forEach(function (signer) {\n            var accountDetails = _state_walletState__WEBPACK_IMPORTED_MODULE_5__[\"walletState\"].currentLoggedInWallet.accounts.find(function (element) { return element.address === signer.address; });\n            var privateKey = _util_walletUtils__WEBPACK_IMPORTED_MODULE_4__[\"WalletUtils\"].decryptPrivateKey(new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Password\"](walletPassword), accountDetails.encrypted, accountDetails.iv);\n            coSigner.push(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Account\"].createFromPrivateKey(privateKey, networkType));\n        });\n    }\n    var cosignatory = [];\n    coSign.forEach(function (cosignKey, index) { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(_this, void 0, void 0, function () {\n        var address, publicKey, error_2;\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!(cosignKey.length == 64)) return [3 /*break*/, 1];\n                    cosignatory[index] = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(cosignKey, networkType);\n                    return [3 /*break*/, 5];\n                case 1:\n                    if (!(cosignKey.length == 40 || cosignKey.length == 46)) return [3 /*break*/, 5];\n                    address = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Address\"].createFromRawAddress(cosignKey);\n                    _a.label = 2;\n                case 2:\n                    _a.trys.push([2, 4, , 5]);\n                    publicKey = void 0;\n                    return [4 /*yield*/, getPublicKey(address)];\n                case 3:\n                    publicKey = _a.sent();\n                    cosignatory[index] = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(publicKey, networkType);\n                    return [3 /*break*/, 5];\n                case 4:\n                    error_2 = _a.sent();\n                    console.log(error_2);\n                    return [3 /*break*/, 5];\n                case 5:\n                    multisigCosignatory.push(new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MultisigCosignatoryModification\"](tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MultisigCosignatoryModificationType\"].Add, cosignatory[index]));\n                    return [2 /*return*/];\n            }\n        });\n    }); });\n    removeCosign.forEach(function (element, index) {\n        cosignatory[coSign.length + index] = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(element, networkType);\n        multisigCosignatory.push(new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MultisigCosignatoryModification\"](tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"MultisigCosignatoryModificationType\"].Remove, cosignatory[coSign.length + index]));\n    });\n    var relativeNumApproveTransaction = numApproveTransaction - multisigAccount.multisigInfo.find(function (element) { return element.level === 0; }).minApproval;\n    var relativeNumDeleteUser = numDeleteUser - multisigAccount.multisigInfo.find(function (element) { return element.level === 0; }).minRemoval;\n    console.log(relativeNumApproveTransaction);\n    console.log(relativeNumDeleteUser);\n    var convertIntoMultisigTransaction = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"ModifyMultisigAccountTransaction\"].create(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Deadline\"].create(), relativeNumApproveTransaction, relativeNumDeleteUser, multisigCosignatory, networkType);\n    var aggregateTransaction = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"AggregateTransaction\"].createBonded(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Deadline\"].create(), [convertIntoMultisigTransaction.toAggregate(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(multisigAccount.publicKey, _state_networkState__WEBPACK_IMPORTED_MODULE_6__[\"networkState\"].currentNetworkProfile.network.type))], networkType);\n    if (coSigner.length > 0) {\n        var transactions_1 = [];\n        coSigner.forEach(function (coSignerAccount) {\n            var signedAggregateBoundedTransaction = coSignerAccount.sign(aggregateTransaction, generationHash);\n            var lockFundsTransaction = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"LockFundsTransaction\"].create(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"Deadline\"].create(), tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"NetworkCurrencyMosaic\"].createRelative(10), tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"UInt64\"].fromUint(1000), signedAggregateBoundedTransaction, networkType);\n            var lockFundsTransactionSigned = coSignerAccount.sign(lockFundsTransaction, generationHash);\n            transactions_1.push({ coSignerAccount: coSignerAccount, signedAggregateBoundedTransaction: signedAggregateBoundedTransaction, lockFundsTransactionSigned: lockFundsTransactionSigned });\n        });\n        var transactionHttp = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionHttp\"](_state_utils_networkStateUtils__WEBPACK_IMPORTED_MODULE_3__[\"NetworkStateUtils\"].buildAPIEndpointURL(_state_networkState__WEBPACK_IMPORTED_MODULE_6__[\"networkState\"].selectedAPIEndpoint));\n        (function () { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(_this, void 0, void 0, function () {\n            var _i, transactions_2, transaction, hashLockAutoAnnounceSignedTx, autoAnnounceSignedTx;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                try {\n                    for (_i = 0, transactions_2 = transactions_1; _i < transactions_2.length; _i++) {\n                        transaction = transactions_2[_i];\n                        hashLockAutoAnnounceSignedTx = new _state_listenerState__WEBPACK_IMPORTED_MODULE_9__[\"AutoAnnounceSignedTransaction\"](transaction.lockFundsTransactionSigned);\n                        hashLockAutoAnnounceSignedTx.announceAtBlock = _state_listenerState__WEBPACK_IMPORTED_MODULE_9__[\"listenerState\"].currentBlock + 1;\n                        autoAnnounceSignedTx = new _state_listenerState__WEBPACK_IMPORTED_MODULE_9__[\"AutoAnnounceSignedTransaction\"](transaction.signedAggregateBoundedTransaction);\n                        autoAnnounceSignedTx.hashAnnounceBlock = new _state_listenerState__WEBPACK_IMPORTED_MODULE_9__[\"HashAnnounceBlock\"](transaction.lockFundsTransactionSigned.hash);\n                        autoAnnounceSignedTx.hashAnnounceBlock.annouceAfterBlockNum = 1;\n                        autoAnnounceSignedTx.type = _state_listenerState__WEBPACK_IMPORTED_MODULE_9__[\"AnnounceType\"].BONDED;\n                        _state_utils_listenerStateUtils__WEBPACK_IMPORTED_MODULE_8__[\"ListenerStateUtils\"].addAutoAnnounceSignedTransaction(hashLockAutoAnnounceSignedTx);\n                        _state_utils_listenerStateUtils__WEBPACK_IMPORTED_MODULE_8__[\"ListenerStateUtils\"].addAutoAnnounceSignedTransaction(autoAnnounceSignedTx);\n                    }\n                }\n                catch (error) {\n                    console.log(error);\n                }\n                return [2 /*return*/];\n            });\n        }); })();\n        return verify;\n    }\n}\n//level 1 = cosigner\nvar fetchMultiSigCosigners = function (multiSigAddress) {\n    var account = _state_walletState__WEBPACK_IMPORTED_MODULE_5__[\"walletState\"].currentLoggedInWallet.accounts.find(function (element) { return element.address === multiSigAddress; }) ? _state_walletState__WEBPACK_IMPORTED_MODULE_5__[\"walletState\"].currentLoggedInWallet.accounts.find(function (element) { return element.address === multiSigAddress; }) : _state_walletState__WEBPACK_IMPORTED_MODULE_5__[\"walletState\"].currentLoggedInWallet.others.find(function (element) { return element.address === multiSigAddress; });\n    if (account == undefined) {\n        return [];\n    }\n    var cosigners = account.multisigInfo.filter(function (element) { return element.level === 1; });\n    var list = [];\n    cosigners.forEach(function (cosigner) {\n        var isInWallet = _state_walletState__WEBPACK_IMPORTED_MODULE_5__[\"walletState\"].currentLoggedInWallet.accounts.find(function (account) { return account.publicKey === cosigner.publicKey; }) ? true : false;\n        if (isInWallet) { //if cosigner in current wallet\n            var account_1 = _state_walletState__WEBPACK_IMPORTED_MODULE_5__[\"walletState\"].currentLoggedInWallet.accounts.find(function (account) { return account.publicKey === cosigner.publicKey; });\n            list.push({ address: account_1.address, name: account_1.name, balance: account_1.balance });\n        }\n        else { //cosigner not in this wallet\n            /*  let convertedAddress = Helper.createPublicAccount(cosigner.publicKey,networkState.currentNetworkProfile.network.type).address.plain()\n              \n                list.push({ address: convertedAddress, name: convertedAddress.substr(-4) , balance: undefined})\n              */\n        }\n    });\n    list.sort(function (a, b) { return (a.balance < b.balance) ? 1 : -1; });\n    return list;\n};\nvar multiSign = Object(vue__WEBPACK_IMPORTED_MODULE_1__[\"readonly\"])({\n    // config,\n    getPublicKey: getPublicKey,\n    generateContact: generateContact,\n    verifyContactPublicKey: verifyContactPublicKey,\n    convertAccount: convertAccount,\n    onPartial: onPartial,\n    checkIsMultiSig: checkIsMultiSig,\n    checkHasMultiSig: checkHasMultiSig,\n    getMultisigAccountGraphInfo: getMultisigAccountGraphInfo,\n    modifyMultisigAccount: modifyMultisigAccount,\n    fetchMultiSigCosigners: fetchMultiSigCosigners,\n});\n\n\n//# sourceURL=webpack:///./src/util/multiSignatory.ts?");

/***/ }),

/***/ "./src/util/transactionUtils.ts":
/*!**************************************!*\
  !*** ./src/util/transactionUtils.ts ***!
  \**************************************/
/*! exports provided: transactionTypeName, TransactionUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transactionTypeName\", function() { return transactionTypeName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TransactionUtils\", function() { return TransactionUtils; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tsjs-xpx-chain-sdk */ \"./node_modules/tsjs-xpx-chain-sdk/dist/index.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _state_networkState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state/networkState */ \"./src/state/networkState.ts\");\n/* harmony import */ var _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/chainUtils */ \"./src/util/chainUtils.ts\");\n/* harmony import */ var _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/REST/chainAPICall */ \"./src/models/REST/chainAPICall.ts\");\n\n\n\n\n\n\nvar networkAPIEndpoint = Object(vue__WEBPACK_IMPORTED_MODULE_1__[\"computed\"])(function () { var _a; return _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].buildAPIEndpoint(_state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].selectedAPIEndpoint, (_a = _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile) === null || _a === void 0 ? void 0 : _a.httpPort); });\nvar localNetworkType = Object(vue__WEBPACK_IMPORTED_MODULE_1__[\"computed\"])(function () { var _a; return _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getNetworkType((_a = _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile) === null || _a === void 0 ? void 0 : _a.network.type); });\nvar transactionTypeName = {\n    transfer: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].TRANSFER,\n        name: 'Transfer'\n    },\n    registerNameSpace: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REGISTER_NAMESPACE,\n        name: 'Register Namespace'\n    },\n    mosaicDefinition: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_DEFINITION,\n        name: 'Mosaic Definition'\n    },\n    mosaicSupplyChange: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_SUPPLY_CHANGE,\n        name: 'Mosaic Supply Change'\n    },\n    modifyMultisigAccount: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MULTISIG_ACCOUNT,\n        name: 'Modify Multisig Account'\n    },\n    aggregateComplete: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_COMPLETE,\n        name: 'Aggregate Complete'\n    },\n    aggregateBonded: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_BONDED,\n        name: 'Aggregate Bonded'\n    },\n    mosaicAlias: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_ALIAS,\n        name: 'Mosaic Alias'\n    },\n    addressAlias: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADDRESS_ALIAS,\n        name: 'Address Alias'\n    },\n    lock: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LOCK,\n        name: 'LockFund'\n    },\n    accountLink: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LINK_ACCOUNT,\n        name: 'Account Link'\n    },\n    exchangeOffer: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].EXCHANGE_OFFER,\n        name: 'Exchange Offer'\n    },\n    addExchangeOffer: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADD_EXCHANGE_OFFER,\n        name: 'Add Exchange Offer'\n    },\n    removeExchangeOffer: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REMOVE_EXCHANGE_OFFER,\n        name: 'Remove Exchange Offer'\n    },\n    modifyAccountMetadata: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_METADATA,\n        name: 'Modify Account Metadata'\n    },\n    modifyMosaicMetadata: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MOSAIC_METADATA,\n        name: 'Modify Asset Metadata'\n    },\n    modifyNamespaceMetadata: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_NAMESPACE_METADATA,\n        name: 'Modify Namespace Metadata'\n    },\n    modifyAccountRestrictionAddress: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_ADDRESS,\n        name: 'Modify Account Restriction Address'\n    },\n    modifyAccountRestrictionMosaic: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_MOSAIC,\n        name: 'Modify Account Restriction Asset'\n    },\n    modifyAccountRestrictionOperation: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_OPERATION,\n        name: 'Modify Account Restriction Operation'\n    },\n    chainConfigure: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_CONFIGURE,\n        name: 'Chain Configure'\n    },\n    chainUpgrade: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_UPGRADE,\n        name: 'Chain Upgrade'\n    },\n    secretLock: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_LOCK,\n        name: \"Secret lock\"\n    },\n    secretProof: {\n        id: tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_PROOF,\n        name: \"Secret proof\"\n    }\n};\nvar TransactionUtils = /** @class */ (function () {\n    function TransactionUtils() {\n    }\n    TransactionUtils.getAccInfo = function (address) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n            var chainAPICall, accountInfo;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        chainAPICall = new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_5__[\"ChainAPICall\"](networkAPIEndpoint.value);\n                        return [4 /*yield*/, chainAPICall.accountAPI.getAccountInfo(address)];\n                    case 1:\n                        accountInfo = _a.sent();\n                        // console.log(publicKey);\n                        return [2 /*return*/, accountInfo];\n                }\n            });\n        });\n    };\n    TransactionUtils.getTransactionTypeNameByEnum = function (transactionType) {\n        var name = \"\";\n        for (var key in transactionTypeName) {\n            if (transactionType === transactionTypeName[key].id) {\n                name = transactionTypeName[key].name;\n                break;\n            }\n        }\n        return name;\n    };\n    TransactionUtils.getFee = function (transaction) {\n        return transaction.maxFee.compact();\n    };\n    TransactionUtils.getFakeEncryptedMessageSize = function (message) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"EncryptedMessage\"].create(message, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PublicAccount\"].createFromPublicKey(\"0\".repeat(64), _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getNetworkType(localNetworkType.value)), \"0\".repeat(64)).size();\n    };\n    TransactionUtils.getPlainMessageSize = function (message) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"PlainMessage\"].create(message).size();\n    };\n    TransactionUtils.signTransaction = function (transaction, account, generationHash) {\n        return account.sign(transaction, generationHash);\n    };\n    TransactionUtils.aggregateToCosignatureTransaction = function (aggregateTransaction) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"CosignatureTransaction\"].create(aggregateTransaction);\n    };\n    TransactionUtils.cosignTransaction = function (transactionToCosign, account) {\n        var cosignatureTransaction = TransactionUtils.aggregateToCosignatureTransaction(transactionToCosign);\n        return account.signCosignatureTransaction(cosignatureTransaction);\n    };\n    TransactionUtils.getTransactions = function (publicAccount, queryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n            var transactions;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getAccountTransactions(publicAccount, queryParams)];\n                    case 1:\n                        transactions = _a.sent();\n                        return [2 /*return*/, transactions];\n                }\n            });\n        });\n    };\n    TransactionUtils.getUnconfirmedTransactions = function (publicAccount, queryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n            var transactions;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getAccountUnconfirmedTransactions(publicAccount, queryParams)];\n                    case 1:\n                        transactions = _a.sent();\n                        return [2 /*return*/, transactions];\n                }\n            });\n        });\n    };\n    TransactionUtils.getPartialTransactions = function (publicAccount, queryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n            var transactions;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].getAccountPartialTransactions(publicAccount, queryParams)];\n                    case 1:\n                        transactions = _a.sent();\n                        return [2 /*return*/, transactions];\n                }\n            });\n        });\n    };\n    TransactionUtils.announceTransaction = function (signedTx) {\n        _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].announceTransaction(signedTx);\n    };\n    TransactionUtils.announceBondedTransaction = function (signedTx) {\n        _util_chainUtils__WEBPACK_IMPORTED_MODULE_4__[\"ChainUtils\"].announceBondedTransaction(signedTx);\n    };\n    TransactionUtils.getTransactionTypeName = function (type) {\n        var typeName = \"\";\n        switch (type) {\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADDRESS_ALIAS:\n                typeName = transactionTypeName.addressAlias.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].ADD_EXCHANGE_OFFER:\n                typeName = transactionTypeName.addExchangeOffer.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_BONDED:\n                typeName = transactionTypeName.aggregateBonded.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].AGGREGATE_COMPLETE:\n                typeName = transactionTypeName.aggregateComplete.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_CONFIGURE:\n                typeName = transactionTypeName.chainConfigure.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].CHAIN_UPGRADE:\n                typeName = transactionTypeName.chainUpgrade.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].EXCHANGE_OFFER:\n                typeName = transactionTypeName.exchangeOffer.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REMOVE_EXCHANGE_OFFER:\n                typeName = transactionTypeName.removeExchangeOffer.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LINK_ACCOUNT:\n                typeName = transactionTypeName.accountLink.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].LOCK:\n                typeName = transactionTypeName.lock.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_METADATA:\n                typeName = transactionTypeName.modifyAccountMetadata.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MOSAIC_METADATA:\n                typeName = transactionTypeName.modifyMosaicMetadata.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_NAMESPACE_METADATA:\n                typeName = transactionTypeName.modifyNamespaceMetadata.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_ADDRESS:\n                typeName = transactionTypeName.modifyAccountRestrictionAddress.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_MOSAIC:\n                typeName = transactionTypeName.modifyAccountRestrictionMosaic.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_OPERATION:\n                typeName = transactionTypeName.modifyAccountRestrictionOperation.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MODIFY_MULTISIG_ACCOUNT:\n                typeName = transactionTypeName.modifyMultisigAccount.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_ALIAS:\n                typeName = transactionTypeName.mosaicAlias.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_DEFINITION:\n                typeName = transactionTypeName.mosaicDefinition.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].MOSAIC_SUPPLY_CHANGE:\n                typeName = transactionTypeName.mosaicSupplyChange.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].REGISTER_NAMESPACE:\n                typeName = transactionTypeName.registerNameSpace.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_LOCK:\n                typeName = transactionTypeName.secretLock.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].SECRET_PROOF:\n                typeName = transactionTypeName.secretProof.name;\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_2__[\"TransactionType\"].TRANSFER:\n                typeName = transactionTypeName.transfer.name;\n                break;\n            default:\n                typeName = null;\n                break;\n        }\n        return typeName;\n    };\n    return TransactionUtils;\n}());\n\n\n\n//# sourceURL=webpack:///./src/util/transactionUtils.ts?");

/***/ })

}]);