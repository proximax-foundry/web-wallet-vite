(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[10],{

/***/ "./src/util/namespaceUtils.ts":
/*!************************************!*\
  !*** ./src/util/namespaceUtils.ts ***!
  \************************************/
/*! exports provided: NamespaceUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NamespaceUtils\", function() { return NamespaceUtils; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tsjs-xpx-chain-sdk */ \"./node_modules/tsjs-xpx-chain-sdk/dist/index.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _state_walletState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../state/walletState */ \"./src/state/walletState.ts\");\n/* harmony import */ var _state_networkState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state/networkState */ \"./src/state/networkState.ts\");\n/* harmony import */ var _util_walletUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/walletUtils */ \"./src/util/walletUtils.ts\");\n/* harmony import */ var _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/REST/chainAPICall */ \"./src/models/REST/chainAPICall.ts\");\n/* harmony import */ var _state_listenerState__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/state/listenerState */ \"./src/state/listenerState.ts\");\n/* harmony import */ var _models_stores_chainProfileConfig__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/models/stores/chainProfileConfig */ \"./src/models/stores/chainProfileConfig.ts\");\n/* harmony import */ var _state_appState__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/state/appState */ \"./src/state/appState.ts\");\n/* harmony import */ var _transactionUtils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transactionUtils */ \"./src/util/transactionUtils.ts\");\n\n\n\n\n\n\n\n\n\n\nclass NamespaceUtils {\n    static getLinkedMosaic(namespaceId, endpoint) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let rest = new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_5__[\"ChainAPICall\"](endpoint);\n            let mosaicId = yield rest.namespaceAPI.getLinkedMosaicId(namespaceId);\n            return mosaicId;\n        });\n    }\n    static getLinkedAddress(namespaceId, endpoint) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let rest = new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_5__[\"ChainAPICall\"](endpoint);\n            let address = yield rest.namespaceAPI.getLinkedAddress(namespaceId);\n            return address;\n        });\n    }\n    static getCosignerList(address) {\n        const account = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.accounts.find((account) => account.address == address);\n        const other = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.others.find((account) => account.address == address);\n        let multiSig = account ? account.getDirectParentMultisig() : [];\n        let multiSigOther = other ? other.getDirectParentMultisig() : [];\n        if (multiSig.length > 0 || multiSigOther.length > 0) {\n            const cosigner = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.accounts.filter(account => {\n                if (multiSig.indexOf(account.publicKey) >= 0 || multiSigOther.indexOf(account.publicKey) >= 0) {\n                    return true;\n                }\n            });\n            let cosignList = [];\n            if (cosigner.length > 0) {\n                cosigner.forEach((cosign) => {\n                    cosignList.push({\n                        name: cosign.name,\n                        address: cosign.address,\n                        balance: cosign.balance,\n                    });\n                });\n            }\n            return { list: cosignList };\n        }\n        else {\n            return { list: [] };\n        }\n    }\n}\nNamespaceUtils.rootNamespaceTransaction = (namespaceName, duration) => {\n    let buildTransactions = _state_appState__WEBPACK_IMPORTED_MODULE_8__[\"AppState\"].buildTxn;\n    return buildTransactions.registerRootNamespace(namespaceName, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"UInt64\"].fromUint(NamespaceUtils.calculateDuration(duration)));\n};\nNamespaceUtils.subNamespaceTransaction = (rootNamespace, subNamespace) => {\n    let buildTransactions = _state_appState__WEBPACK_IMPORTED_MODULE_8__[\"AppState\"].buildTxn;\n    return buildTransactions.registersubNamespace(rootNamespace, subNamespace);\n};\nNamespaceUtils.getRootNamespaceTransactionFee = (namespaceName) => {\n    let registerRootNamespaceTransaction = NamespaceUtils.rootNamespaceTransaction(namespaceName, 10);\n    return registerRootNamespaceTransaction.maxFee.compact();\n};\nNamespaceUtils.getSubNamespaceTransactionFee = (subNamespace, rootNamespace) => {\n    let registerSubNamespaceTransaction = NamespaceUtils.subNamespaceTransaction(rootNamespace, subNamespace);\n    return registerSubNamespaceTransaction.maxFee.compact();\n};\nNamespaceUtils.calculateDuration = (durationInDay) => {\n    let chainConfig = new _models_stores_chainProfileConfig__WEBPACK_IMPORTED_MODULE_7__[\"ChainProfileConfig\"](_state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].chainNetworkName);\n    chainConfig.init();\n    let blockTargetTime = parseInt(chainConfig.blockGenerationTargetTime);\n    let blockTargetTimeByDay = (60 * 60 * 24) / blockTargetTime;\n    // 5760 = 4 * 60 * 24 -> 15sec per block\n    return Math.floor(durationInDay * blockTargetTimeByDay);\n};\nNamespaceUtils.listNamespaces = (address) => {\n    const account = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.accounts.find((account) => account.address === address);\n    const accountNamespaces = account ? account.namespaces.filter(namespace => namespace.active === true) : [];\n    const other = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.others.find((account) => account.address === address);\n    const otherNamespaces = other ? other.namespaces.filter(namespace => namespace.active === true) : [];\n    const accountNamespacesNum = accountNamespaces.length;\n    const otherNamespacesNum = otherNamespaces.length;\n    let namespacesArr = [];\n    if ((accountNamespacesNum + otherNamespacesNum) > 0) {\n        if (accountNamespacesNum > 0) {\n            accountNamespaces.forEach((namespaceElement) => {\n                const level = namespaceElement.name.split('.');\n                let isDisabled;\n                if (level.length > 2) {\n                    isDisabled = true;\n                }\n                else {\n                    isDisabled = false;\n                }\n                if (typeof namespaceElement.endHeight === 'string') {\n                    namespacesArr.push({\n                        value: namespaceElement.name,\n                        label: namespaceElement.name,\n                        disabled: isDisabled,\n                        level: level\n                    });\n                    return;\n                }\n                let blockDifference = namespaceElement.endHeight - _state_appState__WEBPACK_IMPORTED_MODULE_8__[\"AppState\"].readBlockHeight;\n                if (blockDifference > 0) {\n                    namespacesArr.push({\n                        value: namespaceElement.name,\n                        label: namespaceElement.name,\n                        disabled: isDisabled,\n                        level: level\n                    });\n                }\n            });\n        }\n        if (otherNamespacesNum > 0) {\n            otherNamespaces.forEach((namespaceElement) => {\n                const level = namespaceElement.name.split('.');\n                let isDisabled;\n                if (level.length > 2) {\n                    isDisabled = true;\n                }\n                else {\n                    isDisabled = false;\n                }\n                if (typeof namespaceElement.endHeight === 'string') {\n                    namespacesArr.push({\n                        value: namespaceElement.name,\n                        label: namespaceElement.name,\n                        disabled: isDisabled,\n                        level: level\n                    });\n                    return;\n                }\n                let blockDifference = namespaceElement.endHeight - _state_listenerState__WEBPACK_IMPORTED_MODULE_6__[\"listenerState\"].currentBlock;\n                if (blockDifference > 0) {\n                    namespacesArr.push({\n                        value: namespaceElement.name,\n                        label: namespaceElement.name,\n                        disabled: isDisabled,\n                        level: level\n                    });\n                }\n            });\n        }\n        namespacesArr.sort((a, b) => {\n            if (a.label > b.label)\n                return 1;\n            if (a.label < b.label)\n                return -1;\n            return 0;\n        });\n        namespacesArr.sort((a, b) => {\n            if (a.level > b.level)\n                return 1;\n            if (a.level < b.level)\n                return -1;\n            return 0;\n        });\n    }\n    return namespacesArr;\n};\nNamespaceUtils.listRootNamespaces = (address) => {\n    const account = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.accounts.find((account) => account.address === address);\n    const accountNamespaces = account ? account.namespaces.filter(namespace => namespace.active === true) : [];\n    const other = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.others.find((account) => account.address === address);\n    const otherNamespaces = other ? other.namespaces.filter(namespace => namespace.active === true) : [];\n    const accountNamespacesNum = accountNamespaces.length;\n    const otherNamespacesNum = otherNamespaces.length;\n    let namespacesArr = [];\n    if ((accountNamespacesNum + otherNamespacesNum) > 0) {\n        if (accountNamespacesNum > 0) {\n            accountNamespaces.forEach((namespaceElement) => {\n                const level = namespaceElement.name.split('.');\n                let isDisabled = false;\n                if (level.length == 1) {\n                    namespacesArr.push({\n                        value: namespaceElement.name,\n                        label: namespaceElement.name,\n                        disabled: isDisabled,\n                        level: level\n                    });\n                }\n            });\n        }\n        if (otherNamespacesNum > 0) {\n            otherNamespaces.forEach((namespaceElement) => {\n                const level = namespaceElement.name.split('.');\n                let isDisabled = false;\n                if (level.length == 1) {\n                    namespacesArr.push({\n                        value: namespaceElement.name,\n                        label: namespaceElement.name,\n                        disabled: isDisabled,\n                        level: level\n                    });\n                }\n            });\n        }\n        namespacesArr.sort((a, b) => {\n            if (a.label > b.label)\n                return 1;\n            if (a.label < b.label)\n                return -1;\n            return 0;\n        });\n    }\n    return namespacesArr;\n};\nNamespaceUtils.getSenderAccount = (selectedAddress, walletPassword) => {\n    const accAddress = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Address\"].createFromRawAddress(selectedAddress);\n    const accountDetails = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.accounts.find((account) => account.address == accAddress.plain());\n    const encryptedPassword = _util_walletUtils__WEBPACK_IMPORTED_MODULE_4__[\"WalletUtils\"].createPassword(walletPassword);\n    let privateKey = _util_walletUtils__WEBPACK_IMPORTED_MODULE_4__[\"WalletUtils\"].decryptPrivateKey(encryptedPassword, accountDetails.encrypted, accountDetails.iv);\n    const account = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Account\"].createFromPrivateKey(privateKey, _state_appState__WEBPACK_IMPORTED_MODULE_8__[\"AppState\"].networkType);\n    return account;\n};\nNamespaceUtils.createRootNamespace = (selectedAddress, walletPassword, namespaceName, duration) => {\n    let registerRootNamespaceTransaction = NamespaceUtils.rootNamespaceTransaction(namespaceName, duration);\n    const account = NamespaceUtils.getSenderAccount(selectedAddress, walletPassword);\n    let signedTx = account.sign(registerRootNamespaceTransaction, _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile.generationHash);\n    _transactionUtils__WEBPACK_IMPORTED_MODULE_9__[\"TransactionUtils\"].announceTransaction(signedTx);\n    return signedTx.hash;\n};\nNamespaceUtils.createSubNamespace = (selectedAddress, walletPassword, subNamespace, rootNamespace) => {\n    let registerSubNamespaceTransaction = NamespaceUtils.subNamespaceTransaction(rootNamespace, subNamespace);\n    const account = NamespaceUtils.getSenderAccount(selectedAddress, walletPassword);\n    let signedTx = account.sign(registerSubNamespaceTransaction, _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile.generationHash);\n    _transactionUtils__WEBPACK_IMPORTED_MODULE_9__[\"TransactionUtils\"].announceTransaction(signedTx);\n};\nNamespaceUtils.createRootNamespaceMultisig = (selectedAddress, walletPassword, namespaceName, duration, multiSigAddress) => {\n    let buildTransactions = _state_appState__WEBPACK_IMPORTED_MODULE_8__[\"AppState\"].buildTxn;\n    let registerRootNamespaceTransaction = NamespaceUtils.rootNamespaceTransaction(namespaceName, duration);\n    const account = NamespaceUtils.getSenderAccount(selectedAddress, walletPassword);\n    const multisSigAccount = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.accounts.find((element) => element.address === multiSigAddress);\n    const multisSigOther = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.others.find((element) => element.address === multiSigAddress);\n    const multisigPublicKey = multisSigAccount ? multisSigAccount.publicKey : multisSigOther.publicKey;\n    const multisigPublicAccount = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"PublicAccount\"].createFromPublicKey(multisigPublicKey, _state_appState__WEBPACK_IMPORTED_MODULE_8__[\"AppState\"].networkType);\n    const innerTxn = [registerRootNamespaceTransaction.toAggregate(multisigPublicAccount)];\n    const aggregateBondedTx = buildTransactions.aggregateBonded(innerTxn);\n    const aggregateBondedTxSigned = account.sign(aggregateBondedTx, _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile.generationHash);\n    let hashLockTx = _transactionUtils__WEBPACK_IMPORTED_MODULE_9__[\"TransactionUtils\"].lockFundTx(aggregateBondedTxSigned);\n    let signedHashlock = account.sign(hashLockTx, _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile.generationHash);\n    _transactionUtils__WEBPACK_IMPORTED_MODULE_9__[\"TransactionUtils\"].announceLF_AND_addAutoAnnounceABT(signedHashlock, aggregateBondedTxSigned);\n};\nNamespaceUtils.createSubNamespaceMultisig = (selectedAddress, walletPassword, subNamespace, rootNamespace, multiSigAddress) => {\n    let buildTransactions = _state_appState__WEBPACK_IMPORTED_MODULE_8__[\"AppState\"].buildTxn;\n    let registerSubNamespaceTransaction = NamespaceUtils.subNamespaceTransaction(rootNamespace, subNamespace);\n    const account = NamespaceUtils.getSenderAccount(selectedAddress, walletPassword);\n    const multisSigAccount = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.accounts.find((element) => element.address === multiSigAddress);\n    const multisSigOther = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.others.find((element) => element.address === multiSigAddress);\n    const multisigPublicKey = multisSigAccount ? multisSigAccount.publicKey : multisSigOther.publicKey;\n    const multisigPublicAccount = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"PublicAccount\"].createFromPublicKey(multisigPublicKey, _state_appState__WEBPACK_IMPORTED_MODULE_8__[\"AppState\"].networkType);\n    const innerTxn = [registerSubNamespaceTransaction.toAggregate(multisigPublicAccount)];\n    const aggregateBondedTx = buildTransactions.aggregateBonded(innerTxn);\n    const aggregateBondedTxSigned = account.sign(aggregateBondedTx, _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile.generationHash);\n    let hashLockTx = _transactionUtils__WEBPACK_IMPORTED_MODULE_9__[\"TransactionUtils\"].lockFundTx(aggregateBondedTxSigned);\n    let signedHashlock = account.sign(hashLockTx, _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile.generationHash);\n    _transactionUtils__WEBPACK_IMPORTED_MODULE_9__[\"TransactionUtils\"].announceLF_AND_addAutoAnnounceABT(signedHashlock, aggregateBondedTxSigned);\n};\nNamespaceUtils.extendNamespace = (selectedAddress, walletPassword, namespaceName, duration) => {\n    let extendNamespaceTx = NamespaceUtils.rootNamespaceTransaction(namespaceName, duration);\n    const account = NamespaceUtils.getSenderAccount(selectedAddress, walletPassword);\n    let signedTx = account.sign(extendNamespaceTx, _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile.generationHash);\n    _transactionUtils__WEBPACK_IMPORTED_MODULE_9__[\"TransactionUtils\"].announceTransaction(signedTx);\n};\nNamespaceUtils.extendNamespaceMultisig = (selectedAddress, walletPassword, namespaceName, duration, multiSigAddress) => {\n    let buildTransactions = _state_appState__WEBPACK_IMPORTED_MODULE_8__[\"AppState\"].buildTxn;\n    let extendNamespaceTx = NamespaceUtils.rootNamespaceTransaction(namespaceName, duration);\n    const account = NamespaceUtils.getSenderAccount(selectedAddress, walletPassword);\n    const multisSigAccount = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.accounts.find((element) => element.address === multiSigAddress);\n    const multisSigOther = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet.others.find((element) => element.address === multiSigAddress);\n    const multisigPublicKey = multisSigAccount ? multisSigAccount.publicKey : multisSigOther.publicKey;\n    const multisigPublicAccount = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"PublicAccount\"].createFromPublicKey(multisigPublicKey, _state_appState__WEBPACK_IMPORTED_MODULE_8__[\"AppState\"].networkType);\n    const innerTxn = [extendNamespaceTx.toAggregate(multisigPublicAccount)];\n    const aggregateBondedTx = buildTransactions.aggregateBonded(innerTxn);\n    const aggregateBondedTxSigned = account.sign(aggregateBondedTx, _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile.generationHash);\n    let hashLockTx = _transactionUtils__WEBPACK_IMPORTED_MODULE_9__[\"TransactionUtils\"].lockFundTx(aggregateBondedTxSigned);\n    let signedHashlock = account.sign(hashLockTx, _state_networkState__WEBPACK_IMPORTED_MODULE_3__[\"networkState\"].currentNetworkProfile.generationHash);\n    _transactionUtils__WEBPACK_IMPORTED_MODULE_9__[\"TransactionUtils\"].announceLF_AND_addAutoAnnounceABT(signedHashlock, aggregateBondedTxSigned);\n};\n\n\n//# sourceURL=webpack:///./src/util/namespaceUtils.ts?");

/***/ })

}]);