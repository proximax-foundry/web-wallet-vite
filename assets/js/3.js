(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[3],{

/***/ "./node_modules/primevue/dropdown/dropdown.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/primevue/dropdown/dropdown.esm.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return script; });\n/* harmony import */ var primevue_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! primevue/utils */ \"./node_modules/primevue/utils/utils.esm.js\");\n/* harmony import */ var primevue_overlayeventbus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! primevue/overlayeventbus */ \"./node_modules/primevue/overlayeventbus/overlayeventbus.esm.js\");\n/* harmony import */ var primevue_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! primevue/api */ \"./node_modules/primevue/api/api.esm.js\");\n/* harmony import */ var primevue_ripple__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! primevue/ripple */ \"./node_modules/primevue/ripple/ripple.esm.js\");\n/* harmony import */ var primevue_virtualscroller__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! primevue/virtualscroller */ \"./node_modules/primevue/virtualscroller/virtualscroller.esm.js\");\n/* harmony import */ var primevue_portal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! primevue/portal */ \"./node_modules/primevue/portal/portal.esm.js\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\n\n\n\n\n\n\nvar script = {\n    name: 'Dropdown',\n    emits: ['update:modelValue', 'before-show', 'before-hide', 'show', 'hide', 'change', 'filter', 'focus', 'blur'],\n    props: {\n        modelValue: null,\n        options: Array,\n        optionLabel: null,\n        optionValue: null,\n        optionDisabled: null,\n        optionGroupLabel: null,\n        optionGroupChildren: null,\n\t\tscrollHeight: {\n\t\t\ttype: String,\n\t\t\tdefault: '200px'\n\t\t},\n\t\tfilter: Boolean,\n        filterPlaceholder: String,\n        filterLocale: String,\n        filterMatchMode: {\n            type: String,\n            default: 'contains'\n        },\n        filterFields: {\n            type: Array,\n            default: null\n        },\n\t\teditable: Boolean,\n\t\tplaceholder: String,\n\t\tdisabled: Boolean,\n        dataKey: null,\n        showClear: Boolean,\n        inputId: String,\n        tabindex: String,\n        ariaLabelledBy: null,\n        appendTo: {\n            type: String,\n            default: 'body'\n        },\n        emptyFilterMessage: {\n            type: String,\n            default: null\n        },\n        emptyMessage: {\n            type: String,\n            default: null\n        },\n        panelClass: null,\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        loadingIcon: {\n            type: String,\n            default: 'pi pi-spinner pi-spin'\n        },\n        virtualScrollerOptions: {\n            type: Object,\n            default: null\n        }\n    },\n    data() {\n        return {\n            focused: false,\n            filterValue: null,\n            overlayVisible: false\n        };\n    },\n    watch: {\n        modelValue() {\n            this.isModelValueChanged = true;\n        }\n    },\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    searchTimeout: null,\n    currentSearchChar: null,\n    previousSearchChar: null,\n    searchValue: null,\n    overlay: null,\n    itemsWrapper: null,\n    virtualScroller: null,\n    isModelValueChanged: false,\n    updated() {\n        if (this.overlayVisible && this.isModelValueChanged) {\n            this.scrollValueInView();\n        }\n\n        this.isModelValueChanged = false;\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        this.itemsWrapper = null;\n\n        if (this.overlay) {\n            primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ZIndexUtils\"].clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : (fn && fn(index)['index']);\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ObjectUtils\"].resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ObjectUtils\"].resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option, index) {\n            return this.dataKey ? primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ObjectUtils\"].resolveFieldData(option, this.dataKey) : this.getOptionLabel(option) + '_' + index.toString();\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ObjectUtils\"].resolveFieldData(option, this.optionDisabled) : false;\n        },\n        getOptionGroupRenderKey(optionGroup) {\n            return primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ObjectUtils\"].resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupLabel(optionGroup) {\n            return primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ObjectUtils\"].resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ObjectUtils\"].resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getSelectedOption() {\n            let index = this.getSelectedOptionIndex();\n            return index !== -1 ? (this.optionGroupLabel ? this.getOptionGroupChildren(this.visibleOptions[index.group])[index.option]: this.visibleOptions[index]) : null;\n        },\n        getSelectedOptionIndex() {\n            if (this.modelValue != null && this.visibleOptions) {\n                if (this.optionGroupLabel) {\n                    for (let i = 0; i < this.visibleOptions.length; i++) {\n                        let selectedOptionIndex = this.findOptionIndexInList(this.modelValue, this.getOptionGroupChildren(this.visibleOptions[i]));\n                        if (selectedOptionIndex !== -1) {\n                            return {group: i, option: selectedOptionIndex};\n                        }\n                    }\n                }\n                else {\n                    return this.findOptionIndexInList(this.modelValue, this.visibleOptions);\n                }\n            }\n\n            return -1;\n        },\n        findOptionIndexInList(value, list) {\n            for (let i = 0; i < list.length; i++) {\n                if ((primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ObjectUtils\"].equals(value, this.getOptionValue(list[i]), this.equalityKey))) {\n                    return i;\n                }\n            }\n\n            return -1;\n        },\n        isSelected(option) {\n            return primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ObjectUtils\"].equals(this.modelValue, this.getOptionValue(option), this.equalityKey);\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n\n            isFocus && this.$refs.focusInput.focus();\n        },\n        hide() {\n            this.$emit('before-hide');\n            this.overlayVisible = false;\n        },\n        onFocus(event) {\n            this.focused = true;\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            switch(event.which) {\n                //down\n                case 40:\n                    this.onDownKey(event);\n                break;\n\n                //up\n                case 38:\n                    this.onUpKey(event);\n                break;\n\n                //space\n                case 32:\n                    if (!this.overlayVisible) {\n                        this.show();\n                        event.preventDefault();\n                    }\n                break;\n\n                //enter and escape\n                case 13:\n                case 27:\n                    if (this.overlayVisible) {\n                        this.hide();\n                        event.preventDefault();\n                    }\n                break;\n\n                //tab\n                case 9:\n                    this.hide();\n                break;\n\n                default:\n                    this.search(event);\n                break;\n            }\n        },\n        onFilterKeyDown(event) {\n            switch (event.which) {\n                //down\n                case 40:\n                    this.onDownKey(event);\n                    break;\n\n                //up\n                case 38:\n                    this.onUpKey(event);\n                    break;\n\n                //enter and escape\n                case 13:\n                case 27:\n                    this.overlayVisible = false;\n                    event.preventDefault();\n                break;\n            }\n        },\n        onDownKey(event) {\n            if (this.visibleOptions) {\n                if (!this.overlayVisible && event.altKey) {\n                    this.show();\n                }\n                else {\n                    let nextOption = this.visibleOptions && this.visibleOptions.length > 0 ? this.findNextOption(this.getSelectedOptionIndex()) : null;\n                    if (nextOption) {\n                        this.updateModel(event, this.getOptionValue(nextOption));\n                    }\n                }\n            }\n\n            event.preventDefault();\n        },\n        onUpKey(event) {\n            if (this.visibleOptions) {\n                let prevOption = this.findPrevOption(this.getSelectedOptionIndex());\n                if (prevOption) {\n                    this.updateModel(event, this.getOptionValue(prevOption));\n                }\n            }\n\n            event.preventDefault();\n        },\n        findNextOption(index) {\n            if (this.optionGroupLabel) {\n                let groupIndex = index === -1 ? 0 : index.group;\n                let optionIndex = index === -1 ? -1 : index.option;\n                let option = this.findNextOptionInList(this.getOptionGroupChildren(this.visibleOptions[groupIndex]), optionIndex);\n\n                if (option)\n                    return option;\n                else if ((groupIndex + 1) !== this.visibleOptions.length)\n                    return this.findNextOption({group: (groupIndex + 1), option: -1});\n                else\n                    return null;\n            }\n            else {\n                return this.findNextOptionInList(this.visibleOptions, index);\n            }\n        },\n        findNextOptionInList(list, index) {\n                let i = index + 1;\n                if (i === list.length) {\n                    return null;\n                }\n\n                let option = list[i];\n                if (this.isOptionDisabled(option))\n                    return this.findNextOptionInList(i);\n                else\n                    return option;\n        },\n        findPrevOption(index) {\n            if (index === -1) {\n                return null;\n            }\n\n            if (this.optionGroupLabel) {\n                let groupIndex = index.group;\n                let optionIndex = index.option;\n                let option = this.findPrevOptionInList(this.getOptionGroupChildren(this.visibleOptions[groupIndex]), optionIndex);\n\n                if (option)\n                    return option;\n                else if (groupIndex > 0)\n                    return this.findPrevOption({group: (groupIndex - 1), option: this.getOptionGroupChildren(this.visibleOptions[groupIndex - 1]).length});\n                else\n                    return null;\n            }\n            else {\n                return this.findPrevOptionInList(this.visibleOptions, index);\n            }\n        },\n        findPrevOptionInList(list, index) {\n            let i = index - 1;\n            if (i < 0) {\n                return null;\n            }\n\n            let option = list[i];\n            if (this.isOptionDisabled(option))\n                return this.findPrevOption(i);\n            else\n                return option;\n        },\n        onClearClick(event) {\n            this.updateModel(event, null);\n        },\n        onClick(event) {\n            if (this.disabled || this.loading) {\n                return;\n            }\n\n            if (primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"DomHandler\"].hasClass(event.target, 'p-dropdown-clear-icon') || event.target.tagName === 'INPUT') {\n                return;\n            }\n            else if (!this.overlay || !this.overlay.contains(event.target)) {\n                if (this.overlayVisible)\n                    this.hide();\n                else\n                    this.show();\n\n                this.$refs.focusInput.focus();\n            }\n        },\n        onOptionSelect(event, option) {\n            let value = this.getOptionValue(option);\n            this.updateModel(event, value);\n            this.$refs.focusInput.focus();\n\n            setTimeout(() => {\n                this.hide();\n            }, 200);\n        },\n        onEditableInput(event) {\n            this.$emit('update:modelValue', event.target.value);\n        },\n        onOverlayEnter(el) {\n            primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ZIndexUtils\"].set('overlay', el, this.$primevue.config.zIndex.overlay);\n            this.alignOverlay();\n            this.scrollValueInView();\n\n            if (!this.virtualScrollerDisabled) {\n                const selectedIndex = this.getSelectedOptionIndex();\n                if (selectedIndex !== -1) {\n                    setTimeout(() => {\n                        this.virtualScroller && this.virtualScroller.scrollToIndex(selectedIndex);\n                    }, 0);\n                }\n            }\n        },\n        onOverlayAfterEnter() {\n            if (this.filter) {\n                this.$refs.filterInput.focus();\n            }\n\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n            this.$emit('hide');\n            this.itemsWrapper = null;\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ZIndexUtils\"].clear(el);\n        },\n        alignOverlay() {\n            if (this.appendTo === 'self') {\n                primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"DomHandler\"].relativePosition(this.overlay, this.$el);\n            }\n            else {\n                this.overlay.style.minWidth = primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"DomHandler\"].getOuterWidth(this.$el) + 'px';\n                primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"DomHandler\"].absolutePosition(this.overlay, this.$el);\n            }\n        },\n        updateModel(event, value) {\n            this.$emit('update:modelValue', value);\n            this.$emit('change', {originalEvent: event, value: value});\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.overlay && !this.$el.contains(event.target) && !this.overlay.contains(event.target)) {\n                        this.hide();\n                    }\n                };\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"ConnectedOverlayScrollHandler\"](this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"DomHandler\"].isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        search(event) {\n            if (!this.visibleOptions) {\n                return;\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            const char = event.key;\n            this.previousSearchChar = this.currentSearchChar;\n            this.currentSearchChar = char;\n\n            if (this.previousSearchChar === this.currentSearchChar)\n                this.searchValue = this.currentSearchChar;\n            else\n                this.searchValue = this.searchValue ? this.searchValue + char : char;\n\n            if (this.searchValue) {\n                let searchIndex = this.getSelectedOptionIndex();\n                let newOption = this.optionGroupLabel ? this.searchOptionInGroup(searchIndex) : this.searchOption(++searchIndex);\n                if (newOption) {\n                    this.updateModel(event, this.getOptionValue(newOption));\n                }\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = null;\n            }, 250);\n        },\n        searchOption(index) {\n            let option;\n\n            if (this.searchValue) {\n                option = this.searchOptionInRange(index, this.visibleOptions.length);\n\n                if (!option) {\n                    option = this.searchOptionInRange(0, index);\n                }\n            }\n\n            return option;\n        },\n        searchOptionInRange(start, end) {\n            for (let i = start; i < end; i++) {\n                let opt = this.visibleOptions[i];\n                if (this.matchesSearchValue(opt)) {\n                    return opt;\n                }\n            }\n\n            return null;\n        },\n        searchOptionInGroup(index) {\n            let searchIndex = index === -1 ? {group: 0, option: -1} : index;\n\n            for (let i = searchIndex.group; i < this.visibleOptions.length; i++) {\n                let groupOptions = this.getOptionGroupChildren(this.visibleOptions[i]);\n                for (let j = (searchIndex.group === i ? searchIndex.option + 1 : 0); j < groupOptions.length; j++) {\n                    if (this.matchesSearchValue(groupOptions[j])) {\n                        return groupOptions[j];\n                    }\n                }\n            }\n\n            for (let i = 0; i <= searchIndex.group; i++) {\n                let groupOptions = this.getOptionGroupChildren(this.visibleOptions[i]);\n                for (let j = 0; j < (searchIndex.group === i ? searchIndex.option: groupOptions.length); j++) {\n                    if (this.matchesSearchValue(groupOptions[j])) {\n                        return groupOptions[j];\n                    }\n                }\n            }\n\n            return null;\n        },\n        matchesSearchValue(option) {\n            let label = this.getOptionLabel(option).toLocaleLowerCase(this.filterLocale);\n            return label.startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));\n        },\n        onFilterChange(event) {\n            this.filterValue = event.target.value;\n            this.$emit('filter', {originalEvent: event, value: event.target.value});\n        },\n        onFilterUpdated() {\n            if (this.overlayVisible) {\n                this.alignOverlay();\n            }\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        itemsWrapperRef(el) {\n            this.itemsWrapper = el;\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        },\n        scrollValueInView() {\n            if (this.overlay) {\n                let selectedItem = primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"DomHandler\"].findSingle(this.overlay, 'li.p-highlight');\n                if (selectedItem) {\n                    selectedItem.scrollIntoView({ block: 'nearest', inline: 'start' });\n                }\n            }\n        },\n        onOverlayClick(event) {\n            primevue_overlayeventbus__WEBPACK_IMPORTED_MODULE_1__[\"default\"].emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        }\n    },\n    computed: {\n        visibleOptions() {\n            if (this.filterValue) {\n                if (this.optionGroupLabel) {\n                    let filteredGroups = [];\n                    for (let optgroup of this.options) {\n                        let filteredSubOptions = primevue_api__WEBPACK_IMPORTED_MODULE_2__[\"FilterService\"].filter(this.getOptionGroupChildren(optgroup), this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n                        if (filteredSubOptions && filteredSubOptions.length) {\n                            let filteredGroup = {...optgroup};\n                            filteredGroup[this.optionGroupChildren] = filteredSubOptions;\n                            filteredGroups.push(filteredGroup);\n                        }\n                    }\n                    return filteredGroups\n                }\n                else {\n                    return primevue_api__WEBPACK_IMPORTED_MODULE_2__[\"FilterService\"].filter(this.options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n                }\n            }\n            else {\n                return this.options;\n            }\n        },\n        containerClass() {\n            return [\n                'p-dropdown p-component p-inputwrapper',\n                {\n                    'p-disabled': this.disabled,\n                    'p-dropdown-clearable': this.showClear && !this.disabled,\n                    'p-focus': this.focused,\n                    'p-inputwrapper-filled': this.modelValue,\n                    'p-inputwrapper-focus': this.focused || this.overlayVisible\n                }\n            ];\n        },\n        labelClass() {\n            return [\n                'p-dropdown-label p-inputtext',\n                {\n                    'p-placeholder': this.label === this.placeholder,\n                    'p-dropdown-label-empty': !this.$slots['value'] && (this.label === 'p-emptylabel' || this.label.length === 0)\n                }\n            ];\n        },\n        panelStyleClass() {\n            return ['p-dropdown-panel p-component', this.panelClass, {\n                'p-input-filled': this.$primevue.config.inputStyle === 'filled',\n                'p-ripple-disabled': this.$primevue.config.ripple === false\n            }];\n        },\n        label() {\n            let selectedOption = this.getSelectedOption();\n            if (selectedOption !== null)\n                return this.getOptionLabel(selectedOption);\n            else\n                return this.placeholder||'p-emptylabel';\n        },\n        editableInputValue() {\n            let selectedOption = this.getSelectedOption();\n            if (selectedOption)\n                return this.getOptionLabel(selectedOption);\n            else\n                return this.modelValue;\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        searchFields() {\n            return this.filterFields || [this.optionLabel];\n        },\n        emptyFilterMessageText() {\n            return this.emptyFilterMessage || this.$primevue.config.locale.emptyFilterMessage;\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        dropdownIconClass() {\n            return ['p-dropdown-trigger-icon', this.loading ? this.loadingIcon : 'pi pi-chevron-down'];\n        }\n    },\n    directives: {\n        'ripple': primevue_ripple__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n    },\n    components: {\n        'VirtualScroller': primevue_virtualscroller__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n        'Portal': primevue_portal__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n    }\n};\n\nconst _hoisted_1 = { class: \"p-hidden-accessible\" };\nconst _hoisted_2 = [\"id\", \"disabled\", \"tabindex\", \"aria-expanded\", \"aria-labelledby\"];\nconst _hoisted_3 = [\"disabled\", \"placeholder\", \"value\", \"aria-expanded\"];\nconst _hoisted_4 = [\"aria-expanded\"];\nconst _hoisted_5 = {\n  key: 0,\n  class: \"p-dropdown-header\"\n};\nconst _hoisted_6 = { class: \"p-dropdown-filter-container\" };\nconst _hoisted_7 = [\"value\", \"placeholder\"];\nconst _hoisted_8 = /*#__PURE__*/Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementVNode\"])(\"span\", { class: \"p-dropdown-filter-icon pi pi-search\" }, null, -1);\nconst _hoisted_9 = [\"onClick\", \"aria-label\", \"aria-selected\"];\nconst _hoisted_10 = { class: \"p-dropdown-item-group\" };\nconst _hoisted_11 = [\"onClick\", \"aria-label\", \"aria-selected\"];\nconst _hoisted_12 = {\n  key: 2,\n  class: \"p-dropdown-empty-message\"\n};\nconst _hoisted_13 = {\n  key: 3,\n  class: \"p-dropdown-empty-message\"\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_VirtualScroller = Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"resolveComponent\"])(\"VirtualScroller\");\n  const _component_Portal = Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"resolveComponent\"])(\"Portal\");\n  const _directive_ripple = Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"resolveDirective\"])(\"ripple\");\n\n  return (Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(\"div\", {\n    ref: \"container\",\n    class: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"normalizeClass\"])($options.containerClass),\n    onClick: _cache[11] || (_cache[11] = $event => ($options.onClick($event)))\n  }, [\n    Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementVNode\"])(\"div\", _hoisted_1, [\n      Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementVNode\"])(\"input\", {\n        ref: \"focusInput\",\n        type: \"text\",\n        id: $props.inputId,\n        readonly: \"\",\n        disabled: $props.disabled,\n        onFocus: _cache[0] || (_cache[0] = (...args) => ($options.onFocus && $options.onFocus(...args))),\n        onBlur: _cache[1] || (_cache[1] = (...args) => ($options.onBlur && $options.onBlur(...args))),\n        onKeydown: _cache[2] || (_cache[2] = (...args) => ($options.onKeyDown && $options.onKeyDown(...args))),\n        tabindex: $props.tabindex,\n        \"aria-haspopup\": \"true\",\n        \"aria-expanded\": $data.overlayVisible,\n        \"aria-labelledby\": $props.ariaLabelledBy\n      }, null, 40, _hoisted_2)\n    ]),\n    ($props.editable)\n      ? (Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(\"input\", {\n          key: 0,\n          type: \"text\",\n          class: \"p-dropdown-label p-inputtext\",\n          disabled: $props.disabled,\n          onFocus: _cache[3] || (_cache[3] = (...args) => ($options.onFocus && $options.onFocus(...args))),\n          onBlur: _cache[4] || (_cache[4] = (...args) => ($options.onBlur && $options.onBlur(...args))),\n          placeholder: $props.placeholder,\n          value: $options.editableInputValue,\n          onInput: _cache[5] || (_cache[5] = (...args) => ($options.onEditableInput && $options.onEditableInput(...args))),\n          \"aria-haspopup\": \"listbox\",\n          \"aria-expanded\": $data.overlayVisible\n        }, null, 40, _hoisted_3))\n      : Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createCommentVNode\"])(\"\", true),\n    (!$props.editable)\n      ? (Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(\"span\", {\n          key: 1,\n          class: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"normalizeClass\"])($options.labelClass)\n        }, [\n          Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderSlot\"])(_ctx.$slots, \"value\", {\n            value: $props.modelValue,\n            placeholder: $props.placeholder\n          }, () => [\n            Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createTextVNode\"])(Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"toDisplayString\"])($options.label||'empty'), 1)\n          ])\n        ], 2))\n      : Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createCommentVNode\"])(\"\", true),\n    ($props.showClear && $props.modelValue != null)\n      ? (Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(\"i\", {\n          key: 2,\n          class: \"p-dropdown-clear-icon pi pi-times\",\n          onClick: _cache[6] || (_cache[6] = $event => ($options.onClearClick($event)))\n        }))\n      : Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createCommentVNode\"])(\"\", true),\n    Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementVNode\"])(\"div\", {\n      class: \"p-dropdown-trigger\",\n      role: \"button\",\n      \"aria-haspopup\": \"listbox\",\n      \"aria-expanded\": $data.overlayVisible\n    }, [\n      Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderSlot\"])(_ctx.$slots, \"indicator\", {}, () => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementVNode\"])(\"span\", {\n          class: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"normalizeClass\"])($options.dropdownIconClass)\n        }, null, 2)\n      ])\n    ], 8, _hoisted_4),\n    Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createVNode\"])(_component_Portal, { appendTo: $props.appendTo }, {\n      default: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"withCtx\"])(() => [\n        Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createVNode\"])(vue__WEBPACK_IMPORTED_MODULE_6__[\"Transition\"], {\n          name: \"p-connected-overlay\",\n          onEnter: $options.onOverlayEnter,\n          onAfterEnter: $options.onOverlayAfterEnter,\n          onLeave: $options.onOverlayLeave,\n          onAfterLeave: $options.onOverlayAfterLeave\n        }, {\n          default: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"withCtx\"])(() => [\n            ($data.overlayVisible)\n              ? (Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(\"div\", {\n                  key: 0,\n                  ref: $options.overlayRef,\n                  class: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"normalizeClass\"])($options.panelStyleClass),\n                  onClick: _cache[10] || (_cache[10] = (...args) => ($options.onOverlayClick && $options.onOverlayClick(...args)))\n                }, [\n                  Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderSlot\"])(_ctx.$slots, \"header\", {\n                    value: $props.modelValue,\n                    options: $options.visibleOptions\n                  }),\n                  ($props.filter)\n                    ? (Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(\"div\", _hoisted_5, [\n                        Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementVNode\"])(\"div\", _hoisted_6, [\n                          Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementVNode\"])(\"input\", {\n                            type: \"text\",\n                            ref: \"filterInput\",\n                            value: $data.filterValue,\n                            onVnodeUpdated: _cache[7] || (_cache[7] = (...args) => ($options.onFilterUpdated && $options.onFilterUpdated(...args))),\n                            autoComplete: \"off\",\n                            class: \"p-dropdown-filter p-inputtext p-component\",\n                            placeholder: $props.filterPlaceholder,\n                            onKeydown: _cache[8] || (_cache[8] = (...args) => ($options.onFilterKeyDown && $options.onFilterKeyDown(...args))),\n                            onInput: _cache[9] || (_cache[9] = (...args) => ($options.onFilterChange && $options.onFilterChange(...args)))\n                          }, null, 40, _hoisted_7),\n                          _hoisted_8\n                        ])\n                      ]))\n                    : Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createCommentVNode\"])(\"\", true),\n                  Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementVNode\"])(\"div\", {\n                    ref: $options.itemsWrapperRef,\n                    class: \"p-dropdown-items-wrapper\",\n                    style: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"normalizeStyle\"])({'max-height': $options.virtualScrollerDisabled ? $props.scrollHeight : ''})\n                  }, [\n                    Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createVNode\"])(_component_VirtualScroller, Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"mergeProps\"])({ ref: $options.virtualScrollerRef }, $props.virtualScrollerOptions, {\n                      items: $options.visibleOptions,\n                      style: {'height': $props.scrollHeight},\n                      disabled: $options.virtualScrollerDisabled\n                    }), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createSlots\"])({\n                      content: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"withCtx\"])(({ styleClass, contentRef, items, getItemOptions, contentStyle }) => [\n                        Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementVNode\"])(\"ul\", {\n                          ref: contentRef,\n                          class: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"normalizeClass\"])(['p-dropdown-items', styleClass]),\n                          style: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"normalizeStyle\"])(contentStyle),\n                          role: \"listbox\"\n                        }, [\n                          (!$props.optionGroupLabel)\n                            ? (Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(true), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(vue__WEBPACK_IMPORTED_MODULE_6__[\"Fragment\"], { key: 0 }, Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderList\"])(items, (option, i) => {\n                                return Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"withDirectives\"])((Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(\"li\", {\n                                  class: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"normalizeClass\"])(['p-dropdown-item', {'p-highlight': $options.isSelected(option), 'p-disabled': $options.isOptionDisabled(option)}]),\n                                  key: $options.getOptionRenderKey(option, i),\n                                  onClick: $event => ($options.onOptionSelect($event, option)),\n                                  role: \"option\",\n                                  \"aria-label\": $options.getOptionLabel(option),\n                                  \"aria-selected\": $options.isSelected(option)\n                                }, [\n                                  Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderSlot\"])(_ctx.$slots, \"option\", {\n                                    option: option,\n                                    index: $options.getOptionIndex(i, getItemOptions)\n                                  }, () => [\n                                    Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createTextVNode\"])(Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"toDisplayString\"])($options.getOptionLabel(option)), 1)\n                                  ])\n                                ], 10, _hoisted_9)), [\n                                  [_directive_ripple]\n                                ])\n                              }), 128))\n                            : (Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(true), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(vue__WEBPACK_IMPORTED_MODULE_6__[\"Fragment\"], { key: 1 }, Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderList\"])(items, (optionGroup, i) => {\n                                return (Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(vue__WEBPACK_IMPORTED_MODULE_6__[\"Fragment\"], {\n                                  key: $options.getOptionGroupRenderKey(optionGroup)\n                                }, [\n                                  Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementVNode\"])(\"li\", _hoisted_10, [\n                                    Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderSlot\"])(_ctx.$slots, \"optiongroup\", {\n                                      option: optionGroup,\n                                      index: $options.getOptionIndex(i, getItemOptions)\n                                    }, () => [\n                                      Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createTextVNode\"])(Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"toDisplayString\"])($options.getOptionGroupLabel(optionGroup)), 1)\n                                    ])\n                                  ]),\n                                  (Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(true), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(vue__WEBPACK_IMPORTED_MODULE_6__[\"Fragment\"], null, Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderList\"])($options.getOptionGroupChildren(optionGroup), (option, i) => {\n                                    return Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"withDirectives\"])((Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(\"li\", {\n                                      class: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"normalizeClass\"])(['p-dropdown-item', {'p-highlight': $options.isSelected(option), 'p-disabled': $options.isOptionDisabled(option)}]),\n                                      key: $options.getOptionRenderKey(option, i),\n                                      onClick: $event => ($options.onOptionSelect($event, option)),\n                                      role: \"option\",\n                                      \"aria-label\": $options.getOptionLabel(option),\n                                      \"aria-selected\": $options.isSelected(option)\n                                    }, [\n                                      Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderSlot\"])(_ctx.$slots, \"option\", {\n                                        option: option,\n                                        index: $options.getOptionIndex(i, getItemOptions)\n                                      }, () => [\n                                        Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createTextVNode\"])(Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"toDisplayString\"])($options.getOptionLabel(option)), 1)\n                                      ])\n                                    ], 10, _hoisted_11)), [\n                                      [_directive_ripple]\n                                    ])\n                                  }), 128))\n                                ], 64))\n                              }), 128)),\n                          ($data.filterValue && (!items || (items && items.length === 0)))\n                            ? (Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(\"li\", _hoisted_12, [\n                                Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderSlot\"])(_ctx.$slots, \"emptyfilter\", {}, () => [\n                                  Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createTextVNode\"])(Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"toDisplayString\"])($options.emptyFilterMessageText), 1)\n                                ])\n                              ]))\n                            : ((!$props.options || ($props.options && $props.options.length === 0)))\n                              ? (Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createElementBlock\"])(\"li\", _hoisted_13, [\n                                  Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderSlot\"])(_ctx.$slots, \"empty\", {}, () => [\n                                    Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createTextVNode\"])(Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"toDisplayString\"])($options.emptyMessageText), 1)\n                                  ])\n                                ]))\n                              : Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createCommentVNode\"])(\"\", true)\n                        ], 6)\n                      ]),\n                      _: 2\n                    }, [\n                      (_ctx.$slots.loader)\n                        ? {\n                            name: \"loader\",\n                            fn: Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"withCtx\"])(({ options }) => [\n                              Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderSlot\"])(_ctx.$slots, \"loader\", { options: options })\n                            ])\n                          }\n                        : undefined\n                    ]), 1040, [\"items\", \"style\", \"disabled\"])\n                  ], 4),\n                  Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"renderSlot\"])(_ctx.$slots, \"footer\", {\n                    value: $props.modelValue,\n                    options: $options.visibleOptions\n                  })\n                ], 2))\n              : Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"createCommentVNode\"])(\"\", true)\n          ]),\n          _: 3\n        }, 8, [\"onEnter\", \"onAfterEnter\", \"onLeave\", \"onAfterLeave\"])\n      ]),\n      _: 3\n    }, 8, [\"appendTo\"])\n  ], 2))\n}\n\nfunction styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \"\\n.p-dropdown {\\n    display: -webkit-inline-box;\\n    display: -ms-inline-flexbox;\\n    display: inline-flex;\\n    cursor: pointer;\\n    position: relative;\\n    -webkit-user-select: none;\\n       -moz-user-select: none;\\n        -ms-user-select: none;\\n            user-select: none;\\n}\\n.p-dropdown-clear-icon {\\n    position: absolute;\\n    top: 50%;\\n    margin-top: -.5rem;\\n}\\n.p-dropdown-trigger {\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-align: center;\\n        -ms-flex-align: center;\\n            align-items: center;\\n    -webkit-box-pack: center;\\n        -ms-flex-pack: center;\\n            justify-content: center;\\n    -ms-flex-negative: 0;\\n        flex-shrink: 0;\\n}\\n.p-dropdown-label {\\n    display: block;\\n    white-space: nowrap;\\n    overflow: hidden;\\n    -webkit-box-flex: 1;\\n        -ms-flex: 1 1 auto;\\n            flex: 1 1 auto;\\n    width: 1%;\\n    text-overflow: ellipsis;\\n    cursor: pointer;\\n}\\n.p-dropdown-label-empty {\\n    overflow: hidden;\\n    visibility: hidden;\\n}\\ninput.p-dropdown-label  {\\n    cursor: default;\\n}\\n.p-dropdown .p-dropdown-panel {\\n    min-width: 100%;\\n}\\n.p-dropdown-panel {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n}\\n.p-dropdown-items-wrapper {\\n    overflow: auto;\\n}\\n.p-dropdown-item {\\n    cursor: pointer;\\n    font-weight: normal;\\n    white-space: nowrap;\\n    position: relative;\\n    overflow: hidden;\\n}\\n.p-dropdown-item-group {\\n    cursor: auto;\\n}\\n.p-dropdown-items {\\n    margin: 0;\\n    padding: 0;\\n    list-style-type: none;\\n}\\n.p-dropdown-filter {\\n    width: 100%;\\n}\\n.p-dropdown-filter-container {\\n    position: relative;\\n}\\n.p-dropdown-filter-icon {\\n    position: absolute;\\n    top: 50%;\\n    margin-top: -.5rem;\\n}\\n.p-fluid .p-dropdown {\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n}\\n.p-fluid .p-dropdown .p-dropdown-label {\\n    width: 1%;\\n}\\n\";\nstyleInject(css_248z);\n\nscript.render = render;\n\n\n\n\n//# sourceURL=webpack:///./node_modules/primevue/dropdown/dropdown.esm.js?");

/***/ }),

/***/ "./node_modules/primevue/overlayeventbus/overlayeventbus.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/primevue/overlayeventbus/overlayeventbus.esm.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return OverlayEventBus; });\n/* harmony import */ var primevue_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! primevue/utils */ \"./node_modules/primevue/utils/utils.esm.js\");\n\n\nvar OverlayEventBus = Object(primevue_utils__WEBPACK_IMPORTED_MODULE_0__[\"EventBus\"])();\n\n\n\n\n//# sourceURL=webpack:///./node_modules/primevue/overlayeventbus/overlayeventbus.esm.js?");

/***/ }),

/***/ "./node_modules/primevue/virtualscroller/virtualscroller.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/primevue/virtualscroller/virtualscroller.esm.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return script; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n\nvar script = {\n    name: 'VirtualScroller',\n    emits: ['update:numToleratedItems', 'scroll', 'scroll-index-change', 'lazy-load'],\n    props: {\n        id: {\n            type: String,\n            default: null\n        },\n        style: null,\n        class: null,\n        items: {\n            type: Array,\n            default: null\n        },\n        itemSize: {\n            type: [Number,Array],\n            default: 0\n        },\n        scrollHeight: null,\n        scrollWidth: null,\n        orientation: {\n            type: String,\n            default: 'vertical'\n        },\n        numToleratedItems: {\n            type: Number,\n            default: null\n        },\n        delay: {\n            type: Number,\n            default: 0\n        },\n        lazy: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        loaderDisabled: {\n            type: Boolean,\n            default: false\n        },\n        columns: {\n            type: Array,\n            default: null\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        showSpacer: {\n            type: Boolean,\n            default: true\n        },\n        showLoader: {\n            type: Boolean,\n            default: false\n        }\n    },\n    data() {\n        return {\n            first: this.isBoth() ? { rows: 0, cols: 0 } : 0,\n            last: this.isBoth() ? { rows: 0, cols: 0 } : 0,\n            numItemsInViewport: this.isBoth() ? { rows: 0, cols: 0 } : 0,\n            lastScrollPos: this.isBoth() ? { top: 0, left: 0 } : 0,\n            d_numToleratedItems: this.numToleratedItems,\n            d_loading: this.loading,\n            loaderArr: [],\n            spacerStyle: {},\n            contentStyle: {}\n        }\n    },\n    element: null,\n    content: null,\n    lastScrollPos: null,\n    scrollTimeout: null,\n    mounted() {\n        this.init();\n\n        this.lastScrollPos = this.isBoth() ? { top: 0, left: 0 } : 0;\n    },\n    watch: {\n        numToleratedItems(newValue) {\n            this.d_numToleratedItems = newValue;\n        },\n        loading(newValue) {\n            this.d_loading = newValue;\n        },\n        items(newValue, oldValue) {\n            if (!oldValue || oldValue.length !== (newValue || []).length) {\n                this.init();\n            }\n        },\n        orientation() {\n            this.lastScrollPos = this.isBoth() ? { top: 0, left: 0 } : 0;\n        }\n    },\n    methods: {\n        init() {\n            this.setSize();\n            this.calculateOptions();\n            this.setSpacerSize();\n        },\n        isVertical() {\n            return this.orientation === 'vertical';\n        },\n        isHorizontal() {\n            return this.orientation === 'horizontal';\n        },\n        isBoth() {\n            return this.orientation === 'both';\n        },\n        scrollTo(options) {\n            this.element && this.element.scrollTo(options);\n        },\n        scrollToIndex(index, behavior = 'auto') {\n            const both = this.isBoth();\n            const horizontal = this.isHorizontal();\n            const first = this.first;\n            const { numToleratedItems } = this.calculateNumItems();\n            const itemSize = this.itemSize;\n            const contentPos = this.getContentPosition();\n            const calculateFirst = (_index = 0, _numT) => (_index <= _numT ? 0 : _index);\n            const calculateCoord = (_first, _size, _cpos) => (_first * _size) + _cpos;\n            const scrollTo = (left = 0, top = 0) => this.scrollTo({ left, top, behavior });\n\n            if (both) {\n                const newFirst = { rows: calculateFirst(index[0], numToleratedItems[0]), cols: calculateFirst(index[1], numToleratedItems[1]) };\n                if (newFirst.rows !== first.rows || newFirst.cols !== first.cols) {\n                    scrollTo(calculateCoord(newFirst.cols, itemSize[1], contentPos.left), calculateCoord(newFirst.rows, itemSize[0], contentPos.top));\n                    this.first = newFirst;\n                }\n            }\n            else {\n                const newFirst = calculateFirst(index, numToleratedItems);\n\n                if (newFirst !== first) {\n                    horizontal ? scrollTo(calculateCoord(newFirst, itemSize, contentPos.left), 0) : scrollTo(0, calculateCoord(newFirst, itemSize, contentPos.top));\n                    this.first = newFirst;\n                }\n            }\n        },\n        scrollInView(index, to, behavior = 'auto') {\n            if (to) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const { first, viewport } = this.getRenderedRange();\n                const scrollTo = (left = 0, top = 0) => this.scrollTo({ left, top, behavior });\n                const isToStart = to === 'to-start';\n                const isToEnd = to === 'to-end';\n\n                if (isToStart) {\n                    if (both) {\n                        if (viewport.first.rows - first.rows > index[0]) {\n                            scrollTo(viewport.first.cols * this.itemSize[1], (viewport.first.rows - 1) * this.itemSize[0]);\n                        }\n                        else if (viewport.first.cols - first.cols > index[1]) {\n                            scrollTo((viewport.first.cols - 1) * this.itemSize[1], viewport.first.rows * this.itemSize[0]);\n                        }\n                    }\n                    else {\n                        if (viewport.first - first > index) {\n                            const pos = (viewport.first - 1) * this.itemSize;\n                            horizontal ? scrollTo(pos, 0) : scrollTo(0, pos);\n                        }\n                    }\n                }\n                else if (isToEnd) {\n                    if (both) {\n                        if (viewport.last.rows - first.rows <= index[0] + 1) {\n                            scrollTo(viewport.first.cols * this.itemSize[1], (viewport.first.rows + 1) * this.itemSize[0]);\n                        }\n                        else if (viewport.last.cols - first.cols <= index[1] + 1) {\n                            scrollTo((viewport.first.cols + 1) * this.itemSize[1], viewport.first.rows * this.itemSize[0]);\n                        }\n                    }\n                    else {\n                        if (viewport.last - first <= index + 1) {\n                            const pos = (viewport.first + 1) * this.itemSize;\n                            horizontal ? scrollTo(pos, 0) : scrollTo(0, pos);\n                        }\n                    }\n                }\n            }\n            else {\n                this.scrollToIndex(index, behavior);\n            }\n        },\n        getRenderedRange() {\n            const calculateFirstInViewport = (_pos, _size) => Math.floor(_pos / (_size || _pos));\n\n            let firstInViewport = this.first;\n            let lastInViewport = 0;\n\n            if (this.element) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const scrollTop = this.element.scrollTop;\n                const scrollLeft = this.element.scrollLeft;\n\n                if (both) {\n                    firstInViewport = { rows: calculateFirstInViewport(scrollTop, this.itemSize[0]), cols: calculateFirstInViewport(scrollLeft, this.itemSize[1]) };\n                    lastInViewport = { rows: firstInViewport.rows + this.numItemsInViewport.rows, cols: firstInViewport.cols + this.numItemsInViewport.cols };\n                }\n                else {\n                    const scrollPos = horizontal ? scrollLeft : scrollTop;\n                    firstInViewport = calculateFirstInViewport(scrollPos, this.itemSize);\n                    lastInViewport = firstInViewport + this.numItemsInViewport;\n                }\n            }\n\n            return {\n                first: this.first,\n                last: this.last,\n                viewport: {\n                    first: firstInViewport,\n                    last: lastInViewport\n                }\n            };\n        },\n        calculateNumItems() {\n            const both = this.isBoth();\n            const horizontal = this.isHorizontal();\n            const itemSize = this.itemSize;\n            const contentPos = this.getContentPosition();\n            const contentWidth = this.element ? this.element.offsetWidth - contentPos.left : 0;\n            const contentHeight = this.element ? this.element.offsetHeight - contentPos.top : 0;\n            const calculateNumItemsInViewport = (_contentSize, _itemSize) => Math.ceil(_contentSize / (_itemSize || _contentSize));\n            const calculateNumToleratedItems = (_numItems) => Math.ceil(_numItems / 2);\n            const numItemsInViewport = both ?\n                { rows: calculateNumItemsInViewport(contentHeight, itemSize[0]), cols: calculateNumItemsInViewport(contentWidth, itemSize[1]) } :\n                calculateNumItemsInViewport((horizontal ? contentWidth : contentHeight), itemSize);\n\n            const numToleratedItems = this.d_numToleratedItems || (both ?\n                [calculateNumToleratedItems(numItemsInViewport.rows), calculateNumToleratedItems(numItemsInViewport.cols)] :\n                calculateNumToleratedItems(numItemsInViewport));\n\n            return { numItemsInViewport, numToleratedItems };\n        },\n        calculateOptions() {\n            const both = this.isBoth();\n            const first = this.first;\n            const { numItemsInViewport, numToleratedItems } = this.calculateNumItems();\n            const calculateLast = (_first, _num, _numT, _isCols) => this.getLast(_first + _num + ((_first < _numT ? 2 : 3) * _numT), _isCols);\n            const last = both ?\n                { rows: calculateLast(first.rows, numItemsInViewport.rows, numToleratedItems[0]), cols: calculateLast(first.cols, numItemsInViewport.cols, numToleratedItems[1], true) } :\n                calculateLast(first, numItemsInViewport, numToleratedItems);\n\n            this.last = last;\n            this.numItemsInViewport = numItemsInViewport;\n            this.d_numToleratedItems = numToleratedItems;\n            this.$emit('update:numToleratedItems', this.d_numToleratedItems);\n\n            if (this.showLoader) {\n                this.loaderArr = both ?\n                    Array.from({ length: numItemsInViewport.rows }).map(() => Array.from({ length: numItemsInViewport.cols })) :\n                    Array.from({ length: numItemsInViewport });\n            }\n\n            if (this.lazy) {\n                this.$emit('lazy-load', { first, last });\n            }\n        },\n        getLast(last = 0, isCols) {\n            if (this.items) {\n                return Math.min((isCols ? (this.columns || this.items[0]).length : this.items.length), last);\n            }\n\n            return 0;\n        },\n        getContentPosition() {\n            if (this.content) {\n                const style = getComputedStyle(this.content);\n                const left = parseInt(style.paddingLeft, 10) + Math.max(parseInt(style.left, 10), 0);\n                const right = parseInt(style.paddingRight, 10) + Math.max(parseInt(style.right, 10), 0);\n                const top = parseInt(style.paddingTop, 10) + Math.max(parseInt(style.top, 10), 0);\n                const bottom = parseInt(style.paddingBottom, 10) + Math.max(parseInt(style.bottom, 10), 0);\n\n                return { left, right, top, bottom, x: left + right, y: top + bottom };\n            }\n\n            return { left: 0, right: 0, top: 0, bottom: 0, x: 0, y: 0 };\n        },\n        setSize() {\n            if (this.element) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const parentElement = this.element.parentElement;\n                const width = this.scrollWidth || `${(this.element.offsetWidth || parentElement.offsetWidth)}px`;\n                const height = this.scrollHeight || `${(this.element.offsetHeight || parentElement.offsetHeight)}px`;\n                const setProp = (_name, _value) => this.element.style[_name] = _value;\n\n                if (both || horizontal) {\n                    setProp('height', height);\n                    setProp('width', width);\n                }\n                else {\n                    setProp('height', height);\n                }\n            }\n        },\n        setSpacerSize() {\n            const items = this.items;\n\n            if (items) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const contentPos = this.getContentPosition();\n                const setProp = (_name, _value, _size, _cpos = 0) => this.spacerStyle = { ...this.spacerStyle, ...{ [`${_name}`]: (((_value || []).length * _size) + _cpos) + 'px' } };\n\n                if (both) {\n                    setProp('height', items, this.itemSize[0], contentPos.y);\n                    setProp('width', (this.columns || items[1]), this.itemSize[1], contentPos.x);\n                }\n                else {\n                    horizontal ? setProp('width', (this.columns || items), this.itemSize, contentPos.x) : setProp('height', items, this.itemSize, contentPos.y);\n                }\n            }\n        },\n        setContentPosition(pos) {\n            if (this.content) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const first = pos ? pos.first : this.first;\n                const calculateTranslateVal = (_first, _size) => (_first * _size);\n                const setTransform = (_x = 0, _y = 0) => {\n                    this.contentStyle = { ...this.contentStyle, ...{ transform: `translate3d(${_x}px, ${_y}px, 0)` } };\n                };\n\n                if (both) {\n                    setTransform(calculateTranslateVal(first.cols, this.itemSize[1]), calculateTranslateVal(first.rows, this.itemSize[0]));\n                }\n                else {\n                    const translateVal = calculateTranslateVal(first, this.itemSize);\n                    horizontal ? setTransform(translateVal, 0) : setTransform(0, translateVal);\n                }\n            }\n        },\n        onScrollPositionChange(event) {\n            const target = event.target;\n            const both = this.isBoth();\n            const horizontal = this.isHorizontal();\n            const contentPos = this.getContentPosition();\n            const calculateScrollPos = (_pos, _cpos) => _pos ? (_pos > _cpos ? _pos - _cpos : _pos) : 0;\n            const calculateCurrentIndex = (_pos, _size) => Math.floor(_pos / (_size || _pos));\n            const calculateTriggerIndex = (_currentIndex, _first, _last, _num, _numT, _isScrollDownOrRight) => {\n                return (_currentIndex <= _numT ? _numT : (_isScrollDownOrRight ? (_last - _num - _numT) : (_first + _numT - 1)))\n            };\n            const calculateFirst = (_currentIndex, _triggerIndex, _first, _last, _num, _numT, _isScrollDownOrRight) => {\n                if (_currentIndex <= _numT)\n                    return 0;\n                else\n                    return Math.max(0, _isScrollDownOrRight ?\n                            (_currentIndex < _triggerIndex ? _first : _currentIndex - _numT) :\n                            (_currentIndex > _triggerIndex ? _first : _currentIndex - (2 * _numT)));\n            };\n            const calculateLast = (_currentIndex, _first, _last, _num, _numT, _isCols) => {\n                let lastValue = _first + _num + (2 * _numT);\n\n                if (_currentIndex >= _numT) {\n                    lastValue += (_numT + 1);\n                }\n\n                return this.getLast(lastValue, _isCols);\n            };\n\n            const scrollTop = calculateScrollPos(target.scrollTop, contentPos.top);\n            const scrollLeft = calculateScrollPos(target.scrollLeft, contentPos.left);\n\n            let newFirst = 0;\n            let newLast = this.last;\n            let isRangeChanged = false;\n\n            if (both) {\n                const isScrollDown = this.lastScrollPos.top <= scrollTop;\n                const isScrollRight = this.lastScrollPos.left <= scrollLeft;\n                const currentIndex = { rows: calculateCurrentIndex(scrollTop, this.itemSize[0]), cols: calculateCurrentIndex(scrollLeft, this.itemSize[1]) };\n                const triggerIndex = {\n                    rows: calculateTriggerIndex(currentIndex.rows, this.first.rows, this.last.rows, this.numItemsInViewport.rows, this.d_numToleratedItems[0], isScrollDown),\n                    cols: calculateTriggerIndex(currentIndex.cols, this.first.cols, this.last.cols, this.numItemsInViewport.cols, this.d_numToleratedItems[1], isScrollRight)\n                };\n\n                newFirst = {\n                    rows: calculateFirst(currentIndex.rows, triggerIndex.rows, this.first.rows, this.last.rows, this.numItemsInViewport.rows, this.d_numToleratedItems[0], isScrollDown),\n                    cols: calculateFirst(currentIndex.cols, triggerIndex.cols, this.first.cols, this.last.cols, this.numItemsInViewport.cols, this.d_numToleratedItems[1], isScrollRight)\n                };\n                newLast = {\n                    rows: calculateLast(currentIndex.rows, newFirst.rows, this.last.rows, this.numItemsInViewport.rows, this.d_numToleratedItems[0]),\n                    cols: calculateLast(currentIndex.cols, newFirst.cols, this.last.cols, this.numItemsInViewport.cols, this.d_numToleratedItems[1], true)\n                };\n\n                isRangeChanged = (newFirst.rows !== this.first.rows && newLast.rows !== this.last.rows) || (newFirst.cols !== this.first.cols && newLast.cols !== this.last.cols);\n\n                this.lastScrollPos = { top: scrollTop, left: scrollLeft };\n            }\n            else {\n                const scrollPos = horizontal ? scrollLeft : scrollTop;\n                const isScrollDownOrRight = this.lastScrollPos <= scrollPos;\n                const currentIndex = calculateCurrentIndex(scrollPos, this.itemSize);\n                const triggerIndex = calculateTriggerIndex(currentIndex, this.first, this.last, this.numItemsInViewport, this.d_numToleratedItems, isScrollDownOrRight);\n\n                newFirst = calculateFirst(currentIndex, triggerIndex, this.first, this.last, this.numItemsInViewport, this.d_numToleratedItems, isScrollDownOrRight);\n                newLast = calculateLast(currentIndex, newFirst, this.last, this.numItemsInViewport, this.d_numToleratedItems);\n                isRangeChanged = newFirst !== this.first && newLast !== this.last;\n\n                this.lastScrollPos = scrollPos;\n            }\n\n            return {\n                first: newFirst,\n                last: newLast,\n                isRangeChanged\n            }\n        },\n        onScrollChange(event) {\n            const { first, last, isRangeChanged } = this.onScrollPositionChange(event);\n\n            if (isRangeChanged) {\n                const newState = { first, last };\n\n                this.setContentPosition(newState);\n\n                this.first = first;\n                this.last = last;\n\n                this.$emit('scroll-index-change', newState);\n\n                if (this.lazy) {\n                    this.$emit('lazy-load', newState);\n                }\n            }\n        },\n        onScroll(event) {\n            this.$emit('scroll', event);\n\n            if (this.delay) {\n                if (this.scrollTimeout) {\n                    clearTimeout(this.scrollTimeout);\n                }\n\n                if (!this.d_loading && this.showLoader) {\n                    const { isRangeChanged: changed } = this.onScrollPositionChange(event);\n                    changed && (this.d_loading = true);\n                }\n\n                this.scrollTimeout = setTimeout(() => {\n                    this.onScrollChange(event);\n\n                    if (this.d_loading && this.showLoader && !this.lazy) {\n                        this.d_loading = false;\n                    }\n                }, this.delay);\n            }\n            else {\n                this.onScrollChange(event);\n            }\n        },\n        getOptions(renderedIndex) {\n            const count = (this.items || []).length;\n            const index = this.isBoth() ? this.first.rows + renderedIndex : this.first + renderedIndex;\n            return {\n                index,\n                count,\n                first: index === 0,\n                last: index === (count - 1),\n                even: index % 2 === 0,\n                odd: index % 2 !== 0\n            };\n        },\n        getLoaderOptions(index, extOptions) {\n            let count = this.loaderArr.length;\n            return {\n                index,\n                count,\n                first: index === 0,\n                last: index === (count - 1),\n                even: index % 2 === 0,\n                odd: index % 2 !== 0,\n                ...extOptions\n            }\n        },\n        elementRef(el) {\n            this.element = el;\n        },\n        contentRef(el) {\n            this.content = el;\n        }\n    },\n    computed: {\n        containerClass() {\n            return ['p-virtualscroller', {\n                'p-both-scroll': this.isBoth(),\n                'p-horizontal-scroll': this.isHorizontal()\n            }, this.class];\n        },\n        contentClass() {\n            return ['p-virtualscroller-content', {\n                'p-virtualscroller-loading': this.d_loading\n            }];\n        },\n        loaderClass() {\n            return ['p-virtualscroller-loader', {\n                'p-component-overlay': !this.$slots.loader\n            }];\n        },\n        loadedItems() {\n            const items = this.items;\n            if (items && !this.d_loading) {\n                if (this.isBoth()) {\n                    return items.slice(this.first.rows, this.last.rows).map(item => this.columns ? item : item.slice(this.first.cols, this.last.cols));\n                }\n                else if (this.isHorizontal() && this.columns)\n                    return items;\n                else\n                    return items.slice(this.first, this.last);\n            }\n\n            return [];\n        },\n        loadedRows() {\n            return this.d_loading ? (this.loaderDisabled ? this.loaderArr : []) : this.loadedItems;\n        },\n        loadedColumns() {\n            if (this.columns) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n\n                if (both || horizontal) {\n                    return this.d_loading && this.loaderDisabled ?\n                    (both ? this.loaderArr[0] : this.loaderArr):\n                    this.columns.slice((both ? this.first.cols : this.first), (both ? this.last.cols : this.last));\n                }\n            }\n\n            return this.columns;\n        }\n    }\n};\n\nconst _hoisted_1 = {\n  key: 1,\n  class: \"p-virtualscroller-loading-icon pi pi-spinner pi-spin\"\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (!$props.disabled)\n    ? (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createElementBlock\"])(\"div\", {\n        key: 0,\n        ref: $options.elementRef,\n        class: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"normalizeClass\"])($options.containerClass),\n        tabindex: 0,\n        style: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"normalizeStyle\"])($props.style),\n        onScroll: _cache[0] || (_cache[0] = (...args) => ($options.onScroll && $options.onScroll(...args)))\n      }, [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"renderSlot\"])(_ctx.$slots, \"content\", {\n          styleClass: $options.contentClass,\n          items: $options.loadedItems,\n          getItemOptions: $options.getOptions,\n          loading: $data.d_loading,\n          getLoaderOptions: $options.getLoaderOptions,\n          itemSize: $props.itemSize,\n          rows: $options.loadedRows,\n          columns: $options.loadedColumns,\n          contentRef: $options.contentRef,\n          spacerStyle: $data.spacerStyle,\n          contentStyle: $data.contentStyle,\n          vertical: $options.isVertical(),\n          horizontal: $options.isHorizontal(),\n          both: $options.isBoth()\n        }, () => [\n          Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createElementVNode\"])(\"div\", {\n            ref: $options.contentRef,\n            class: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"normalizeClass\"])($options.contentClass),\n            style: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"normalizeStyle\"])($data.contentStyle)\n          }, [\n            (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(true), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createElementBlock\"])(vue__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], null, Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"renderList\"])($options.loadedItems, (item, index) => {\n              return Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"renderSlot\"])(_ctx.$slots, \"item\", {\n                key: index,\n                item: item,\n                options: $options.getOptions(index)\n              })\n            }), 128))\n          ], 6)\n        ]),\n        ($props.showSpacer)\n          ? (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createElementBlock\"])(\"div\", {\n              key: 0,\n              class: \"p-virtualscroller-spacer\",\n              style: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"normalizeStyle\"])($data.spacerStyle)\n            }, null, 4))\n          : Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createCommentVNode\"])(\"\", true),\n        (!$props.loaderDisabled && $props.showLoader && $data.d_loading)\n          ? (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createElementBlock\"])(\"div\", {\n              key: 1,\n              class: Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"normalizeClass\"])($options.loaderClass)\n            }, [\n              (_ctx.$slots && _ctx.$slots.loader)\n                ? (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(true), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createElementBlock\"])(vue__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], { key: 0 }, Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"renderList\"])($data.loaderArr, (_, index) => {\n                    return Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"renderSlot\"])(_ctx.$slots, \"loader\", {\n                      key: index,\n                      options: $options.getLoaderOptions(index, $options.isBoth() && { numCols: _ctx.d_numItemsInViewport.cols })\n                    })\n                  }), 128))\n                : (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createElementBlock\"])(\"i\", _hoisted_1))\n            ], 2))\n          : Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createCommentVNode\"])(\"\", true)\n      ], 38))\n    : (Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"openBlock\"])(), Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"createElementBlock\"])(vue__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], { key: 1 }, [\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"renderSlot\"])(_ctx.$slots, \"default\"),\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"renderSlot\"])(_ctx.$slots, \"content\", {\n          items: $props.items,\n          rows: $props.items,\n          columns: $options.loadedColumns\n        })\n      ], 64))\n}\n\nfunction styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \"\\n.p-virtualscroller {\\n    position: relative;\\n    overflow: auto;\\n    contain: strict;\\n    -webkit-transform: translateZ(0);\\n            transform: translateZ(0);\\n    will-change: scroll-position;\\n    outline: 0 none;\\n}\\n.p-virtualscroller-content {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    contain: content;\\n    min-height: 100%;\\n    min-width: 100%;\\n    will-change: transform;\\n}\\n.p-virtualscroller-spacer {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    height: 1px;\\n    width: 1px;\\n    -webkit-transform-origin: 0 0;\\n            transform-origin: 0 0;\\n    pointer-events: none;\\n}\\n.p-virtualscroller .p-virtualscroller-loader {\\n    position: sticky;\\n    top: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n}\\n.p-virtualscroller-loader.p-component-overlay {\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-align: center;\\n        -ms-flex-align: center;\\n            align-items: center;\\n    -webkit-box-pack: center;\\n        -ms-flex-pack: center;\\n            justify-content: center;\\n}\\n\";\nstyleInject(css_248z);\n\nscript.render = render;\n\n\n\n\n//# sourceURL=webpack:///./node_modules/primevue/virtualscroller/virtualscroller.esm.js?");

/***/ })

}]);