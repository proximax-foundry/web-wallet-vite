(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[3],{

/***/ "./src/util/walletUtils.ts":
/*!*********************************!*\
  !*** ./src/util/walletUtils.ts ***!
  \*********************************/
/*! exports provided: WalletUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WalletUtils\", function() { return WalletUtils; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _state_networkState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/networkState */ \"./src/state/networkState.ts\");\n/* harmony import */ var _state_walletState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../state/walletState */ \"./src/state/walletState.ts\");\n/* harmony import */ var _util_chainUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/chainUtils */ \"./src/util/chainUtils.ts\");\n/* harmony import */ var _models_wallet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/wallet */ \"./src/models/wallet.ts\");\n/* harmony import */ var _models_wallets__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/wallets */ \"./src/models/wallets.ts\");\n/* harmony import */ var _models_walletAccount__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/walletAccount */ \"./src/models/walletAccount.ts\");\n/* harmony import */ var _models_nis1Account__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/nis1Account */ \"./src/models/nis1Account.ts\");\n/* harmony import */ var _models_asset__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/asset */ \"./src/models/asset.ts\");\n/* harmony import */ var _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/REST/chainAPICall */ \"./src/models/REST/chainAPICall.ts\");\n/* harmony import */ var _models_multisigInfo__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../models/multisigInfo */ \"./src/models/multisigInfo.ts\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tsjs-xpx-chain-sdk */ \"./node_modules/tsjs-xpx-chain-sdk/dist/index.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var _typeHelper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./typeHelper */ \"./src/util/typeHelper.ts\");\n/* harmony import */ var _state_utils_walletStateUtils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/state/utils/walletStateUtils */ \"./src/state/utils/walletStateUtils.ts\");\n/* harmony import */ var _models_otherAccount__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @/models/otherAccount */ \"./src/models/otherAccount.ts\");\n/* harmony import */ var _models_namespace__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @/models/namespace */ \"./src/models/namespace.ts\");\n/* harmony import */ var nem_library__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! nem-library */ \"./node_modules/nem-library/dist/index.js\");\n/* harmony import */ var nem_library__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(nem_library__WEBPACK_IMPORTED_MODULE_17__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar config = __webpack_require__(/*! @/../config/config.json */ \"./config/config.json\");\nvar localNetworkType = Object(vue__WEBPACK_IMPORTED_MODULE_12__[\"computed\"])(function () { return _util_chainUtils__WEBPACK_IMPORTED_MODULE_3__[\"ChainUtils\"].getNetworkType(_state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile.network.type); });\nvar WalletUtils = /** @class */ (function () {\n    function WalletUtils() {\n    }\n    WalletUtils.verifyWalletPassword = function (name, networkName, password) {\n        var wallet = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].wallets.filterByNetworkNameAndName(networkName, name);\n        if (!wallet) {\n            if (config.debug) {\n                console.error(\"wallet not found\", name, networkName);\n            }\n            return false;\n        }\n        if (config.debug) {\n            console.log(\"verifyWalletPassword triggered with\", name, networkName);\n        }\n        var account = wallet.accounts[0];\n        var common = {\n            password: password,\n            privateKey: \"\"\n        };\n        if (account) {\n            if (!tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Crypto\"].passwordToPrivateKey(common, account, account.algo == \"pass:bip32\" ? tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"WalletAlgorithm\"].Pass_bip32 : account.algo)) {\n                console.log('fail');\n                return false;\n            }\n            else {\n                if (!_util_chainUtils__WEBPACK_IMPORTED_MODULE_3__[\"ChainUtils\"].isPrivateKeyValid(common.privateKey)) {\n                    return false;\n                }\n                else {\n                    var checkingAddress = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Account\"].createFromPrivateKey(common.privateKey, localNetworkType.value).address.plain();\n                    if (checkingAddress !== account.address) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    WalletUtils.getTotalBalanceWithCurrentNetwork = function () {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n            var wallet, namespace, currentNetworkProfile, chainAPICall, nativeTokenNamespace, amount;\n            var _this = this;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                wallet = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet;\n                namespace = \"\";\n                if (_state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile) {\n                    namespace = _state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile.network.currency.namespace;\n                    currentNetworkProfile = _state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile;\n                }\n                else {\n                    return [2 /*return*/, wallet];\n                }\n                chainAPICall = new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_9__[\"ChainAPICall\"](_util_chainUtils__WEBPACK_IMPORTED_MODULE_3__[\"ChainUtils\"].buildAPIEndpoint(_state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].selectedAPIEndpoint, _state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile.httpPort));\n                nativeTokenNamespace = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"NamespaceId\"](namespace);\n                amount = 0;\n                return [2 /*return*/, new Promise(function (resolve) { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(_this, void 0, void 0, function () {\n                        var accountsInfo, nativeNetworkMosaicId, accInfo_1;\n                        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, WalletUtils.fetchAccountInfoCurrentWalletAccounts()];\n                                case 1:\n                                    accountsInfo = _a.sent();\n                                    return [4 /*yield*/, chainAPICall.namespaceAPI.getLinkedMosaicId(nativeTokenNamespace)];\n                                case 2:\n                                    nativeNetworkMosaicId = _a.sent();\n                                    if (accountsInfo) {\n                                        accInfo_1 = accountsInfo;\n                                        wallet.accounts.forEach(function (account) {\n                                            account.assets = [];\n                                            var mosaicList = [];\n                                            var mosaicAmount = {};\n                                            var address = accInfo_1.find(function (element) { return element.address['address'] == account.address; });\n                                            if (address != undefined) {\n                                                for (var _i = 0, _a = address.mosaics; _i < _a.length; _i++) {\n                                                    var mosaic = _a[_i];\n                                                    if (mosaic.id.toHex() === nativeNetworkMosaicId.toHex()) {\n                                                        amount = mosaic.amount.compact() / Math.pow(10, currentNetworkProfile.network.currency.divisibility);\n                                                        var newAsset = new _models_asset__WEBPACK_IMPORTED_MODULE_8__[\"Asset\"](mosaic.id.toHex(), currentNetworkProfile.network.currency.divisibility, false, true);\n                                                        newAsset.amount = amount;\n                                                        account.assets.push(newAsset);\n                                                        account.updateBalance(nativeNetworkMosaicId.toHex());\n                                                    }\n                                                    else {\n                                                        mosaicList.push(mosaic.id);\n                                                        mosaicAmount[mosaic.id.toHex()] = mosaic.amount.compact();\n                                                    }\n                                                }\n                                                chainAPICall.assetAPI.getMosaics(mosaicList).then(function (mosaicInfo) {\n                                                    mosaicInfo.forEach(function (asset) {\n                                                        var newAsset = new _models_asset__WEBPACK_IMPORTED_MODULE_8__[\"Asset\"](asset.mosaicId.toHex(), asset.divisibility, asset.isSupplyMutable(), asset.isTransferable(), asset.owner.publicKey);\n                                                        newAsset.supply = asset.supply.compact();\n                                                        newAsset.amount = mosaicAmount[newAsset.idHex] / Math.pow(10, asset.divisibility);\n                                                        newAsset.duration = asset.duration ? asset.duration.compact() : null;\n                                                        account.assets.push(newAsset);\n                                                    });\n                                                });\n                                            }\n                                            else {\n                                                account.balance = 0;\n                                            }\n                                            resolve(wallet);\n                                        });\n                                    }\n                                    else {\n                                        resolve(wallet);\n                                    }\n                                    return [2 /*return*/];\n                            }\n                        });\n                    }); })];\n            });\n        });\n    };\n    WalletUtils.fetchAccountInfoCurrentWalletAccounts = function () {\n        var wallet = _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].currentLoggedInWallet;\n        var networkTypeId = _state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile.network.type;\n        if (!wallet || !networkTypeId) {\n            return false;\n        }\n        var networkType = _util_chainUtils__WEBPACK_IMPORTED_MODULE_3__[\"ChainUtils\"].getNetworkType(networkTypeId);\n        var addresses = [];\n        wallet.accounts.forEach(function (element) {\n            addresses.push(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Address\"].createFromPublicKey(element.publicKey, networkType));\n        });\n        var currentNetworkProfile;\n        if (_state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile) {\n            currentNetworkProfile = _state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile;\n        }\n        else {\n            return false;\n        }\n        var chainAPICall = new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_9__[\"ChainAPICall\"](_util_chainUtils__WEBPACK_IMPORTED_MODULE_3__[\"ChainUtils\"].buildAPIEndpoint(_state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].selectedAPIEndpoint, currentNetworkProfile.httpPort));\n        return new Promise(function (resolve, reject) {\n            try {\n                chainAPICall.accountAPI.getAccountsInfo(addresses).then(function (accountInfo) {\n                    resolve(accountInfo);\n                }).catch(function (error) {\n                    console.warn(error);\n                    reject(false);\n                });\n            }\n            catch (err) {\n                console.warn(err);\n                reject(false);\n            }\n        });\n    };\n    /**\n   *\n   *\n   * @param {*} address\n   * @returns\n   */\n    WalletUtils.createAddressFromEncode = function (address) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Address\"].createFromRawAddress(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"RawAddress\"].addressToString(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Convert\"].hexToUint8(address)));\n    };\n    /**\n     *\n     *\n     * @param {string} walletName\n     * @param {Password} password\n     * @param {number} network\n     * @returns {SimpleWallet}\n     */\n    WalletUtils.createAccountSimple = function (walletName, password, network) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"SimpleWallet\"].create(walletName, password, network);\n    };\n    WalletUtils.createAccountSimpleFromPrivateKey = function (walletName, password, privateKey, network) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"SimpleWallet\"].createFromPrivateKey(walletName, password, privateKey, network);\n    };\n    /**\n     *\n     *\n     * @param {string} value\n     * @returns {Password}\n     */\n    WalletUtils.createPassword = function (value) {\n        return new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Password\"](value);\n    };\n    /**\n     * Create account simple\n     *\n     * @param {string} nameWallet\n     * @param {Password} password\n     * @param {string} privateKey\n     * @param {NetworkType} network\n     * @returns {SimpleWallet}\n     */\n    WalletUtils.createAccountFromPrivateKey = function (nameWallet, password, privateKey, network) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"SimpleWallet\"].createFromPrivateKey(nameWallet, password, privateKey, network);\n    };\n    /**\n     *\n     *\n     * @param {Password} password\n     * @param {string} encryptedKey\n     * @param {string} iv\n     * @returns {string}\n     */\n    WalletUtils.decryptPrivateKey = function (password, encryptedKey, iv) {\n        var common = {\n            password: password.value,\n            privateKey: ''\n        };\n        var wallet = {\n            encrypted: encryptedKey,\n            iv: iv,\n        };\n        tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Crypto\"].passwordToPrivateKey(common, wallet, tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"WalletAlgorithm\"].Pass_bip32);\n        return common.privateKey;\n    };\n    /**\n     * Check if Address it is correct\n     * @param privateKey privateKey\n     * @param address address\n     * @return checkAddress\n     */\n    WalletUtils.checkAddress = function (privateKey, net, address) {\n        return (tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Account\"].createFromPrivateKey(privateKey, net).address.plain() === address) ? true : false;\n    };\n    WalletUtils.createPublicAccount = function (publicKey, network) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"PublicAccount\"].createFromPublicKey(publicKey, network);\n    };\n    WalletUtils.createAddressFromPublicKey = function (publicKey, networkType) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Address\"].createFromPublicKey(publicKey, networkType);\n    };\n    WalletUtils.cosignAggregateBondedTransaction = function (transaction, account) {\n        var cosignatureTransaction = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"CosignatureTransaction\"].create(transaction);\n        var chainProfile;\n        if (_state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile) {\n            chainProfile = _state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile;\n        }\n        else {\n            return Promise.reject(new Error('chainProfile is null'));\n        }\n        var endpoint = _util_chainUtils__WEBPACK_IMPORTED_MODULE_3__[\"ChainUtils\"].buildAPIEndpoint(_state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].selectedAPIEndpoint, chainProfile.httpPort);\n        return new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_9__[\"ChainAPICall\"](endpoint).transactionAPI.announceAggregateBondedCosignature(account.signCosignatureTransaction(cosignatureTransaction));\n    };\n    WalletUtils.createFromRawAddress = function (address) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Address\"].createFromRawAddress(address);\n    };\n    WalletUtils.getPublicAccountFromPrivateKey = function (privateKey, net) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Account\"].createFromPrivateKey(privateKey, net).publicAccount;\n    };\n    WalletUtils.generateNewAccount = function (network) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Account\"].generateNewAccount(network);\n    };\n    WalletUtils.getNamespaceId = function (id) {\n        return new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"NamespaceId\"](id);\n    };\n    WalletUtils.getMosaicId = function (id) {\n        return new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"MosaicId\"](id);\n    };\n    WalletUtils.isHexString = function (data) {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Convert\"].isHexString(data);\n    };\n    /**\n     *\n     * @returns {boolean}\n  \n     */\n    WalletUtils.isPrivateNet = function (network) {\n        return network === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"NetworkType\"].PRIVATE || network === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"NetworkType\"].PRIVATE_TEST;\n    };\n    /**\n     *\n     *\n     * @param {string} data\n     * @returns\n  \n     */\n    WalletUtils.isValidKeyPublicPrivate = function (data) {\n        if (data !== null && data.length === 64) {\n            return this.isHexString(data);\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     *\n     *\n     * @param {string} address\n     * @returns\n  \n     */\n    WalletUtils.validateAddress = function (address) {\n        if (address !== '') {\n            var addressTrimAndUpperCase = address.trim().toUpperCase().replace(/-/g, '');\n            if (addressTrimAndUpperCase.length === 40) {\n                if (address.charAt(0) === 'S') {\n                    return true;\n                }\n                else if (address.charAt(0) === 'M') {\n                    return true;\n                }\n                else if (address.charAt(0) === 'V') {\n                    return true;\n                }\n                else if (address.charAt(0) === 'X') {\n                    return true;\n                }\n                else if (address.charAt(0) === 'W') {\n                    return true;\n                }\n                else if (address.charAt(0) === 'Z') {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     *\n     *\n     * @param {string} value\n     * @param {string} value2\n     * @returns\n  \n     */\n    WalletUtils.verifyNetworkAddressEqualsNetwork = function (value, value2) {\n        if ((value.length === 40 || value.length === 46) && (value2.length === 40 || value2.length === 46)) {\n            if (value.charAt(0) === 'S' && value2.charAt(0) === 'S') {\n                // NetworkType.MIJIN_TEST\n                return true;\n            }\n            else if (value.charAt(0) === 'M' && value2.charAt(0) === 'M') {\n                // NetworkType.MIJIN\n                return true;\n            }\n            else if (value.charAt(0) === 'V' && value2.charAt(0) === 'V') {\n                // NetworkType.TEST_NET\n                return true;\n            }\n            else if (value.charAt(0) === 'X' && value2.charAt(0) === 'X') {\n                // NetworkType.MAIN_NET\n                return true;\n            }\n            else if (value.charAt(0) === 'W' && value2.charAt(0) === 'W') {\n                // NetworkType.PRIVATE_TEST\n                return true;\n            }\n            else if (value.charAt(0) === 'Z' && value2.charAt(0) === 'Z') {\n                // NetworkType.PRIVATE\n                return true;\n            }\n            else {\n                // Address Network unsupported\n                return false;\n            }\n        }\n    };\n    /**\n     *\n     *\n     * @returns {WalletAlgorithm}\n  \n     */\n    WalletUtils.getWalletAlgorithm = function () {\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"WalletAlgorithm\"];\n    };\n    WalletUtils.importWltOldFormat = function (wallets, parsedObj, networkName, networkType) {\n        var wltFile = parsedObj;\n        if (wallets.filterByNetworkNameAndName(networkName, wltFile.name)) {\n            var error = new Error(\"Wallet with same name already exist\");\n            error.name = \"SAME_NAME\";\n            throw error;\n        }\n        var walletAccounts = [];\n        wltFile.accounts.forEach(function (account) {\n            var walletAccount = new _models_walletAccount__WEBPACK_IMPORTED_MODULE_6__[\"WalletAccount\"](account.name, account.publicAccount.publicKey, account.publicAccount.address.address, account.algo, account.encrypted, account.iv);\n            if (account.nis1Account) {\n                walletAccount.nis1Account = new _models_nis1Account__WEBPACK_IMPORTED_MODULE_7__[\"nis1Account\"](account.nis1Account.address, account.nis1Account.publicKey);\n            }\n            walletAccount.default = account.default;\n            walletAccount.isBrain = account.brain;\n            walletAccount.fixAddress(networkType);\n            walletAccounts.push(walletAccount);\n        });\n        var newWallet = new _models_wallet__WEBPACK_IMPORTED_MODULE_4__[\"Wallet\"](wltFile.name, networkName, walletAccounts);\n        wallets.wallets.push(newWallet);\n        wallets.savetoLocalStorage();\n    };\n    WalletUtils.importWalletNewFormat = function (wallets, parsedObj, networkName, networkType) {\n        var wltFile = parsedObj;\n        if (wallets.filterByNetworkNameAndName(networkName, wltFile.name)) {\n            var error = new Error(\"Wallet with same name already exist\");\n            error.name = \"SAME_NAME\";\n            throw error;\n        }\n        var walletAccounts = [];\n        wltFile.accounts.forEach(function (account) {\n            var walletAccount = new _models_walletAccount__WEBPACK_IMPORTED_MODULE_6__[\"WalletAccount\"](account.name, account.publicKey, account.address, account.algo, account.encrypted, account.iv);\n            if (account.nis1Account) {\n                walletAccount.nis1Account = new _models_nis1Account__WEBPACK_IMPORTED_MODULE_7__[\"nis1Account\"](account.nis1Account.address, account.nis1Account.publicKey);\n            }\n            walletAccount.default = account.default;\n            walletAccount.isBrain = account.isBrain;\n            walletAccount.fixAddress(networkType);\n            walletAccounts.push(walletAccount);\n        });\n        var newWallet = new _models_wallet__WEBPACK_IMPORTED_MODULE_4__[\"Wallet\"](wltFile.name, networkName, walletAccounts);\n        wallets.wallets.push(newWallet);\n        wallets.savetoLocalStorage();\n    };\n    WalletUtils.createNewWalletAccountFromOldFormat = function (jsonString) {\n        var wltAccount = JSON.parse(jsonString);\n        var walletAccount = new _models_walletAccount__WEBPACK_IMPORTED_MODULE_6__[\"WalletAccount\"](wltAccount.name, wltAccount.publicAccount.publicKey, wltAccount.publicAccount.address.address, wltAccount.algo, wltAccount.encrypted, wltAccount.iv);\n        if (wltAccount.nis1Account) {\n            walletAccount.nis1Account = new _models_nis1Account__WEBPACK_IMPORTED_MODULE_7__[\"nis1Account\"](wltAccount.nis1Account.address, wltAccount.nis1Account.publicKey);\n        }\n        walletAccount.default = wltAccount.default;\n        walletAccount.isBrain = wltAccount.brain;\n        return walletAccount;\n    };\n    WalletUtils.checkIsNewFormat = function (base64Wlt) {\n        var wltFile = base64Wlt; //Helper.base64decode(base64Wlt);\n        if (wltFile.accounts[0].publicKey) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    WalletUtils.checkIsNewFormatAccountRaw = function (jsonString) {\n        var account = JSON.parse(jsonString);\n        if (account.publicKey) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    WalletUtils.export = function (wallet) {\n        var walletJSON = JSON.stringify(wallet);\n        return _typeHelper__WEBPACK_IMPORTED_MODULE_13__[\"Helper\"].base64encode(walletJSON);\n    };\n    WalletUtils.updateWalletMultisigInfo = function (wallet) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n            var i, multisigInfo, error_1, multisigInfo;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < wallet.accounts.length)) return [3 /*break*/, 6];\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, WalletUtils.getMultisigDetails(wallet.accounts[i].address)];\n                    case 3:\n                        multisigInfo = _a.sent();\n                        wallet.accounts[i].multisigInfo = multisigInfo;\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        multisigInfo = [];\n                        multisigInfo.push(new _models_multisigInfo__WEBPACK_IMPORTED_MODULE_10__[\"MultisigInfo\"](wallet.accounts[i].publicKey, 0, [], [], 0, 0));\n                        wallet.accounts[i].multisigInfo = multisigInfo;\n                        return [3 /*break*/, 5];\n                    case 5:\n                        ++i;\n                        return [3 /*break*/, 1];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WalletUtils.updateMultisigsDetails = function (walletAccounts) {\n        walletAccounts.forEach(function (walletAccount) {\n            WalletUtils.updateMultisigDetails(walletAccount);\n        });\n    };\n    WalletUtils.updateWalletOtherAccountMultisigInfo = function (wallet) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n            var i, multisigInfo, error_2, multisigInfo;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < wallet.others.length)) return [3 /*break*/, 6];\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, WalletUtils.getMultisigDetails(wallet.others[i].address)];\n                    case 3:\n                        multisigInfo = _a.sent();\n                        wallet.others[i].multisigInfo = multisigInfo;\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_2 = _a.sent();\n                        multisigInfo = [];\n                        multisigInfo.push(new _models_multisigInfo__WEBPACK_IMPORTED_MODULE_10__[\"MultisigInfo\"](wallet.others[i].publicKey, 0, [], [], 0, 0));\n                        wallet.others[i].multisigInfo = multisigInfo;\n                        return [3 /*break*/, 5];\n                    case 5:\n                        ++i;\n                        return [3 /*break*/, 1];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WalletUtils.updateOtherAccountMultisigsDetails = function (otherAccounts) {\n        otherAccounts.forEach(function (walletAccount) {\n            WalletUtils.updateMultisigDetails(walletAccount);\n        });\n    };\n    WalletUtils.updateMultisigDetails = function (walletAccount) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n            var chainAPICall, address, graphInfo, multisigInfos;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        chainAPICall = new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_9__[\"ChainAPICall\"](_util_chainUtils__WEBPACK_IMPORTED_MODULE_3__[\"ChainUtils\"].buildAPIEndpoint(_state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].selectedAPIEndpoint, _state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile.httpPort));\n                        address = _typeHelper__WEBPACK_IMPORTED_MODULE_13__[\"Helper\"].createAddress(walletAccount.address);\n                        return [4 /*yield*/, chainAPICall.accountAPI.getMultisigAccountGraphInfo(address)];\n                    case 1:\n                        graphInfo = _a.sent();\n                        multisigInfos = [];\n                        graphInfo.multisigAccounts.forEach(function (value, key) {\n                            var level = key;\n                            for (var i = 0; i < value.length; ++i) {\n                                var multiInfo = value[i];\n                                var newMultisigInfo = new _models_multisigInfo__WEBPACK_IMPORTED_MODULE_10__[\"MultisigInfo\"](multiInfo.account.publicKey, level, multiInfo.cosignatories.map(function (c) { return c.publicKey; }), multiInfo.multisigAccounts.map(function (c) { return c.publicKey; }), multiInfo.minApproval, multiInfo.minRemoval);\n                                multisigInfos.push(newMultisigInfo);\n                            }\n                        });\n                        walletAccount.multisigInfo = multisigInfos;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WalletUtils.getMultisigDetails = function (addressInString) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n            var chainAPICall, address, graphInfo, multisigInfos;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        chainAPICall = new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_9__[\"ChainAPICall\"](_util_chainUtils__WEBPACK_IMPORTED_MODULE_3__[\"ChainUtils\"].buildAPIEndpoint(_state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].selectedAPIEndpoint, _state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile.httpPort));\n                        address = _typeHelper__WEBPACK_IMPORTED_MODULE_13__[\"Helper\"].createAddress(addressInString);\n                        return [4 /*yield*/, chainAPICall.accountAPI.getMultisigAccountGraphInfo(address)];\n                    case 1:\n                        graphInfo = _a.sent();\n                        multisigInfos = [];\n                        graphInfo.multisigAccounts.forEach(function (value, key) {\n                            var level = key;\n                            for (var i = 0; i < value.length; ++i) {\n                                var multiInfo = value[i];\n                                var newMultisigInfo = new _models_multisigInfo__WEBPACK_IMPORTED_MODULE_10__[\"MultisigInfo\"](multiInfo.account.publicKey, level, multiInfo.cosignatories.map(function (c) { return c.publicKey; }), multiInfo.multisigAccounts.map(function (c) { return c.publicKey; }), multiInfo.minApproval, multiInfo.minRemoval);\n                                multisigInfos.push(newMultisigInfo);\n                            }\n                        });\n                        return [2 /*return*/, multisigInfos];\n                }\n            });\n        });\n    };\n    WalletUtils.populateOtherAccountTypeMultisig = function (wallet) {\n        var _loop_1 = function (i) {\n            var publicKeys = wallet.accounts[i].getDirectChildMultisig();\n            var _loop_2 = function (i_1) {\n                if (wallet.others.find(function (other) { return other.publicKey === publicKeys[i_1]; })) {\n                    return \"continue\";\n                }\n                else if (wallet.accounts.find(function (account) { return account.publicKey === publicKeys[i_1]; })) {\n                    return \"continue\";\n                }\n                var publicAccount = _typeHelper__WEBPACK_IMPORTED_MODULE_13__[\"Helper\"].createPublicAccount(publicKeys[i_1], localNetworkType.value);\n                var address = publicAccount.address.plain();\n                var stripedAddress = address.substr(-4);\n                var newOtherAccount = new _models_otherAccount__WEBPACK_IMPORTED_MODULE_15__[\"OtherAccount\"](\"MULTISIG-\" + stripedAddress, publicKeys[i_1], address, _typeHelper__WEBPACK_IMPORTED_MODULE_13__[\"Helper\"].getOtherWalletAccountType().MULTISIG_CHILD);\n                wallet.others.push(newOtherAccount);\n            };\n            for (var i_1 = 0; i_1 < publicKeys.length; ++i_1) {\n                _loop_2(i_1);\n            }\n        };\n        for (var i = 0; i < wallet.accounts.length; ++i) {\n            _loop_1(i);\n        }\n    };\n    WalletUtils.updateWalletAccountDetails = function (wallet, addInLinkedAccount) {\n        if (addInLinkedAccount === void 0) { addInLinkedAccount = false; }\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n            var chainAPICall, tempAssets, _loop_3, i;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        chainAPICall = new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_9__[\"ChainAPICall\"](_util_chainUtils__WEBPACK_IMPORTED_MODULE_3__[\"ChainUtils\"].buildAPIEndpoint(_state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].selectedAPIEndpoint, _state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile.httpPort));\n                        tempAssets = [];\n                        _loop_3 = function (i) {\n                            var account, publicAccount, accountInfo, linkedPublicAccount, newAddress, stripedAddress, newOtherAccount, namespaceInfos, namespaces, tempNamespaceIds, i_2, namespaceId, newNamespace, namespaceNames, _loop_4, i_3, assets, _loop_5, i_4;\n                            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        account = wallet.accounts[i];\n                                        publicAccount = _typeHelper__WEBPACK_IMPORTED_MODULE_13__[\"Helper\"].createPublicAccount(account.publicKey, localNetworkType.value);\n                                        return [4 /*yield*/, chainAPICall.accountAPI.getAccountInfo(publicAccount.address)];\n                                    case 1:\n                                        accountInfo = _a.sent();\n                                        if (accountInfo.linkedAccountKey !== \"0\".repeat(64) && addInLinkedAccount) {\n                                            linkedPublicAccount = _typeHelper__WEBPACK_IMPORTED_MODULE_13__[\"Helper\"].createPublicAccount(accountInfo.linkedAccountKey, localNetworkType.value);\n                                            newAddress = linkedPublicAccount.address.plain();\n                                            stripedAddress = newAddress.substr(0, -4);\n                                            newOtherAccount = new _models_otherAccount__WEBPACK_IMPORTED_MODULE_15__[\"OtherAccount\"](\"ACCOUNT-LINK-\" + stripedAddress, accountInfo.linkedAccountKey, newAddress, _typeHelper__WEBPACK_IMPORTED_MODULE_13__[\"Helper\"].getOtherWalletAccountType().DELEGATE_VALIDATE);\n                                            if (!wallet.others.find(function (other) { return other.publicKey === accountInfo.linkedAccountKey; })) {\n                                                wallet.others.push(newOtherAccount);\n                                            }\n                                        }\n                                        return [4 /*yield*/, chainAPICall.namespaceAPI.getNamespacesFromAccount(publicAccount.address)];\n                                    case 2:\n                                        namespaceInfos = _a.sent();\n                                        namespaces = [];\n                                        tempNamespaceIds = [];\n                                        for (i_2 = 0; i_2 < namespaceInfos.length; ++i_2) {\n                                            namespaceId = namespaceInfos[i_2].id;\n                                            tempNamespaceIds.push(namespaceId);\n                                            newNamespace = new _models_namespace__WEBPACK_IMPORTED_MODULE_16__[\"Namespace\"](namespaceInfos[i_2].id.toHex());\n                                            newNamespace.active = namespaceInfos[i_2].active;\n                                            if (namespaceInfos[i_2].isSubnamespace()) {\n                                                newNamespace.parentId = namespaceInfos[i_2].parentNamespaceId().toHex();\n                                            }\n                                            newNamespace.startHeight = namespaceInfos[i_2].startHeight.compact();\n                                            newNamespace.endHeight = namespaceInfos[i_2].endHeight.compact();\n                                            if (namespaceInfos[i_2].hasAlias()) {\n                                                newNamespace.linkType = namespaceInfos[i_2].alias.type.valueOf();\n                                                switch (newNamespace.linkType) {\n                                                    case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"AliasType\"].Mosaic:\n                                                        newNamespace.linkedId = namespaceInfos[i_2].alias.mosaicId.toHex();\n                                                        break;\n                                                    case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"AliasType\"].Address:\n                                                        newNamespace.linkedId = namespaceInfos[i_2].alias.address.plain();\n                                                        break;\n                                                    default:\n                                                        break;\n                                                }\n                                            }\n                                            namespaces.push(newNamespace);\n                                        }\n                                        return [4 /*yield*/, chainAPICall.namespaceAPI.getNamespacesName(tempNamespaceIds)];\n                                    case 3:\n                                        namespaceNames = _a.sent();\n                                        _loop_4 = function (i_3) {\n                                            var existingNamespace = namespaces.find(function (ns) { return ns.idHex === namespaceNames[i_3].namespaceId.toHex(); });\n                                            existingNamespace.name = namespaceNames[i_3].name;\n                                        };\n                                        for (i_3 = 0; i_3 < namespaceNames.length; ++i_3) {\n                                            _loop_4(i_3);\n                                        }\n                                        account.namespaces = namespaces;\n                                        assets = [];\n                                        _loop_5 = function (i_4) {\n                                            var mosaic, mosaicIdHex, existingAsset, newAsset, assetInfo, newTempAsset, newAsset;\n                                            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0:\n                                                        mosaic = accountInfo.mosaics[i_4];\n                                                        mosaicIdHex = mosaic.id.toHex();\n                                                        existingAsset = tempAssets.find(function (asset) { return asset.idHex === mosaicIdHex; });\n                                                        if (!existingAsset) return [3 /*break*/, 1];\n                                                        newAsset = existingAsset.duplicateNewInstance();\n                                                        newAsset.amount = mosaic.amount.compact();\n                                                        assets.push(newAsset);\n                                                        return [3 /*break*/, 3];\n                                                    case 1: return [4 /*yield*/, chainAPICall.assetAPI.getMosaic(mosaic.id)];\n                                                    case 2:\n                                                        assetInfo = _a.sent();\n                                                        newTempAsset = new _models_asset__WEBPACK_IMPORTED_MODULE_8__[\"Asset\"](mosaicIdHex, assetInfo.divisibility, assetInfo.isSupplyMutable(), assetInfo.isTransferable(), assetInfo.owner.publicKey);\n                                                        newTempAsset.duration = assetInfo.duration.compact();\n                                                        newTempAsset.supply = assetInfo.supply.compact();\n                                                        tempAssets.push(newTempAsset);\n                                                        newAsset = newTempAsset.duplicateNewInstance();\n                                                        newAsset.amount = mosaic.amount.compact();\n                                                        assets.push(newAsset);\n                                                        _a.label = 3;\n                                                    case 3: return [2 /*return*/];\n                                                }\n                                            });\n                                        };\n                                        i_4 = 0;\n                                        _a.label = 4;\n                                    case 4:\n                                        if (!(i_4 < accountInfo.mosaics.length)) return [3 /*break*/, 7];\n                                        return [5 /*yield**/, _loop_5(i_4)];\n                                    case 5:\n                                        _a.sent();\n                                        _a.label = 6;\n                                    case 6:\n                                        ++i_4;\n                                        return [3 /*break*/, 4];\n                                    case 7:\n                                        account.assets = assets;\n                                        return [2 /*return*/];\n                                }\n                            });\n                        };\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < wallet.accounts.length)) return [3 /*break*/, 4];\n                        return [5 /*yield**/, _loop_3(i)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        ++i;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WalletUtils.updateOtherAccountDetails = function (wallet) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n            var chainAPICall, tempAssets, _loop_6, i;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        chainAPICall = new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_9__[\"ChainAPICall\"](_util_chainUtils__WEBPACK_IMPORTED_MODULE_3__[\"ChainUtils\"].buildAPIEndpoint(_state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].selectedAPIEndpoint, _state_networkState__WEBPACK_IMPORTED_MODULE_1__[\"networkState\"].currentNetworkProfile.httpPort));\n                        tempAssets = [];\n                        _loop_6 = function (i) {\n                            var otherAccount, publicAccount, accountInfo, namespaceInfos, namespaces, tempNamespaceIds, i_5, namespaceId, newNamespace, namespaceNames, _loop_7, i_6, assets, _loop_8, i_7;\n                            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        otherAccount = wallet.others[i];\n                                        publicAccount = _typeHelper__WEBPACK_IMPORTED_MODULE_13__[\"Helper\"].createPublicAccount(otherAccount.publicKey, localNetworkType.value);\n                                        return [4 /*yield*/, chainAPICall.accountAPI.getAccountInfo(publicAccount.address)];\n                                    case 1:\n                                        accountInfo = _a.sent();\n                                        return [4 /*yield*/, chainAPICall.namespaceAPI.getNamespacesFromAccount(publicAccount.address)];\n                                    case 2:\n                                        namespaceInfos = _a.sent();\n                                        namespaces = [];\n                                        tempNamespaceIds = [];\n                                        for (i_5 = 0; i_5 < namespaceInfos.length; ++i_5) {\n                                            namespaceId = namespaceInfos[i_5].id;\n                                            tempNamespaceIds.push(namespaceId);\n                                            newNamespace = new _models_namespace__WEBPACK_IMPORTED_MODULE_16__[\"Namespace\"](namespaceInfos[i_5].id.toHex());\n                                            newNamespace.active = namespaceInfos[i_5].active;\n                                            if (namespaceInfos[i_5].isSubnamespace()) {\n                                                newNamespace.parentId = namespaceInfos[i_5].parentNamespaceId().toHex();\n                                            }\n                                            newNamespace.startHeight = namespaceInfos[i_5].startHeight.compact();\n                                            newNamespace.endHeight = namespaceInfos[i_5].endHeight.compact();\n                                            if (namespaceInfos[i_5].hasAlias()) {\n                                                newNamespace.linkType = namespaceInfos[i_5].alias.type.valueOf();\n                                                switch (newNamespace.linkType) {\n                                                    case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"AliasType\"].Mosaic:\n                                                        newNamespace.linkedId = namespaceInfos[i_5].alias.mosaicId.toHex();\n                                                        break;\n                                                    case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"AliasType\"].Address:\n                                                        newNamespace.linkedId = namespaceInfos[i_5].alias.address.plain();\n                                                        break;\n                                                    default:\n                                                        break;\n                                                }\n                                            }\n                                            namespaces.push(newNamespace);\n                                        }\n                                        return [4 /*yield*/, chainAPICall.namespaceAPI.getNamespacesName(tempNamespaceIds)];\n                                    case 3:\n                                        namespaceNames = _a.sent();\n                                        _loop_7 = function (i_6) {\n                                            var existingNamespace = namespaces.find(function (ns) { return ns.idHex === namespaceNames[i_6].namespaceId.toHex(); });\n                                            existingNamespace.name = namespaceNames[i_6].name;\n                                        };\n                                        for (i_6 = 0; i_6 < namespaceNames.length; ++i_6) {\n                                            _loop_7(i_6);\n                                        }\n                                        otherAccount.namespaces = namespaces;\n                                        assets = [];\n                                        _loop_8 = function (i_7) {\n                                            var mosaic, mosaicIdHex, existingAsset, newAsset, assetInfo, newTempAsset, newAsset;\n                                            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0:\n                                                        mosaic = accountInfo.mosaics[i_7];\n                                                        mosaicIdHex = mosaic.id.toHex();\n                                                        existingAsset = tempAssets.find(function (asset) { return asset.idHex === mosaicIdHex; });\n                                                        if (!existingAsset) return [3 /*break*/, 1];\n                                                        newAsset = existingAsset.duplicateNewInstance();\n                                                        newAsset.amount = mosaic.amount.compact();\n                                                        assets.push(newAsset);\n                                                        otherAccount.addAsset(newAsset);\n                                                        return [3 /*break*/, 3];\n                                                    case 1: return [4 /*yield*/, chainAPICall.assetAPI.getMosaic(mosaic.id)];\n                                                    case 2:\n                                                        assetInfo = _a.sent();\n                                                        newTempAsset = new _models_asset__WEBPACK_IMPORTED_MODULE_8__[\"Asset\"](mosaicIdHex, assetInfo.divisibility, assetInfo.isSupplyMutable(), assetInfo.isTransferable(), assetInfo.owner.publicKey);\n                                                        newTempAsset.duration = assetInfo.duration.compact();\n                                                        newTempAsset.supply = assetInfo.supply.compact();\n                                                        tempAssets.push(newTempAsset);\n                                                        newAsset = newTempAsset.duplicateNewInstance();\n                                                        newAsset.amount = mosaic.amount.compact();\n                                                        assets.push(newAsset);\n                                                        otherAccount.addAsset(newAsset);\n                                                        _a.label = 3;\n                                                    case 3: return [2 /*return*/];\n                                                }\n                                            });\n                                        };\n                                        i_7 = 0;\n                                        _a.label = 4;\n                                    case 4:\n                                        if (!(i_7 < accountInfo.mosaics.length)) return [3 /*break*/, 7];\n                                        return [5 /*yield**/, _loop_8(i_7)];\n                                    case 5:\n                                        _a.sent();\n                                        _a.label = 6;\n                                    case 6:\n                                        ++i_7;\n                                        return [3 /*break*/, 4];\n                                    case 7: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < wallet.others.length)) return [3 /*break*/, 4];\n                        return [5 /*yield**/, _loop_6(i)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        ++i;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WalletUtils.createNis1AccountWithPrivateKey = function (privateKey, isTestnet) {\n        if (isTestnet === void 0) { isTestnet = false; }\n        nem_library__WEBPACK_IMPORTED_MODULE_17__[\"NEMLibrary\"].reset();\n        var networkType;\n        if (isTestnet) {\n            networkType = nem_library__WEBPACK_IMPORTED_MODULE_17__[\"NetworkTypes\"].TEST_NET;\n        }\n        else {\n            networkType = nem_library__WEBPACK_IMPORTED_MODULE_17__[\"NetworkTypes\"].MAIN_NET;\n        }\n        nem_library__WEBPACK_IMPORTED_MODULE_17__[\"NEMLibrary\"].bootstrap(networkType);\n        var tempAccount = nem_library__WEBPACK_IMPORTED_MODULE_17__[\"Account\"].createWithPrivateKey(privateKey);\n        var publicKey = tempAccount.publicKey;\n        var new_nis1Account = new _models_nis1Account__WEBPACK_IMPORTED_MODULE_7__[\"nis1Account\"](tempAccount.address.plain(), publicKey);\n        return new_nis1Account;\n    };\n    WalletUtils.refreshAllAccountDetails = function (wallet, networkProfile) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, Promise, function () {\n            var mosaicId, error_3;\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__generator\"])(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        wallet.others = [];\n                        return [4 /*yield*/, WalletUtils.updateWalletMultisigInfo(wallet)];\n                    case 1:\n                        _a.sent();\n                        WalletUtils.populateOtherAccountTypeMultisig(wallet);\n                        return [4 /*yield*/, WalletUtils.updateWalletAccountDetails(wallet, true)];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, WalletUtils.updateWalletOtherAccountMultisigInfo(wallet)];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, WalletUtils.updateOtherAccountDetails(wallet)];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5:\n                        _a.trys.push([5, 7, , 8]);\n                        return [4 /*yield*/, _util_chainUtils__WEBPACK_IMPORTED_MODULE_3__[\"ChainUtils\"].getLinkedMosaicId(_typeHelper__WEBPACK_IMPORTED_MODULE_13__[\"Helper\"].createNamespaceId(networkProfile.network.currency.namespace))];\n                    case 6:\n                        mosaicId = _a.sent();\n                        networkProfile.network.currency.assetId = mosaicId.toHex();\n                        networkProfile.saveToLocalStorage();\n                        WalletUtils.updateAllAccountBalance(wallet, mosaicId.toHex());\n                        return [3 /*break*/, 8];\n                    case 7:\n                        error_3 = _a.sent();\n                        console.log(error_3);\n                        return [3 /*break*/, 8];\n                    case 8:\n                        _state_walletState__WEBPACK_IMPORTED_MODULE_2__[\"walletState\"].wallets.saveMyWalletOnlytoLocalStorage(wallet);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WalletUtils.updateAllAccountBalance = function (wallet, assetId) {\n        for (var i = 0; i < wallet.accounts.length; ++i) {\n            wallet.accounts[i].updateBalance(assetId);\n        }\n        for (var i = 0; i < wallet.others.length; ++i) {\n            wallet.others[i].updateBalance(assetId);\n        }\n    };\n    WalletUtils.initFixOldFormat = function (walletsToCheck) {\n        var walletsInstance = new _models_wallets__WEBPACK_IMPORTED_MODULE_5__[\"Wallets\"]();\n        var wallets = [];\n        walletsToCheck.wallets.forEach(function (wallet) {\n            var walletAccounts = [];\n            wallet.accounts.forEach(function (account) {\n                var stringJSON = JSON.stringify(account);\n                if (WalletUtils.checkIsNewFormatAccountRaw(stringJSON)) {\n                    walletAccounts.push(account);\n                }\n                else {\n                    var newWalletAccount = WalletUtils.createNewWalletAccountFromOldFormat(stringJSON);\n                    walletAccounts.push(newWalletAccount);\n                }\n            });\n            wallet.accounts = walletAccounts;\n            wallets.push(wallet);\n        });\n        walletsInstance.wallets = wallets;\n        walletsInstance.savetoLocalStorage();\n        _state_utils_walletStateUtils__WEBPACK_IMPORTED_MODULE_14__[\"WalletStateUtils\"].refreshWallets();\n    };\n    WalletUtils.addNewWallet = function (allWallets, password, walletName, networkName, networkType) {\n        var account = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Account\"].generateNewAccount(networkType);\n        var wallet = WalletUtils.createAccountSimpleFromPrivateKey(walletName, password, account.privateKey, networkType);\n        var walletAccounts = [];\n        var walletAccount = new _models_walletAccount__WEBPACK_IMPORTED_MODULE_6__[\"WalletAccount\"]('Primary', account.publicKey, wallet.address.plain(), \"pass:bip32\", wallet.encryptedPrivateKey.encryptedKey, wallet.encryptedPrivateKey.iv);\n        walletAccount.isBrain = true;\n        walletAccount.default = true;\n        walletAccounts.push(walletAccount);\n        var newWalletInstance = new _models_wallet__WEBPACK_IMPORTED_MODULE_4__[\"Wallet\"](walletName, networkName, walletAccounts);\n        allWallets.wallets.push(newWalletInstance);\n        allWallets.savetoLocalStorage();\n        var data = {\n            wallet: walletAccount,\n            privateKey: account.privateKey\n        };\n        return data;\n    };\n    WalletUtils.addNewWalletWithPrivateKey = function (allWallets, privateKey, password, walletName, networkName, networkType) {\n        var account = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_11__[\"Account\"].createFromPrivateKey(privateKey, networkType);\n        var wallet = WalletUtils.createAccountSimpleFromPrivateKey(walletName, password, privateKey, networkType);\n        var walletAccounts = [];\n        var walletAccount = new _models_walletAccount__WEBPACK_IMPORTED_MODULE_6__[\"WalletAccount\"]('Primary', account.publicKey, wallet.address.plain(), \"pass:bip32\", wallet.encryptedPrivateKey.encryptedKey, wallet.encryptedPrivateKey.iv);\n        walletAccount.isBrain = true;\n        walletAccount.default = true;\n        walletAccounts.push(walletAccount);\n        var newWalletInstance = new _models_wallet__WEBPACK_IMPORTED_MODULE_4__[\"Wallet\"](walletName, networkName, walletAccounts);\n        allWallets.wallets.push(newWalletInstance);\n        allWallets.savetoLocalStorage();\n        return walletAccount;\n    };\n    return WalletUtils;\n}());\n\n\n\n//# sourceURL=webpack:///./src/util/walletUtils.ts?");

/***/ })

}]);