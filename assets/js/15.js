(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[15],{

/***/ "./src/models/const/hashType.ts":
/*!**************************************!*\
  !*** ./src/models/const/hashType.ts ***!
  \**************************************/
/*! exports provided: HashType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HashType\", function() { return HashType; });\nvar HashType;\n(function (HashType) {\n    HashType[HashType[\"Sha3_256\"] = 0] = \"Sha3_256\";\n    HashType[HashType[\"Keccak_256\"] = 1] = \"Keccak_256\";\n    HashType[HashType[\"Hash_160\"] = 2] = \"Hash_160\";\n    HashType[HashType[\"Hash_256\"] = 3] = \"Hash_256\";\n})(HashType || (HashType = {}));\n\n\n//# sourceURL=webpack:///./src/models/const/hashType.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/dashboardClasses.ts":
/*!*********************************************************!*\
  !*** ./src/modules/dashboard/model/dashboardClasses.ts ***!
  \*********************************************************/
/*! exports provided: DashboardTip, RowDashboardTip, DashboardTipList, TipType, AmountType, OtherAsset */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DashboardTip\", function() { return DashboardTip; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RowDashboardTip\", function() { return RowDashboardTip; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DashboardTipList\", function() { return DashboardTipList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TipType\", function() { return TipType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AmountType\", function() { return AmountType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OtherAsset\", function() { return OtherAsset; });\nclass DashboardTip {\n    constructor(tipType) {\n        this.tipType = \"\";\n        this.displayValue = \"\";\n        this.value = \"\";\n        this.valueType = \"\";\n        this.displayValue2 = \"\";\n        this.value2 = \"\";\n        this.valueType2 = \"\";\n        this.displayValue3 = \"\";\n        this.value3 = \"\";\n        this.valueType3 = \"\";\n        this.tipType = tipType;\n    }\n}\nclass RowDashboardTip {\n    constructor() {\n        this.rowTips = [];\n    }\n}\nclass DashboardTipList {\n    constructor() {\n        this.list = [];\n    }\n}\nvar TipType;\n(function (TipType) {\n    TipType[\"ADDRESS\"] = \"address\";\n    TipType[\"ASSET\"] = \"asset\";\n    TipType[\"NAMESPACE_STR\"] = \"namespace\";\n    TipType[\"NAMESPACE_ID\"] = \"namespaceId\";\n    TipType[\"PUBLIC_KEY\"] = \"publicKey\";\n    TipType[\"PUBLIC_KEY_STRING\"] = \"publicKeyString\";\n    TipType[\"TO_RIGHT_ARROW\"] = \"toRightArrow\";\n    TipType[\"MESSAGE\"] = \"message\";\n    TipType[\"TX_HASH\"] = \"txHash\";\n    TipType[\"ABSOLUTE_AMOUNT\"] = \"absoluteAmount\";\n    TipType[\"EXACT_AMOUNT\"] = \"exactAmount\";\n    TipType[\"TEMPLATE\"] = \"template\";\n    TipType[\"STRING\"] = \"string\";\n    TipType[\"DURATION\"] = \"duration\";\n    TipType[\"HASH\"] = \"hash\";\n    TipType[\"ASSET_AMOUNT\"] = \"assetAmount\";\n    TipType[\"NAMESPACE_AMOUNT\"] = \"namespaceAmount\";\n    TipType[\"ADDRESS_RESTRICTION_MODIFICATION\"] = \"addressRestrictMod\";\n    TipType[\"TRANSFER\"] = \"transfer\";\n    TipType[\"TRANSFER_UNRESOLVED\"] = \"transferUnresolved\";\n    TipType[\"ASSET_ALIAS\"] = \"assetAlias\";\n    TipType[\"REMOVE_ASSET_ALIAS\"] = \"removeAssetAlias\";\n    TipType[\"ADDRESS_ALIAS\"] = \"addressAlias\";\n    TipType[\"REMOVE_ADDRESS_ALIAS\"] = \"removeAddressAlias\";\n    TipType[\"SUPPLY_AMOUNT\"] = \"supplyAmount\";\n    TipType[\"SUPPLY_ASSET_AMOUNT\"] = \"supplyAssetAmount\";\n    TipType[\"MSG_NAMESPACE\"] = \"msgNamespace\";\n    TipType[\"LINK_PUBLICKEY\"] = \"linkPublicKey\";\n    TipType[\"UNLINK_PUBLICKEY\"] = \"unlinkPublicKey\";\n    TipType[\"AMOUNT_ASSET_VIA_NAMESPACE\"] = \"amountAssetViaNamespace\";\n})(TipType || (TipType = {}));\nvar AmountType;\n(function (AmountType) {\n    AmountType[\"RAW\"] = \"raw\";\n    AmountType[\"EXACT\"] = \"exact\";\n})(AmountType || (AmountType = {}));\nclass OtherAsset {\n    constructor() {\n        this.asset = '';\n        this.amount = 0;\n        this.isLinked = false;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/dashboardClasses.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/aliasNamespace.ts":
/*!********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/aliasNamespace.ts ***!
  \********************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/aliasNamespace.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/commonTransaction.ts":
/*!***********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/commonTransaction.ts ***!
  \***********************************************************************/
/*! exports provided: CommonTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CommonTransaction\", function() { return CommonTransaction; });\nclass CommonTransaction {\n    constructor(txnHash) {\n        this.type = \"\";\n        this.maxFee = 0;\n        this.signer = \"\";\n        this.signerAddress = \"\";\n        this.signerName = \"\";\n        this.deadline = null;\n        this.hash = txnHash;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/commonTransaction.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/account.ts":
/*!***********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/account.ts ***!
  \***********************************************************************/
/*! exports provided: ConfirmedAccountTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAccountTransaction\", function() { return ConfirmedAccountTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedAccountTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.approvalDelta = 0;\n        this.removalDelta = 0;\n        this.oldApprovalNumber = null;\n        this.oldRemovalNumber = null;\n        this.addedCosigner = [];\n        this.removedCosigner = [];\n        this.modifyingAccountPublicKey = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/account.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/aggregate.ts":
/*!*************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/aggregate.ts ***!
  \*************************************************************************/
/*! exports provided: ConfirmedAggregateTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAggregateTransaction\", function() { return ConfirmedAggregateTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedAggregateTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.aggregateLength = 0;\n        this.txnList = [];\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/aggregate.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/alias.ts":
/*!*********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/alias.ts ***!
  \*********************************************************************/
/*! exports provided: ConfirmedAliasTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAliasTransaction\", function() { return ConfirmedAliasTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedAliasTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.aliasName = \"\";\n        this.aliasType = 0;\n        this.aliasTypeName = \"\";\n        this.address = \"\";\n        this.assetId = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/alias.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/asset.ts":
/*!*********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/asset.ts ***!
  \*********************************************************************/
/*! exports provided: ConfirmedAssetTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAssetTransaction\", function() { return ConfirmedAssetTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedAssetTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.assetId = \"\";\n        this.nonce = null;\n        this.namespaceName = null;\n        this.levyAssetId = null;\n        this.levyAssetAmount = null;\n        this.levyAssetAmountIsRaw = null;\n        this.levyType = null;\n        this.levyRecipient = null;\n        this.levyAssetName = null;\n        this.supplyDelta = null;\n        this.supplyDeltaIsRaw = null;\n        this.divisibility = null;\n        this.transferable = null;\n        this.supplyMutable = null;\n        this.duration = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/asset.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/chain.ts":
/*!*********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/chain.ts ***!
  \*********************************************************************/
/*! exports provided: ConfirmedChainTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedChainTransaction\", function() { return ConfirmedChainTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedChainTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.applyHeightDelta = null;\n        this.networkConfig = null; // not assigning for dashboard\n        this.supportedEntityVersions = null; // not assigning for dashboard\n        this.newVersion = null;\n        this.upgradePeriod = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/chain.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/confirmed.ts":
/*!*************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/confirmed.ts ***!
  \*************************************************************************/
/*! exports provided: ConfirmedTransaction, ConfirmedAliasTransaction, ConfirmedMetadataTransaction, ConfirmedTransferTransaction, ConfirmedAggregateTransaction, ConfirmedAssetTransaction, ConfirmedChainTransaction, ConfirmedNamespaceTransaction, ConfirmedLockTransaction, ConfirmedAccountTransaction, ConfirmedSecretTransaction, ConfirmedRestrictionTransaction, ConfirmedLinkTransaction, ConfirmedExchangeTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedTransaction\", function() { return _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"]; });\n\n/* harmony import */ var _alias__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alias */ \"./src/modules/dashboard/model/transactions/confirmed/alias.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAliasTransaction\", function() { return _alias__WEBPACK_IMPORTED_MODULE_1__[\"ConfirmedAliasTransaction\"]; });\n\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./metadata */ \"./src/modules/dashboard/model/transactions/confirmed/metadata.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedMetadataTransaction\", function() { return _metadata__WEBPACK_IMPORTED_MODULE_2__[\"ConfirmedMetadataTransaction\"]; });\n\n/* harmony import */ var _transfer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transfer */ \"./src/modules/dashboard/model/transactions/confirmed/transfer.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedTransferTransaction\", function() { return _transfer__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedTransferTransaction\"]; });\n\n/* harmony import */ var _aggregate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./aggregate */ \"./src/modules/dashboard/model/transactions/confirmed/aggregate.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAggregateTransaction\", function() { return _aggregate__WEBPACK_IMPORTED_MODULE_4__[\"ConfirmedAggregateTransaction\"]; });\n\n/* harmony import */ var _asset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./asset */ \"./src/modules/dashboard/model/transactions/confirmed/asset.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAssetTransaction\", function() { return _asset__WEBPACK_IMPORTED_MODULE_5__[\"ConfirmedAssetTransaction\"]; });\n\n/* harmony import */ var _chain__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chain */ \"./src/modules/dashboard/model/transactions/confirmed/chain.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedChainTransaction\", function() { return _chain__WEBPACK_IMPORTED_MODULE_6__[\"ConfirmedChainTransaction\"]; });\n\n/* harmony import */ var _namespace__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./namespace */ \"./src/modules/dashboard/model/transactions/confirmed/namespace.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedNamespaceTransaction\", function() { return _namespace__WEBPACK_IMPORTED_MODULE_7__[\"ConfirmedNamespaceTransaction\"]; });\n\n/* harmony import */ var _lock__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lock */ \"./src/modules/dashboard/model/transactions/confirmed/lock.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedLockTransaction\", function() { return _lock__WEBPACK_IMPORTED_MODULE_8__[\"ConfirmedLockTransaction\"]; });\n\n/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./account */ \"./src/modules/dashboard/model/transactions/confirmed/account.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAccountTransaction\", function() { return _account__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedAccountTransaction\"]; });\n\n/* harmony import */ var _secret__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./secret */ \"./src/modules/dashboard/model/transactions/confirmed/secret.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedSecretTransaction\", function() { return _secret__WEBPACK_IMPORTED_MODULE_10__[\"ConfirmedSecretTransaction\"]; });\n\n/* harmony import */ var _restriction__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./restriction */ \"./src/modules/dashboard/model/transactions/confirmed/restriction.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedRestrictionTransaction\", function() { return _restriction__WEBPACK_IMPORTED_MODULE_11__[\"ConfirmedRestrictionTransaction\"]; });\n\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./link */ \"./src/modules/dashboard/model/transactions/confirmed/link.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedLinkTransaction\", function() { return _link__WEBPACK_IMPORTED_MODULE_12__[\"ConfirmedLinkTransaction\"]; });\n\n/* harmony import */ var _exchange__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./exchange */ \"./src/modules/dashboard/model/transactions/confirmed/exchange.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedExchangeTransaction\", function() { return _exchange__WEBPACK_IMPORTED_MODULE_13__[\"ConfirmedExchangeTransaction\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/confirmed.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts":
/*!************************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts ***!
  \************************************************************************************/
/*! exports provided: ConfirmedTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedTransaction\", function() { return ConfirmedTransaction; });\n/* harmony import */ var _commonTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commonTransaction */ \"./src/modules/dashboard/model/transactions/commonTransaction.ts\");\n\nclass ConfirmedTransaction extends _commonTransaction__WEBPACK_IMPORTED_MODULE_0__[\"CommonTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.timestamp = \"\";\n        this.block = 0;\n        this.fee = 0;\n        this.groupType = \"confirmed\";\n    }\n    static convertToSubClass(subclass, instance) {\n        let newTxn = new subclass(instance.hash);\n        Object.assign(newTxn, instance);\n        return newTxn;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/exchange.ts":
/*!************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/exchange.ts ***!
  \************************************************************************/
/*! exports provided: ConfirmedExchangeTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedExchangeTransaction\", function() { return ConfirmedExchangeTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedExchangeTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.exchangeOffers = [];\n        this.isTakingOffer = false;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/exchange.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/link.ts":
/*!********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/link.ts ***!
  \********************************************************************/
/*! exports provided: ConfirmedLinkTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedLinkTransaction\", function() { return ConfirmedLinkTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedLinkTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.remotePublicKey = \"\";\n        this.action = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/link.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/lock.ts":
/*!********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/lock.ts ***!
  \********************************************************************/
/*! exports provided: ConfirmedLockTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedLockTransaction\", function() { return ConfirmedLockTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedLockTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.lockHash = \"\";\n        this.duration = 0;\n        this.expired = null;\n        this.isRefunded = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/lock.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/metadata.ts":
/*!************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/metadata.ts ***!
  \************************************************************************/
/*! exports provided: ConfirmedMetadataTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedMetadataTransaction\", function() { return ConfirmedMetadataTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedMetadataTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.metadataType = 0;\n        this.metadataTypeName = \"\";\n        this.scopedMetadataKey = \"\";\n        this.targetPublicKey = \"\";\n        this.targetId = \"\";\n        this.targetIdName = \"\";\n        this.sizeChanged = 0;\n        this.valueChange = \"\";\n        this.oldValue = \"\";\n        this.newValue = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/metadata.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/namespace.ts":
/*!*************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/namespace.ts ***!
  \*************************************************************************/
/*! exports provided: ConfirmedNamespaceTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedNamespaceTransaction\", function() { return ConfirmedNamespaceTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedNamespaceTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.namespaceId = \"\";\n        this.namespaceName = \"\";\n        this.registerType = 0;\n        this.registerTypeName = \"\";\n        this.isExtend = false;\n        this.duration = 0;\n        this.parentId = \"\";\n        this.parentName = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/namespace.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/restriction.ts":
/*!***************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/restriction.ts ***!
  \***************************************************************************/
/*! exports provided: ConfirmedRestrictionTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedRestrictionTransaction\", function() { return ConfirmedRestrictionTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedRestrictionTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.restrictionTypeOutput = \"\"; // Allow / Block\n        this.restrictionType = 0;\n        this.modification = [];\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/restriction.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/secret.ts":
/*!**********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/secret.ts ***!
  \**********************************************************************/
/*! exports provided: ConfirmedSecretTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedSecretTransaction\", function() { return ConfirmedSecretTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedSecretTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.secret = \"\";\n        this.hashType = \"\";\n        this.proof = \"\";\n        this.recipient = \"\";\n        this.assetId = null;\n        this.namespaceName = \"\";\n        this.isSendWithNamespace = false;\n        this.amount = 0;\n        this.amountIsRaw = true;\n        this.duration = 0;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/secret.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/confirmed/transfer.ts":
/*!************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/confirmed/transfer.ts ***!
  \************************************************************************/
/*! exports provided: ConfirmedTransferTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedTransferTransaction\", function() { return ConfirmedTransferTransaction; });\n/* harmony import */ var _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./confirmedTransaction */ \"./src/modules/dashboard/model/transactions/confirmed/confirmedTransaction.ts\");\n\nclass ConfirmedTransferTransaction extends _confirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"ConfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.in_out = null;\n        this.sender = null;\n        this.recipient = null;\n        this.recipientNamespaceId = null;\n        this.recipientNamespaceName = null;\n        this.sda = [];\n        this.amountTransfer = 0;\n        this.message = null;\n        this.messageType = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/confirmed/transfer.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/exchangeOffer.ts":
/*!*******************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/exchangeOffer.ts ***!
  \*******************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/exchangeOffer.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/account.ts":
/*!*********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/account.ts ***!
  \*********************************************************************/
/*! exports provided: PartialAccountTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialAccountTransaction\", function() { return PartialAccountTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialAccountTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.approvalDelta = 0;\n        this.removalDelta = 0;\n        this.oldApprovalNumber = null;\n        this.oldRemovalNumber = null;\n        this.addedCosigner = [];\n        this.removedCosigner = [];\n        this.modifyingAccountPublicKey = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/account.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/aggregate.ts":
/*!***********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/aggregate.ts ***!
  \***********************************************************************/
/*! exports provided: PartialAggregateTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialAggregateTransaction\", function() { return PartialAggregateTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialAggregateTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.aggregateLength = 0;\n        this.txnList = [];\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/aggregate.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/alias.ts":
/*!*******************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/alias.ts ***!
  \*******************************************************************/
/*! exports provided: PartialAliasTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialAliasTransaction\", function() { return PartialAliasTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialAliasTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.aliasName = \"\";\n        this.aliasType = 0;\n        this.aliasTypeName = \"\";\n        this.address = \"\";\n        this.assetId = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/alias.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/asset.ts":
/*!*******************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/asset.ts ***!
  \*******************************************************************/
/*! exports provided: PartialAssetTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialAssetTransaction\", function() { return PartialAssetTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialAssetTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.assetId = \"\";\n        this.nonce = null;\n        this.namespaceName = null;\n        this.levyAssetId = null;\n        this.levyAssetAmount = null;\n        this.levyAssetAmountIsRaw = null;\n        this.levyType = null;\n        this.levyRecipient = null;\n        this.levyAssetName = null;\n        this.supplyDelta = null;\n        this.supplyDeltaIsRaw = null;\n        this.divisibility = null;\n        this.transferable = null;\n        this.supplyMutable = null;\n        this.duration = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/asset.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/chain.ts":
/*!*******************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/chain.ts ***!
  \*******************************************************************/
/*! exports provided: PartialChainTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialChainTransaction\", function() { return PartialChainTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialChainTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.applyHeightDelta = null;\n        this.networkConfig = null; // not assigning for dashboard\n        this.supportedEntityVersions = null; // not assigning for dashboard\n        this.newVersion = null;\n        this.upgradePeriod = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/chain.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/exchange.ts":
/*!**********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/exchange.ts ***!
  \**********************************************************************/
/*! exports provided: PartialExchangeTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialExchangeTransaction\", function() { return PartialExchangeTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialExchangeTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.exchangeOffers = [];\n        this.isTakingOffer = false;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/exchange.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/link.ts":
/*!******************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/link.ts ***!
  \******************************************************************/
/*! exports provided: PartialLinkTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialLinkTransaction\", function() { return PartialLinkTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialLinkTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.remotePublicKey = \"\";\n        this.action = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/link.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/lock.ts":
/*!******************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/lock.ts ***!
  \******************************************************************/
/*! exports provided: PartialLockTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialLockTransaction\", function() { return PartialLockTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialLockTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.lockHash = \"\";\n        this.duration = 0;\n        this.expired = null;\n        this.isRefunded = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/lock.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/metadata.ts":
/*!**********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/metadata.ts ***!
  \**********************************************************************/
/*! exports provided: PartialMetadataTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialMetadataTransaction\", function() { return PartialMetadataTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialMetadataTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.metadataType = 0;\n        this.metadataTypeName = \"\";\n        this.scopedMetadataKey = \"\";\n        this.targetPublicKey = \"\";\n        this.targetId = \"\";\n        this.targetIdName = \"\";\n        this.sizeChanged = 0;\n        this.valueChange = \"\";\n        this.oldValue = \"\";\n        this.newValue = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/metadata.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/namespace.ts":
/*!***********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/namespace.ts ***!
  \***********************************************************************/
/*! exports provided: PartialNamespaceTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialNamespaceTransaction\", function() { return PartialNamespaceTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialNamespaceTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.namespaceId = \"\";\n        this.namespaceName = \"\";\n        this.registerType = 0;\n        this.registerTypeName = \"\";\n        this.isExtend = false;\n        this.duration = 0;\n        this.parentId = \"\";\n        this.parentName = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/namespace.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/partial.ts":
/*!*********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/partial.ts ***!
  \*********************************************************************/
/*! exports provided: PartialTransaction, PartialAliasTransaction, PartialMetadataTransaction, PartialTransferTransaction, PartialAggregateTransaction, PartialAssetTransaction, PartialChainTransaction, PartialNamespaceTransaction, PartialLockTransaction, PartialAccountTransaction, PartialSecretTransaction, PartialRestrictionTransaction, PartialLinkTransaction, PartialExchangeTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialTransaction\", function() { return _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"]; });\n\n/* harmony import */ var _alias__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alias */ \"./src/modules/dashboard/model/transactions/partial/alias.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialAliasTransaction\", function() { return _alias__WEBPACK_IMPORTED_MODULE_1__[\"PartialAliasTransaction\"]; });\n\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./metadata */ \"./src/modules/dashboard/model/transactions/partial/metadata.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialMetadataTransaction\", function() { return _metadata__WEBPACK_IMPORTED_MODULE_2__[\"PartialMetadataTransaction\"]; });\n\n/* harmony import */ var _transfer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transfer */ \"./src/modules/dashboard/model/transactions/partial/transfer.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialTransferTransaction\", function() { return _transfer__WEBPACK_IMPORTED_MODULE_3__[\"PartialTransferTransaction\"]; });\n\n/* harmony import */ var _aggregate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./aggregate */ \"./src/modules/dashboard/model/transactions/partial/aggregate.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialAggregateTransaction\", function() { return _aggregate__WEBPACK_IMPORTED_MODULE_4__[\"PartialAggregateTransaction\"]; });\n\n/* harmony import */ var _asset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./asset */ \"./src/modules/dashboard/model/transactions/partial/asset.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialAssetTransaction\", function() { return _asset__WEBPACK_IMPORTED_MODULE_5__[\"PartialAssetTransaction\"]; });\n\n/* harmony import */ var _chain__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chain */ \"./src/modules/dashboard/model/transactions/partial/chain.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialChainTransaction\", function() { return _chain__WEBPACK_IMPORTED_MODULE_6__[\"PartialChainTransaction\"]; });\n\n/* harmony import */ var _namespace__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./namespace */ \"./src/modules/dashboard/model/transactions/partial/namespace.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialNamespaceTransaction\", function() { return _namespace__WEBPACK_IMPORTED_MODULE_7__[\"PartialNamespaceTransaction\"]; });\n\n/* harmony import */ var _lock__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lock */ \"./src/modules/dashboard/model/transactions/partial/lock.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialLockTransaction\", function() { return _lock__WEBPACK_IMPORTED_MODULE_8__[\"PartialLockTransaction\"]; });\n\n/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./account */ \"./src/modules/dashboard/model/transactions/partial/account.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialAccountTransaction\", function() { return _account__WEBPACK_IMPORTED_MODULE_9__[\"PartialAccountTransaction\"]; });\n\n/* harmony import */ var _secret__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./secret */ \"./src/modules/dashboard/model/transactions/partial/secret.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialSecretTransaction\", function() { return _secret__WEBPACK_IMPORTED_MODULE_10__[\"PartialSecretTransaction\"]; });\n\n/* harmony import */ var _restriction__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./restriction */ \"./src/modules/dashboard/model/transactions/partial/restriction.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialRestrictionTransaction\", function() { return _restriction__WEBPACK_IMPORTED_MODULE_11__[\"PartialRestrictionTransaction\"]; });\n\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./link */ \"./src/modules/dashboard/model/transactions/partial/link.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialLinkTransaction\", function() { return _link__WEBPACK_IMPORTED_MODULE_12__[\"PartialLinkTransaction\"]; });\n\n/* harmony import */ var _exchange__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./exchange */ \"./src/modules/dashboard/model/transactions/partial/exchange.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialExchangeTransaction\", function() { return _exchange__WEBPACK_IMPORTED_MODULE_13__[\"PartialExchangeTransaction\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/partial.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/partialTransaction.ts":
/*!********************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/partialTransaction.ts ***!
  \********************************************************************************/
/*! exports provided: PartialTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialTransaction\", function() { return PartialTransaction; });\n/* harmony import */ var _commonTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commonTransaction */ \"./src/modules/dashboard/model/transactions/commonTransaction.ts\");\n\nclass PartialTransaction extends _commonTransaction__WEBPACK_IMPORTED_MODULE_0__[\"CommonTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.cosignedPublickKey = [];\n        this.pendingCosignPublicKey = [];\n        this.groupType = \"partial\";\n    }\n    static convertToSubClass(subclass, instance) {\n        let newTxn = new subclass(instance.hash);\n        Object.assign(newTxn, instance);\n        return newTxn;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/partialTransaction.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/restriction.ts":
/*!*************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/restriction.ts ***!
  \*************************************************************************/
/*! exports provided: PartialRestrictionTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialRestrictionTransaction\", function() { return PartialRestrictionTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialRestrictionTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.restrictionTypeOutput = \"\"; // Allow / Block\n        this.restrictionType = 0;\n        this.modification = [];\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/restriction.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/secret.ts":
/*!********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/secret.ts ***!
  \********************************************************************/
/*! exports provided: PartialSecretTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialSecretTransaction\", function() { return PartialSecretTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialSecretTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.secret = \"\";\n        this.hashType = \"\";\n        this.proof = \"\";\n        this.recipient = \"\";\n        this.assetId = null;\n        this.namespaceName = \"\";\n        this.isSendWithNamespace = false;\n        this.amount = 0;\n        this.amountIsRaw = true;\n        this.duration = 0;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/secret.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/partial/transfer.ts":
/*!**********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/partial/transfer.ts ***!
  \**********************************************************************/
/*! exports provided: PartialTransferTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartialTransferTransaction\", function() { return PartialTransferTransaction; });\n/* harmony import */ var _partialTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partialTransaction */ \"./src/modules/dashboard/model/transactions/partial/partialTransaction.ts\");\n\nclass PartialTransferTransaction extends _partialTransaction__WEBPACK_IMPORTED_MODULE_0__[\"PartialTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.in_out = null;\n        this.sender = null;\n        this.recipient = null;\n        this.recipientNamespaceId = null;\n        this.recipientNamespaceName = null;\n        this.sda = [];\n        this.amountTransfer = 0;\n        this.message = null;\n        this.messageType = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/partial/transfer.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/restrictionModification.ts":
/*!*****************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/restrictionModification.ts ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/restrictionModification.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/sda.ts":
/*!*********************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/sda.ts ***!
  \*********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/sda.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/transaction.ts":
/*!*****************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/transaction.ts ***!
  \*****************************************************************/
/*! exports provided: CommonTransaction, ConfirmedTransaction, ConfirmedAliasTransaction, ConfirmedMetadataTransaction, ConfirmedTransferTransaction, ConfirmedAggregateTransaction, ConfirmedAssetTransaction, ConfirmedChainTransaction, ConfirmedNamespaceTransaction, ConfirmedLockTransaction, ConfirmedAccountTransaction, ConfirmedSecretTransaction, ConfirmedRestrictionTransaction, ConfirmedLinkTransaction, ConfirmedExchangeTransaction, UnconfirmedTransaction, UnconfirmedAliasTransaction, UnconfirmedMetadataTransaction, UnconfirmedTransferTransaction, UnconfirmedAggregateTransaction, UnconfirmedAssetTransaction, UnconfirmedChainTransaction, UnconfirmedNamespaceTransaction, UnconfirmedLockTransaction, UnconfirmedAccountTransaction, UnconfirmedSecretTransaction, UnconfirmedRestrictionTransaction, UnconfirmedLinkTransaction, UnconfirmedExchangeTransaction, PartialTransaction, PartialAliasTransaction, PartialMetadataTransaction, PartialTransferTransaction, PartialAggregateTransaction, PartialAssetTransaction, PartialChainTransaction, PartialNamespaceTransaction, PartialLockTransaction, PartialAccountTransaction, PartialSecretTransaction, PartialRestrictionTransaction, PartialLinkTransaction, PartialExchangeTransaction, TransactionFilterTypes, TransactionFilterType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _aliasNamespace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aliasNamespace */ \"./src/modules/dashboard/model/transactions/aliasNamespace.ts\");\n/* empty/unused harmony star reexport *//* harmony import */ var _sda__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sda */ \"./src/modules/dashboard/model/transactions/sda.ts\");\n/* empty/unused harmony star reexport *//* harmony import */ var _commonTransaction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonTransaction */ \"./src/modules/dashboard/model/transactions/commonTransaction.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CommonTransaction\", function() { return _commonTransaction__WEBPACK_IMPORTED_MODULE_2__[\"CommonTransaction\"]; });\n\n/* harmony import */ var _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./confirmed/confirmed */ \"./src/modules/dashboard/model/transactions/confirmed/confirmed.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAliasTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedAliasTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedMetadataTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedMetadataTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedTransferTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedTransferTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAggregateTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedAggregateTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAssetTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedAssetTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedChainTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedChainTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedNamespaceTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedNamespaceTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedLockTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedLockTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedAccountTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedAccountTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedSecretTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedSecretTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedRestrictionTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedRestrictionTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedLinkTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedLinkTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ConfirmedExchangeTransaction\", function() { return _confirmed_confirmed__WEBPACK_IMPORTED_MODULE_3__[\"ConfirmedExchangeTransaction\"]; });\n\n/* harmony import */ var _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./unconfirmed/unconfirmed */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmed.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedAliasTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedAliasTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedMetadataTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedMetadataTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedTransferTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedTransferTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedAggregateTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedAggregateTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedAssetTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedAssetTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedChainTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedChainTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedNamespaceTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedNamespaceTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedLockTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedLockTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedAccountTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedAccountTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedSecretTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedSecretTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedRestrictionTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedRestrictionTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedLinkTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedLinkTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedExchangeTransaction\", function() { return _unconfirmed_unconfirmed__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedExchangeTransaction\"]; });\n\n/* harmony import */ var _partial_partial__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./partial/partial */ \"./src/modules/dashboard/model/transactions/partial/partial.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialAliasTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialAliasTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialMetadataTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialMetadataTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialTransferTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialTransferTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialAggregateTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialAggregateTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialAssetTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialAssetTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialChainTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialChainTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialNamespaceTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialNamespaceTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialLockTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialLockTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialAccountTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialAccountTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialSecretTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialSecretTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialRestrictionTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialRestrictionTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialLinkTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialLinkTransaction\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PartialExchangeTransaction\", function() { return _partial_partial__WEBPACK_IMPORTED_MODULE_5__[\"PartialExchangeTransaction\"]; });\n\n/* harmony import */ var _restrictionModification__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./restrictionModification */ \"./src/modules/dashboard/model/transactions/restrictionModification.ts\");\n/* empty/unused harmony star reexport *//* harmony import */ var _transactionFilterType__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transactionFilterType */ \"./src/modules/dashboard/model/transactions/transactionFilterType.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TransactionFilterTypes\", function() { return _transactionFilterType__WEBPACK_IMPORTED_MODULE_7__[\"TransactionFilterTypes\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TransactionFilterType\", function() { return _transactionFilterType__WEBPACK_IMPORTED_MODULE_7__[\"TransactionFilterType\"]; });\n\n/* harmony import */ var _exchangeOffer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./exchangeOffer */ \"./src/modules/dashboard/model/transactions/exchangeOffer.ts\");\n/* empty/unused harmony star reexport *//* harmony import */ var _txnList__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./txnList */ \"./src/modules/dashboard/model/transactions/txnList.ts\");\n/* empty/unused harmony star reexport */\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/transaction.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/transactionFilterType.ts":
/*!***************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/transactionFilterType.ts ***!
  \***************************************************************************/
/*! exports provided: TransactionFilterTypes, TransactionFilterType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TransactionFilterTypes\", function() { return TransactionFilterTypes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TransactionFilterType\", function() { return TransactionFilterType; });\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tsjs-xpx-chain-sdk */ \"./node_modules/tsjs-xpx-chain-sdk/dist/index.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__);\n\nclass TransactionFilterTypes {\n    static getTransferTypes() {\n        return [tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].TRANSFER];\n    }\n    static getAliasTypes() {\n        return [\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].ADDRESS_ALIAS,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].MOSAIC_ALIAS\n        ];\n    }\n    static getMetadataTypes() {\n        return [\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].ACCOUNT_METADATA_V2,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].MOSAIC_METADATA_V2,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].NAMESPACE_METADATA_V2\n        ];\n    }\n    static getAccountTypes() {\n        return [\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].MODIFY_MULTISIG_ACCOUNT\n        ];\n    }\n    static getSecretTypes() {\n        return [\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].SECRET_LOCK,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].SECRET_PROOF\n        ];\n    }\n    static getNamespaceTypes() {\n        return [tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].REGISTER_NAMESPACE];\n    }\n    static getAssetTypes() {\n        return [\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].MODIFY_MOSAIC_LEVY,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].REMOVE_MOSAIC_LEVY,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].MOSAIC_DEFINITION,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].MOSAIC_SUPPLY_CHANGE\n        ];\n    }\n    static getRestrictionTypes() {\n        return [\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_ADDRESS,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_MOSAIC,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_OPERATION\n        ];\n    }\n    static getLockTypes() {\n        return [tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].LOCK];\n    }\n    static getLinkTypes() {\n        return [tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].LINK_ACCOUNT];\n    }\n    static getExchangeTypes() {\n        return [\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].EXCHANGE_OFFER,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].ADD_EXCHANGE_OFFER,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].REMOVE_EXCHANGE_OFFER\n        ];\n    }\n    static getChainTypes() {\n        return [\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].CHAIN_CONFIGURE,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].CHAIN_UPGRADE\n        ];\n    }\n    static getAggregateTypes() {\n        return [\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].AGGREGATE_BONDED,\n            tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_0__[\"TransactionType\"].AGGREGATE_COMPLETE\n        ];\n    }\n}\nvar TransactionFilterType;\n(function (TransactionFilterType) {\n    TransactionFilterType[\"TRANSFER\"] = \"Transfer\";\n    TransactionFilterType[\"ACCOUNT\"] = \"Account\";\n    TransactionFilterType[\"AGGREGATE\"] = \"Aggregate\";\n    TransactionFilterType[\"ALIAS\"] = \"Alias\";\n    TransactionFilterType[\"ASSET\"] = \"Asset\";\n    TransactionFilterType[\"NAMESPACE\"] = \"Namespace\";\n    TransactionFilterType[\"METADATA\"] = \"Metadata\";\n    TransactionFilterType[\"EXCHANGE\"] = \"Exchange\";\n    TransactionFilterType[\"LOCK\"] = \"Lock\";\n    TransactionFilterType[\"LINK\"] = \"Link\";\n    TransactionFilterType[\"RESTRICTION\"] = \"Restriction\";\n    TransactionFilterType[\"SECRET\"] = \"Secret\";\n    TransactionFilterType[\"CHAIN\"] = \"Chain\";\n})(TransactionFilterType || (TransactionFilterType = {}));\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/transactionFilterType.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/txnList.ts":
/*!*************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/txnList.ts ***!
  \*************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/txnList.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/account.ts":
/*!*************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/account.ts ***!
  \*************************************************************************/
/*! exports provided: UnconfirmedAccountTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedAccountTransaction\", function() { return UnconfirmedAccountTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedAccountTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.approvalDelta = 0;\n        this.removalDelta = 0;\n        this.oldApprovalNumber = null;\n        this.oldRemovalNumber = null;\n        this.addedCosigner = [];\n        this.removedCosigner = [];\n        this.modifyingAccountPublicKey = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/account.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/aggregate.ts":
/*!***************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/aggregate.ts ***!
  \***************************************************************************/
/*! exports provided: UnconfirmedAggregateTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedAggregateTransaction\", function() { return UnconfirmedAggregateTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedAggregateTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.aggregateLength = 0;\n        this.txnList = [];\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/aggregate.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/alias.ts":
/*!***********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/alias.ts ***!
  \***********************************************************************/
/*! exports provided: UnconfirmedAliasTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedAliasTransaction\", function() { return UnconfirmedAliasTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedAliasTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.aliasName = \"\";\n        this.aliasType = 0;\n        this.aliasTypeName = \"\";\n        this.address = \"\";\n        this.assetId = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/alias.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/asset.ts":
/*!***********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/asset.ts ***!
  \***********************************************************************/
/*! exports provided: UnconfirmedAssetTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedAssetTransaction\", function() { return UnconfirmedAssetTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedAssetTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.assetId = \"\";\n        this.nonce = null;\n        this.namespaceName = null;\n        this.levyAssetId = null;\n        this.levyAssetAmount = null;\n        this.levyAssetAmountIsRaw = null;\n        this.levyType = null;\n        this.levyRecipient = null;\n        this.levyAssetName = null;\n        this.supplyDelta = null;\n        this.supplyDeltaIsRaw = null;\n        this.divisibility = null;\n        this.transferable = null;\n        this.supplyMutable = null;\n        this.duration = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/asset.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/chain.ts":
/*!***********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/chain.ts ***!
  \***********************************************************************/
/*! exports provided: UnconfirmedChainTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedChainTransaction\", function() { return UnconfirmedChainTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedChainTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.applyHeightDelta = null;\n        this.networkConfig = null; // not assigning for dashboard\n        this.supportedEntityVersions = null; // not assigning for dashboard\n        this.newVersion = null;\n        this.upgradePeriod = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/chain.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/exchange.ts":
/*!**************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/exchange.ts ***!
  \**************************************************************************/
/*! exports provided: UnconfirmedExchangeTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedExchangeTransaction\", function() { return UnconfirmedExchangeTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedExchangeTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.exchangeOffers = [];\n        this.isTakingOffer = false;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/exchange.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/link.ts":
/*!**********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/link.ts ***!
  \**********************************************************************/
/*! exports provided: UnconfirmedLinkTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedLinkTransaction\", function() { return UnconfirmedLinkTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedLinkTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.remotePublicKey = \"\";\n        this.action = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/link.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/lock.ts":
/*!**********************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/lock.ts ***!
  \**********************************************************************/
/*! exports provided: UnconfirmedLockTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedLockTransaction\", function() { return UnconfirmedLockTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedLockTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.lockHash = \"\";\n        this.duration = 0;\n        this.expired = null;\n        this.isRefunded = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/lock.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/metadata.ts":
/*!**************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/metadata.ts ***!
  \**************************************************************************/
/*! exports provided: UnconfirmedMetadataTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedMetadataTransaction\", function() { return UnconfirmedMetadataTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedMetadataTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.metadataType = 0;\n        this.metadataTypeName = \"\";\n        this.scopedMetadataKey = \"\";\n        this.targetPublicKey = \"\";\n        this.targetId = \"\";\n        this.targetIdName = \"\";\n        this.sizeChanged = 0;\n        this.valueChange = \"\";\n        this.oldValue = \"\";\n        this.newValue = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/metadata.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/namespace.ts":
/*!***************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/namespace.ts ***!
  \***************************************************************************/
/*! exports provided: UnconfirmedNamespaceTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedNamespaceTransaction\", function() { return UnconfirmedNamespaceTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedNamespaceTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.namespaceId = \"\";\n        this.namespaceName = \"\";\n        this.registerType = 0;\n        this.registerTypeName = \"\";\n        this.isExtend = false;\n        this.duration = 0;\n        this.parentId = \"\";\n        this.parentName = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/namespace.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/restriction.ts":
/*!*****************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/restriction.ts ***!
  \*****************************************************************************/
/*! exports provided: UnconfirmedRestrictionTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedRestrictionTransaction\", function() { return UnconfirmedRestrictionTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedRestrictionTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.restrictionTypeOutput = \"\"; // Allow / Block\n        this.restrictionType = 0;\n        this.modification = [];\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/restriction.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/secret.ts":
/*!************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/secret.ts ***!
  \************************************************************************/
/*! exports provided: UnconfirmedSecretTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedSecretTransaction\", function() { return UnconfirmedSecretTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedSecretTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.secret = \"\";\n        this.hashType = \"\";\n        this.proof = \"\";\n        this.recipient = \"\";\n        this.assetId = null;\n        this.namespaceName = \"\";\n        this.isSendWithNamespace = false;\n        this.amount = 0;\n        this.amountIsRaw = true;\n        this.duration = 0;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/secret.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/transfer.ts":
/*!**************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/transfer.ts ***!
  \**************************************************************************/
/*! exports provided: UnconfirmedTransferTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedTransferTransaction\", function() { return UnconfirmedTransferTransaction; });\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n\nclass UnconfirmedTransferTransaction extends _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.in_out = null;\n        this.sender = null;\n        this.recipient = null;\n        this.recipientNamespaceId = null;\n        this.recipientNamespaceName = null;\n        this.sda = [];\n        this.amountTransfer = 0;\n        this.message = null;\n        this.messageType = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/transfer.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/unconfirmed.ts":
/*!*****************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/unconfirmed.ts ***!
  \*****************************************************************************/
/*! exports provided: UnconfirmedTransaction, UnconfirmedAliasTransaction, UnconfirmedMetadataTransaction, UnconfirmedTransferTransaction, UnconfirmedAggregateTransaction, UnconfirmedAssetTransaction, UnconfirmedChainTransaction, UnconfirmedNamespaceTransaction, UnconfirmedLockTransaction, UnconfirmedAccountTransaction, UnconfirmedSecretTransaction, UnconfirmedRestrictionTransaction, UnconfirmedLinkTransaction, UnconfirmedExchangeTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unconfirmedTransaction */ \"./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedTransaction\", function() { return _unconfirmedTransaction__WEBPACK_IMPORTED_MODULE_0__[\"UnconfirmedTransaction\"]; });\n\n/* harmony import */ var _alias__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alias */ \"./src/modules/dashboard/model/transactions/unconfirmed/alias.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedAliasTransaction\", function() { return _alias__WEBPACK_IMPORTED_MODULE_1__[\"UnconfirmedAliasTransaction\"]; });\n\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./metadata */ \"./src/modules/dashboard/model/transactions/unconfirmed/metadata.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedMetadataTransaction\", function() { return _metadata__WEBPACK_IMPORTED_MODULE_2__[\"UnconfirmedMetadataTransaction\"]; });\n\n/* harmony import */ var _transfer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transfer */ \"./src/modules/dashboard/model/transactions/unconfirmed/transfer.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedTransferTransaction\", function() { return _transfer__WEBPACK_IMPORTED_MODULE_3__[\"UnconfirmedTransferTransaction\"]; });\n\n/* harmony import */ var _aggregate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./aggregate */ \"./src/modules/dashboard/model/transactions/unconfirmed/aggregate.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedAggregateTransaction\", function() { return _aggregate__WEBPACK_IMPORTED_MODULE_4__[\"UnconfirmedAggregateTransaction\"]; });\n\n/* harmony import */ var _asset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./asset */ \"./src/modules/dashboard/model/transactions/unconfirmed/asset.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedAssetTransaction\", function() { return _asset__WEBPACK_IMPORTED_MODULE_5__[\"UnconfirmedAssetTransaction\"]; });\n\n/* harmony import */ var _chain__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chain */ \"./src/modules/dashboard/model/transactions/unconfirmed/chain.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedChainTransaction\", function() { return _chain__WEBPACK_IMPORTED_MODULE_6__[\"UnconfirmedChainTransaction\"]; });\n\n/* harmony import */ var _namespace__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./namespace */ \"./src/modules/dashboard/model/transactions/unconfirmed/namespace.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedNamespaceTransaction\", function() { return _namespace__WEBPACK_IMPORTED_MODULE_7__[\"UnconfirmedNamespaceTransaction\"]; });\n\n/* harmony import */ var _lock__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lock */ \"./src/modules/dashboard/model/transactions/unconfirmed/lock.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedLockTransaction\", function() { return _lock__WEBPACK_IMPORTED_MODULE_8__[\"UnconfirmedLockTransaction\"]; });\n\n/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./account */ \"./src/modules/dashboard/model/transactions/unconfirmed/account.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedAccountTransaction\", function() { return _account__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedAccountTransaction\"]; });\n\n/* harmony import */ var _secret__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./secret */ \"./src/modules/dashboard/model/transactions/unconfirmed/secret.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedSecretTransaction\", function() { return _secret__WEBPACK_IMPORTED_MODULE_10__[\"UnconfirmedSecretTransaction\"]; });\n\n/* harmony import */ var _restriction__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./restriction */ \"./src/modules/dashboard/model/transactions/unconfirmed/restriction.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedRestrictionTransaction\", function() { return _restriction__WEBPACK_IMPORTED_MODULE_11__[\"UnconfirmedRestrictionTransaction\"]; });\n\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./link */ \"./src/modules/dashboard/model/transactions/unconfirmed/link.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedLinkTransaction\", function() { return _link__WEBPACK_IMPORTED_MODULE_12__[\"UnconfirmedLinkTransaction\"]; });\n\n/* harmony import */ var _exchange__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./exchange */ \"./src/modules/dashboard/model/transactions/unconfirmed/exchange.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedExchangeTransaction\", function() { return _exchange__WEBPACK_IMPORTED_MODULE_13__[\"UnconfirmedExchangeTransaction\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/unconfirmed.ts?");

/***/ }),

/***/ "./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts":
/*!****************************************************************************************!*\
  !*** ./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts ***!
  \****************************************************************************************/
/*! exports provided: UnconfirmedTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnconfirmedTransaction\", function() { return UnconfirmedTransaction; });\n/* harmony import */ var _commonTransaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commonTransaction */ \"./src/modules/dashboard/model/transactions/commonTransaction.ts\");\n\nclass UnconfirmedTransaction extends _commonTransaction__WEBPACK_IMPORTED_MODULE_0__[\"CommonTransaction\"] {\n    constructor(txnHash) {\n        super(txnHash);\n        this.groupType = \"unconfirmed\";\n    }\n    static convertToSubClass(subclass, instance) {\n        let newTxn = new subclass(instance.hash);\n        Object.assign(newTxn, instance);\n        return newTxn;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/model/transactions/unconfirmed/unconfirmedTransaction.ts?");

/***/ }),

/***/ "./src/modules/dashboard/service/dashboardService.ts":
/*!***********************************************************!*\
  !*** ./src/modules/dashboard/service/dashboardService.ts ***!
  \***********************************************************/
/*! exports provided: DashboardService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DashboardService\", function() { return DashboardService; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tsjs-xpx-chain-sdk */ \"./node_modules/tsjs-xpx-chain-sdk/dist/index.js\");\n/* harmony import */ var tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _models_const_hashType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../models/const/hashType */ \"./src/models/const/hashType.ts\");\n/* harmony import */ var _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/transactionUtils */ \"./src/util/transactionUtils.ts\");\n/* harmony import */ var _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/typeHelper */ \"./src/util/typeHelper.ts\");\n/* harmony import */ var _state_networkState__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/state/networkState */ \"./src/state/networkState.ts\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var _util_chainUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/util/chainUtils */ \"./src/util/chainUtils.ts\");\n/* harmony import */ var _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../model/dashboardClasses */ \"./src/modules/dashboard/model/dashboardClasses.ts\");\n/* harmony import */ var _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../model/transactions/transaction */ \"./src/modules/dashboard/model/transactions/transaction.ts\");\n/* harmony import */ var _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../models/REST/chainAPICall */ \"./src/models/REST/chainAPICall.ts\");\n\n\n\n\n\n\n\n\n\n\n\nconst networkAPIEndpoint = Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"computed\"])(() => { var _a; return _util_chainUtils__WEBPACK_IMPORTED_MODULE_7__[\"ChainUtils\"].buildAPIEndpoint(_state_networkState__WEBPACK_IMPORTED_MODULE_5__[\"networkState\"].selectedAPIEndpoint, (_a = _state_networkState__WEBPACK_IMPORTED_MODULE_5__[\"networkState\"].currentNetworkProfile) === null || _a === void 0 ? void 0 : _a.httpPort); });\nconst localNetworkType = Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"computed\"])(() => { var _a; return _util_chainUtils__WEBPACK_IMPORTED_MODULE_7__[\"ChainUtils\"].getNetworkType((_a = _state_networkState__WEBPACK_IMPORTED_MODULE_5__[\"networkState\"].currentNetworkProfile) === null || _a === void 0 ? void 0 : _a.network.type); });\nconst namespaceIdFirstCharacterString = \"89ABCDEF\";\nconst nativeTokenName = Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"computed\"])(() => { var _a; return (_a = _state_networkState__WEBPACK_IMPORTED_MODULE_5__[\"networkState\"].currentNetworkProfile) === null || _a === void 0 ? void 0 : _a.network.currency.name; });\nconst nativeTokenAssetId = Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"computed\"])(() => { var _a; return (_a = _state_networkState__WEBPACK_IMPORTED_MODULE_5__[\"networkState\"].currentNetworkProfile) === null || _a === void 0 ? void 0 : _a.network.currency.assetId; });\nconst nativeTokenNamespaceId = Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"computed\"])(() => { var _a; return (_a = _state_networkState__WEBPACK_IMPORTED_MODULE_5__[\"networkState\"].currentNetworkProfile) === null || _a === void 0 ? void 0 : _a.network.currency.namespaceId; });\nconst nativeTokenDivisibility = Object(vue__WEBPACK_IMPORTED_MODULE_6__[\"computed\"])(() => { var _a; return (_a = _state_networkState__WEBPACK_IMPORTED_MODULE_5__[\"networkState\"].currentNetworkProfile) === null || _a === void 0 ? void 0 : _a.network.currency.divisibility; });\nconst chainAPI = new _models_REST_chainAPICall__WEBPACK_IMPORTED_MODULE_10__[\"ChainAPICall\"](networkAPIEndpoint.value);\nclass DashboardService {\n    constructor(wallet, selectedAccount) {\n        this.savedAggregateTxn = [];\n        this.wallet = wallet;\n        this.selectedAccount = selectedAccount;\n    }\n    searchTxns(transactionGroupType, transactionQueryParams) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactionSearchResult = yield chainAPI.transactionAPI.searchTransactions(transactionGroupType, transactionQueryParams);\n            return transactionSearchResult;\n        });\n    }\n    // ---------------------------TransferTransaction / Mixed Transaction---------------------------------------------------\n    formatPartialMixedTxns(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransferTransaction\"], formattedTxn);\n                let sdas = [];\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].TRANSFER) {\n                    let transferTxn = txns[i];\n                    txn.message = transferTxn.message.payload;\n                    txn.messageType = transferTxn.message.type;\n                    if (txn.messageType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MessageType\"].PlainMessage) {\n                        let newType = this.convertToSwapType(txn.message);\n                        if (newType) {\n                            txn.type = newType;\n                        }\n                    }\n                    switch (txn.messageType) {\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MessageType\"].PlainMessage:\n                            txn.messageTypeTitle = \"Plain Message\";\n                            break;\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MessageType\"].EncryptedMessage:\n                            txn.messageTypeTitle = \"Encrypted Message\";\n                            break;\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MessageType\"].HexadecimalMessage:\n                            txn.messageTypeTitle = \"Hexadecimal Message\";\n                            break;\n                    }\n                    let recipientIsNamespace = transferTxn.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"] ? true : false;\n                    let recipient;\n                    if (transferTxn.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"]) {\n                        txn.recipientNamespaceId = transferTxn.recipient.toHex();\n                        recipient = yield DashboardService.getAddressAlias(transferTxn.recipient);\n                        let namespacesName = yield DashboardService.getNamespacesName([transferTxn.recipient]);\n                        txn.recipientNamespaceName = namespacesName[0].name;\n                    }\n                    else {\n                        recipient = transferTxn.recipient;\n                    }\n                    txn.recipient = recipient.plain();\n                    txn.sender = transferTxn.signer.address.plain();\n                    txn.in_out = this.selectedAccount.address === txn.sender ? false : true;\n                    for (let y = 0; y < transferTxn.mosaics.length; ++y) {\n                        let rawAmount = transferTxn.mosaics[y].amount.compact();\n                        let actualAmount = rawAmount;\n                        let assetId;\n                        let isSendWithNamespace = DashboardService.isNamespace(transferTxn.mosaics[y].id);\n                        if (isSendWithNamespace) {\n                            let namespaceId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"](transferTxn.mosaics[y].id.toDTO().id);\n                            assetId = yield DashboardService.getAssetAlias(namespaceId);\n                        }\n                        else {\n                            assetId = transferTxn.mosaics[y].id;\n                        }\n                        let assetIdHex = assetId.toHex();\n                        if ([nativeTokenAssetId.value, nativeTokenNamespaceId.value].includes(assetIdHex)) {\n                            txn.amountTransfer = DashboardService.convertToExactNativeAmount(actualAmount);\n                            continue;\n                        }\n                        let newSDA = {\n                            amount: rawAmount,\n                            divisibility: 0,\n                            id: assetIdHex,\n                            amountIsRaw: true,\n                            sendWithNamespace: isSendWithNamespace\n                        };\n                        if (isSendWithNamespace) {\n                            let namespaceId = transferTxn.mosaics[y].id;\n                            newSDA.sendWithAlias = {\n                                idHex: namespaceId.toHex(),\n                                id: namespaceId.toDTO().id\n                            };\n                        }\n                        sdas.push(newSDA);\n                    }\n                    let namespaceIds = sdas.filter(sda => sda.sendWithNamespace).map(sda => _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].createNamespaceId(sda.sendWithAlias.id));\n                    let allAssetId = sdas.filter(sda => {\n                        return sda.amountIsRaw;\n                    }).map(sda => _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].createAssetId(sda.id));\n                    if (namespaceIds.length || allAssetId.length) {\n                        let namespacesNames = [];\n                        namespacesNames = yield chainAPI.namespaceAPI.getNamespacesName(namespaceIds);\n                        let assetsProperties = yield chainAPI.assetAPI.getMosaics(allAssetId);\n                        let aliasNames = yield chainAPI.assetAPI.getMosaicsNames(allAssetId);\n                        for (let x = 0; x < sdas.length; ++x) {\n                            let assetProperties = assetsProperties.filter(aliasName => aliasName.mosaicId.toHex() === sdas[x].id)[0];\n                            sdas[x].divisibility = assetProperties.divisibility;\n                            sdas[x].amount = DashboardService.convertToExactAmount(sdas[x].amount, assetProperties.divisibility);\n                            sdas[x].amountIsRaw = false;\n                            let mosaicNames = aliasNames.filter(aliaName => aliaName.mosaicId.toHex() === sdas[x].id)[0];\n                            let currentAliasNames = mosaicNames.names;\n                            sdas[x].currentAlias = currentAliasNames.map(currentAlias => {\n                                return { name: currentAlias.name, id: currentAlias.namespaceId.toDTO().id, idHex: currentAlias.namespaceId.toHex() };\n                            });\n                            if (sdas[x].sendWithAlias) {\n                                sdas[x].sendWithAlias.name = namespacesNames\n                                    .filter(nsName => nsName.namespaceId.toHex() === sdas[x].sendWithAlias.idHex)\n                                    .map(nsName => nsName.name)[0];\n                            }\n                        }\n                    }\n                }\n                txn.sda = sdas;\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatUnconfirmedMixedTxns(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransferTransaction\"], formattedTxn);\n                let sdas = [];\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].TRANSFER) {\n                    let transferTxn = txns[i];\n                    txn.message = transferTxn.message.payload;\n                    txn.messageType = transferTxn.message.type;\n                    if (txn.messageType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MessageType\"].PlainMessage) {\n                        let newType = this.convertToSwapType(txn.message);\n                        if (newType) {\n                            txn.type = newType;\n                        }\n                    }\n                    switch (txn.messageType) {\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MessageType\"].PlainMessage:\n                            txn.messageTypeTitle = \"Plain Message\";\n                            break;\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MessageType\"].EncryptedMessage:\n                            txn.messageTypeTitle = \"Encrypted Message\";\n                            break;\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MessageType\"].HexadecimalMessage:\n                            txn.messageTypeTitle = \"Hexadecimal Message\";\n                            break;\n                    }\n                    let recipientIsNamespace = transferTxn.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"] ? true : false;\n                    let recipient;\n                    if (transferTxn.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"]) {\n                        txn.recipientNamespaceId = transferTxn.recipient.toHex();\n                        recipient = yield DashboardService.getAddressAlias(transferTxn.recipient);\n                        let namespacesName = yield DashboardService.getNamespacesName([transferTxn.recipient]);\n                        txn.recipientNamespaceName = namespacesName[0].name;\n                    }\n                    else {\n                        recipient = transferTxn.recipient;\n                    }\n                    txn.recipient = recipient.plain();\n                    txn.sender = transferTxn.signer.address.plain();\n                    txn.in_out = this.selectedAccount.address === txn.sender ? false : true;\n                    for (let y = 0; y < transferTxn.mosaics.length; ++y) {\n                        let rawAmount = transferTxn.mosaics[y].amount.compact();\n                        let actualAmount = rawAmount;\n                        let assetId;\n                        let isSendWithNamespace = DashboardService.isNamespace(transferTxn.mosaics[y].id);\n                        if (isSendWithNamespace) {\n                            let namespaceId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"](transferTxn.mosaics[y].id.toDTO().id);\n                            assetId = yield DashboardService.getAssetAlias(namespaceId);\n                        }\n                        else {\n                            assetId = transferTxn.mosaics[y].id;\n                        }\n                        let assetIdHex = assetId.toHex();\n                        if ([nativeTokenAssetId.value, nativeTokenNamespaceId.value].includes(assetIdHex)) {\n                            txn.amountTransfer = DashboardService.convertToExactNativeAmount(actualAmount);\n                            continue;\n                        }\n                        let newSDA = {\n                            amount: rawAmount,\n                            divisibility: 0,\n                            id: assetIdHex,\n                            amountIsRaw: true,\n                            sendWithNamespace: isSendWithNamespace\n                        };\n                        if (isSendWithNamespace) {\n                            let namespaceId = transferTxn.mosaics[y].id;\n                            newSDA.sendWithAlias = {\n                                idHex: namespaceId.toHex(),\n                                id: namespaceId.toDTO().id\n                            };\n                        }\n                        sdas.push(newSDA);\n                    }\n                    let namespaceIds = sdas.filter(sda => sda.sendWithNamespace).map(sda => _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].createNamespaceId(sda.sendWithAlias.id));\n                    let allAssetId = sdas.filter(sda => {\n                        return sda.amountIsRaw;\n                    }).map(sda => _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].createAssetId(sda.id));\n                    if (namespaceIds.length || allAssetId.length) {\n                        let namespacesNames = [];\n                        namespacesNames = yield chainAPI.namespaceAPI.getNamespacesName(namespaceIds);\n                        let assetsProperties = yield chainAPI.assetAPI.getMosaics(allAssetId);\n                        let aliasNames = yield chainAPI.assetAPI.getMosaicsNames(allAssetId);\n                        for (let x = 0; x < sdas.length; ++x) {\n                            let assetProperties = assetsProperties.filter(aliasName => aliasName.mosaicId.toHex() === sdas[x].id)[0];\n                            sdas[x].divisibility = assetProperties.divisibility;\n                            sdas[x].amount = DashboardService.convertToExactAmount(sdas[x].amount, assetProperties.divisibility);\n                            sdas[x].amountIsRaw = false;\n                            let mosaicNames = aliasNames.filter(aliaName => aliaName.mosaicId.toHex() === sdas[x].id)[0];\n                            let currentAliasNames = mosaicNames.names;\n                            sdas[x].currentAlias = currentAliasNames.map(currentAlias => {\n                                return { name: currentAlias.name, id: currentAlias.namespaceId.toDTO().id, idHex: currentAlias.namespaceId.toHex() };\n                            });\n                            if (sdas[x].sendWithAlias) {\n                                sdas[x].sendWithAlias.name = namespacesNames\n                                    .filter(nsName => nsName.namespaceId.toHex() === sdas[x].sendWithAlias.idHex)\n                                    .map(nsName => nsName.name)[0];\n                            }\n                        }\n                    }\n                }\n                txn.sda = sdas;\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedMixedTxns(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransferTransaction\"], formattedTxn);\n                let sdas = [];\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].TRANSFER) {\n                    let transferTxn = txns[i];\n                    txn.message = transferTxn.message.payload;\n                    txn.messageType = transferTxn.message.type;\n                    if (txn.messageType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MessageType\"].PlainMessage) {\n                        let newType = this.convertToSwapType(txn.message);\n                        if (newType) {\n                            txn.type = newType;\n                        }\n                    }\n                    switch (txn.messageType) {\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MessageType\"].PlainMessage:\n                            txn.messageTypeTitle = \"Plain Message\";\n                            break;\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MessageType\"].EncryptedMessage:\n                            txn.messageTypeTitle = \"Encrypted Message\";\n                            break;\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MessageType\"].HexadecimalMessage:\n                            txn.messageTypeTitle = \"Hexadecimal Message\";\n                            break;\n                    }\n                    let recipientIsNamespace = transferTxn.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"] ? true : false;\n                    if (transferTxn.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"]) {\n                        txn.recipientNamespaceId = transferTxn.recipient.toHex();\n                        let namespacesName = yield DashboardService.getNamespacesName([transferTxn.recipient]);\n                        txn.recipientNamespaceName = namespacesName[0].name;\n                    }\n                    let recipient = yield DashboardService.getRecipient(transferTxn, txn.block);\n                    txn.recipient = recipient.plain();\n                    txn.sender = transferTxn.signer.address.plain();\n                    txn.in_out = this.selectedAccount.address === txn.sender ? false : true;\n                    for (let y = 0; y < transferTxn.mosaics.length; ++y) {\n                        let rawAmount = transferTxn.mosaics[y].amount.compact();\n                        let actualAmount = rawAmount;\n                        let isSendWithNamespace = DashboardService.isNamespace(transferTxn.mosaics[y].id);\n                        let assetId = yield DashboardService.getResolvedAsset(transferTxn.mosaics[y].id, txn.block);\n                        let assetIdHex = assetId.toHex();\n                        if ([nativeTokenAssetId.value, nativeTokenNamespaceId.value].includes(assetIdHex)) {\n                            txn.amountTransfer = DashboardService.convertToExactNativeAmount(actualAmount);\n                            continue;\n                        }\n                        let newSDA = {\n                            amount: rawAmount,\n                            divisibility: 0,\n                            id: assetIdHex,\n                            amountIsRaw: true,\n                            sendWithNamespace: isSendWithNamespace\n                        };\n                        if (isSendWithNamespace) {\n                            let namespaceId = transferTxn.mosaics[y].id;\n                            newSDA.sendWithAlias = {\n                                idHex: namespaceId.toHex(),\n                                id: namespaceId.toDTO().id\n                            };\n                        }\n                        sdas.push(newSDA);\n                    }\n                    let namespaceIds = sdas.filter(sda => sda.sendWithNamespace).map(sda => _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].createNamespaceId(sda.sendWithAlias.id));\n                    let allAssetId = sdas.filter(sda => {\n                        return sda.amountIsRaw;\n                    }).map(sda => _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].createAssetId(sda.id));\n                    if (namespaceIds.length || allAssetId.length) {\n                        let namespacesNames = [];\n                        namespacesNames = yield chainAPI.namespaceAPI.getNamespacesName(namespaceIds);\n                        let assetsProperties = yield chainAPI.assetAPI.getMosaics(allAssetId);\n                        let aliasNames = yield chainAPI.assetAPI.getMosaicsNames(allAssetId);\n                        for (let x = 0; x < sdas.length; ++x) {\n                            let assetProperties = assetsProperties.filter(aliasName => aliasName.mosaicId.toHex() === sdas[x].id)[0];\n                            sdas[x].divisibility = assetProperties.divisibility;\n                            sdas[x].amount = DashboardService.convertToExactAmount(sdas[x].amount, assetProperties.divisibility);\n                            sdas[x].amountIsRaw = false;\n                            let mosaicNames = aliasNames.filter(aliaName => aliaName.mosaicId.toHex() === sdas[x].id)[0];\n                            let currentAliasNames = mosaicNames.names;\n                            sdas[x].currentAlias = currentAliasNames.map(currentAlias => {\n                                return { name: currentAlias.name, id: currentAlias.namespaceId.toDTO().id, idHex: currentAlias.namespaceId.toHex() };\n                            });\n                            if (sdas[x].sendWithAlias) {\n                                sdas[x].sendWithAlias.name = namespacesNames\n                                    .filter(nsName => nsName.namespaceId.toHex() === sdas[x].sendWithAlias.idHex)\n                                    .map(nsName => nsName.name)[0];\n                            }\n                        }\n                    }\n                }\n                txn.sda = sdas;\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //----------Account Transaction----------------------------------------------------------\n    formatUnconfirmedAccountTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedAccountTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_MULTISIG_ACCOUNT) {\n                    let modifyMultisigTxn = txns[i];\n                    txn.approvalDelta = modifyMultisigTxn.minApprovalDelta;\n                    txn.removalDelta = modifyMultisigTxn.minRemovalDelta;\n                    txn.addedCosigner = modifyMultisigTxn.modifications.filter(x => x.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MultisigCosignatoryModificationType\"].Add)\n                        .map(x => x.cosignatoryPublicAccount.publicKey);\n                    txn.removedCosigner = modifyMultisigTxn.modifications.filter(x => x.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MultisigCosignatoryModificationType\"].Remove)\n                        .map(x => x.cosignatoryPublicAccount.publicKey);\n                    try {\n                        let multisigInfo = yield chainAPI.accountAPI.getMultisigAccountInfo(modifyMultisigTxn.signer.address);\n                        if (multisigInfo) {\n                            txn.oldApprovalNumber = multisigInfo.minApproval;\n                            txn.oldRemovalNumber = multisigInfo.minRemoval;\n                        }\n                    }\n                    catch (error) {\n                        txn.oldApprovalNumber = 0;\n                        txn.oldRemovalNumber = 0;\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedAccountTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedAccountTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_MULTISIG_ACCOUNT) {\n                    let modifyMultisigTxn = txns[i];\n                    txn.approvalDelta = modifyMultisigTxn.minApprovalDelta;\n                    txn.removalDelta = modifyMultisigTxn.minRemovalDelta;\n                    txn.addedCosigner = modifyMultisigTxn.modifications.filter(x => x.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MultisigCosignatoryModificationType\"].Add)\n                        .map(x => x.cosignatoryPublicAccount.publicKey);\n                    txn.removedCosigner = modifyMultisigTxn.modifications.filter(x => x.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MultisigCosignatoryModificationType\"].Remove)\n                        .map(x => x.cosignatoryPublicAccount.publicKey);\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatPartialAccountTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialAccountTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_MULTISIG_ACCOUNT) {\n                    let modifyMultisigTxn = txns[i];\n                    txn.approvalDelta = modifyMultisigTxn.minApprovalDelta;\n                    txn.removalDelta = modifyMultisigTxn.minRemovalDelta;\n                    txn.addedCosigner = modifyMultisigTxn.modifications.filter(x => x.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MultisigCosignatoryModificationType\"].Add)\n                        .map(x => x.cosignatoryPublicAccount.publicKey);\n                    txn.removedCosigner = modifyMultisigTxn.modifications.filter(x => x.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MultisigCosignatoryModificationType\"].Remove)\n                        .map(x => x.cosignatoryPublicAccount.publicKey);\n                    try {\n                        let multisigInfo = yield chainAPI.accountAPI.getMultisigAccountInfo(modifyMultisigTxn.signer.address);\n                        if (multisigInfo) {\n                            txn.oldApprovalNumber = multisigInfo.minApproval;\n                            txn.oldRemovalNumber = multisigInfo.minRemoval;\n                        }\n                    }\n                    catch (error) {\n                        txn.oldApprovalNumber = 0;\n                        txn.oldRemovalNumber = 0;\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //------------------Alias Transaction--------------------------------------------------------------------\n    formatUnconfirmedAliasTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedAliasTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].ADDRESS_ALIAS) {\n                    let addressAliasTxn = txns[i];\n                    txn.address = addressAliasTxn.address.plain();\n                    txn.aliasType = addressAliasTxn.actionType;\n                    txn.aliasTypeName = addressAliasTxn.actionType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AliasActionType\"].Link ? \"Link\" : \"Unlink\";\n                    let nsId = addressAliasTxn.namespaceId;\n                    try {\n                        let nsName = yield DashboardService.getNamespacesName([nsId]);\n                        txn.aliasName = nsName[0].name;\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_ALIAS) {\n                    let assetAliasTxn = txns[i];\n                    txn.assetId = assetAliasTxn.mosaicId.toHex();\n                    txn.aliasType = assetAliasTxn.actionType;\n                    txn.aliasTypeName = assetAliasTxn.actionType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AliasActionType\"].Link ? \"Link\" : \"Unlink\";\n                    let nsId = assetAliasTxn.namespaceId;\n                    try {\n                        let nsName = yield DashboardService.getNamespacesName([nsId]);\n                        txn.aliasName = nsName[0].name;\n                    }\n                    catch (error) {\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedAliasTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedAliasTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].ADDRESS_ALIAS) {\n                    let addressAliasTxn = txns[i];\n                    txn.address = addressAliasTxn.address.plain();\n                    txn.aliasType = addressAliasTxn.actionType;\n                    txn.aliasTypeName = addressAliasTxn.actionType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AliasActionType\"].Link ? \"Link\" : \"Unlink\";\n                    let nsId = addressAliasTxn.namespaceId;\n                    try {\n                        let nsName = yield DashboardService.getNamespacesName([nsId]);\n                        txn.aliasName = nsName[0].name;\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_ALIAS) {\n                    let assetAliasTxn = txns[i];\n                    txn.assetId = assetAliasTxn.mosaicId.toHex();\n                    txn.aliasType = assetAliasTxn.actionType;\n                    txn.aliasTypeName = assetAliasTxn.actionType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AliasActionType\"].Link ? \"Link\" : \"Unlink\";\n                    let nsId = assetAliasTxn.namespaceId;\n                    try {\n                        let nsName = yield DashboardService.getNamespacesName([nsId]);\n                        txn.aliasName = nsName[0].name;\n                    }\n                    catch (error) {\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatPartialAliasTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialAliasTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].ADDRESS_ALIAS) {\n                    let addressAliasTxn = txns[i];\n                    txn.address = addressAliasTxn.address.plain();\n                    txn.aliasType = addressAliasTxn.actionType;\n                    txn.aliasTypeName = addressAliasTxn.actionType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AliasActionType\"].Link ? \"Link\" : \"Unlink\";\n                    let nsId = addressAliasTxn.namespaceId;\n                    try {\n                        let nsName = yield DashboardService.getNamespacesName([nsId]);\n                        txn.aliasName = nsName[0].name;\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_ALIAS) {\n                    let assetAliasTxn = txns[i];\n                    txn.assetId = assetAliasTxn.mosaicId.toHex();\n                    txn.aliasType = assetAliasTxn.actionType;\n                    txn.aliasTypeName = assetAliasTxn.actionType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AliasActionType\"].Link ? \"Link\" : \"Unlink\";\n                    let nsId = assetAliasTxn.namespaceId;\n                    try {\n                        let nsName = yield DashboardService.getNamespacesName([nsId]);\n                        txn.aliasName = nsName[0].name;\n                    }\n                    catch (error) {\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //-------------Metadata Txn-----------------------------------------------------------\n    formatUnconfirmedMetadataTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedMetadataTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_METADATA_V2) {\n                    let assetMetadataTxn = txns[i];\n                    let assetId = assetMetadataTxn.targetMosaicId.toHex();\n                    txn.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataType\"].MOSAIC;\n                    txn.metadataTypeName = \"Asset\";\n                    txn.scopedMetadataKey = assetMetadataTxn.scopedMetadataKey.toHex();\n                    txn.targetId = assetId;\n                    txn.targetPublicKey = assetMetadataTxn.targetPublicKey.publicKey;\n                    txn.sizeChanged = assetMetadataTxn.valueSizeDelta;\n                    txn.valueChange = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Convert\"].uint8ToHex(assetMetadataTxn.valueDifferences);\n                    try {\n                        let assetName = yield DashboardService.getAssetName(assetId);\n                        if (assetName.names.length) {\n                            txn.targetIdName = assetName.names[0].name;\n                        }\n                        let assetMetadataEntry = yield DashboardService.getAssetMetadata(assetMetadataTxn.targetMosaicId, assetMetadataTxn.scopedMetadataKey);\n                        if (assetMetadataEntry) {\n                            txn.oldValue = assetMetadataEntry.value;\n                            txn.newValue = DashboardService.applyValueChange(txn.oldValue, txn.valueChange, txn.sizeChanged);\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].NAMESPACE_METADATA_V2) {\n                    let namespaceMetadataTxn = txns[i];\n                    let nsId = namespaceMetadataTxn.targetNamespaceId.toHex();\n                    txn.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataType\"].NAMESPACE;\n                    txn.metadataTypeName = \"Namespace\";\n                    txn.scopedMetadataKey = namespaceMetadataTxn.scopedMetadataKey.toHex();\n                    txn.targetId = nsId;\n                    txn.targetPublicKey = namespaceMetadataTxn.targetPublicKey.publicKey;\n                    txn.sizeChanged = namespaceMetadataTxn.valueSizeDelta;\n                    txn.valueChange = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Convert\"].uint8ToHex(namespaceMetadataTxn.valueDifferences);\n                    try {\n                        let nsName = yield DashboardService.getNamespacesName([tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"].createFromEncoded(nsId)]);\n                        if (nsName.length) {\n                            txn.targetIdName = nsName[0].name;\n                        }\n                        let nsMetadataEntry = yield DashboardService.getNamespaceMetadata(namespaceMetadataTxn.targetNamespaceId, namespaceMetadataTxn.scopedMetadataKey);\n                        if (nsMetadataEntry) {\n                            txn.oldValue = nsMetadataEntry.value;\n                            txn.newValue = DashboardService.applyValueChange(txn.oldValue, txn.valueChange, txn.sizeChanged);\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].ACCOUNT_METADATA_V2) {\n                    let accountMetadataTxn = txns[i];\n                    txn.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataType\"].ACCOUNT;\n                    txn.metadataTypeName = \"Account\";\n                    txn.scopedMetadataKey = accountMetadataTxn.scopedMetadataKey.toHex();\n                    txn.targetPublicKey = accountMetadataTxn.targetPublicKey.publicKey;\n                    txn.sizeChanged = accountMetadataTxn.valueSizeDelta;\n                    txn.valueChange = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Convert\"].uint8ToHex(accountMetadataTxn.valueDifferences);\n                    try {\n                        let nsMetadataEntry = yield DashboardService.getAccountMetadata(accountMetadataTxn.targetPublicKey, accountMetadataTxn.scopedMetadataKey);\n                        if (nsMetadataEntry) {\n                            txn.oldValue = nsMetadataEntry.value;\n                            txn.newValue = DashboardService.applyValueChange(txn.oldValue, txn.valueChange, txn.sizeChanged);\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedMetadataTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedMetadataTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_METADATA_V2) {\n                    let assetMetadataTxn = txns[i];\n                    let assetId = assetMetadataTxn.targetMosaicId.toHex();\n                    txn.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataType\"].MOSAIC;\n                    txn.metadataTypeName = \"Asset\";\n                    txn.scopedMetadataKey = assetMetadataTxn.scopedMetadataKey.toHex();\n                    txn.targetId = assetId;\n                    txn.targetPublicKey = assetMetadataTxn.targetPublicKey.publicKey;\n                    txn.sizeChanged = assetMetadataTxn.valueSizeDelta;\n                    try {\n                        let assetName = yield DashboardService.getAssetName(assetId);\n                        if (assetName.names.length) {\n                            txn.targetIdName = assetName.names[0].name;\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].NAMESPACE_METADATA_V2) {\n                    let namespaceMetadataTxn = txns[i];\n                    let nsId = namespaceMetadataTxn.targetNamespaceId.toHex();\n                    txn.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataType\"].NAMESPACE;\n                    txn.metadataTypeName = \"Namespace\";\n                    txn.scopedMetadataKey = namespaceMetadataTxn.scopedMetadataKey.toHex();\n                    txn.targetId = nsId;\n                    txn.targetPublicKey = namespaceMetadataTxn.targetPublicKey.publicKey;\n                    txn.sizeChanged = namespaceMetadataTxn.valueSizeDelta;\n                    try {\n                        let nsName = yield DashboardService.getNamespacesName([tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"].createFromEncoded(nsId)]);\n                        if (nsName.length) {\n                            txn.targetIdName = nsName[0].name;\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].ACCOUNT_METADATA_V2) {\n                    let accountMetadataTxn = txns[i];\n                    txn.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataType\"].ACCOUNT;\n                    txn.metadataTypeName = \"Account\";\n                    txn.scopedMetadataKey = accountMetadataTxn.scopedMetadataKey.toHex();\n                    txn.targetPublicKey = accountMetadataTxn.targetPublicKey.publicKey;\n                    txn.sizeChanged = accountMetadataTxn.valueSizeDelta;\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatPartialMetadataTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialMetadataTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_METADATA_V2) {\n                    let assetMetadataTxn = txns[i];\n                    let assetId = assetMetadataTxn.targetMosaicId.toHex();\n                    txn.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataType\"].MOSAIC;\n                    txn.metadataTypeName = \"Asset\";\n                    txn.scopedMetadataKey = assetMetadataTxn.scopedMetadataKey.toHex();\n                    txn.targetId = assetId;\n                    txn.targetPublicKey = assetMetadataTxn.targetPublicKey.publicKey;\n                    txn.sizeChanged = assetMetadataTxn.valueSizeDelta;\n                    txn.valueChange = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Convert\"].uint8ToHex(assetMetadataTxn.valueDifferences);\n                    try {\n                        let assetName = yield DashboardService.getAssetName(assetId);\n                        if (assetName.names.length) {\n                            txn.targetIdName = assetName.names[0].name;\n                        }\n                        let assetMetadataEntry = yield DashboardService.getAssetMetadata(assetMetadataTxn.targetMosaicId, assetMetadataTxn.scopedMetadataKey);\n                        if (assetMetadataEntry) {\n                            txn.oldValue = assetMetadataEntry.value;\n                            txn.newValue = DashboardService.applyValueChange(txn.oldValue, txn.valueChange, txn.sizeChanged);\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].NAMESPACE_METADATA_V2) {\n                    let namespaceMetadataTxn = txns[i];\n                    let nsId = namespaceMetadataTxn.targetNamespaceId.toHex();\n                    txn.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataType\"].NAMESPACE;\n                    txn.metadataTypeName = \"Namespace\";\n                    txn.scopedMetadataKey = namespaceMetadataTxn.scopedMetadataKey.toHex();\n                    txn.targetId = nsId;\n                    txn.targetPublicKey = namespaceMetadataTxn.targetPublicKey.publicKey;\n                    txn.sizeChanged = namespaceMetadataTxn.valueSizeDelta;\n                    txn.valueChange = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Convert\"].uint8ToHex(namespaceMetadataTxn.valueDifferences);\n                    try {\n                        let nsName = yield DashboardService.getNamespacesName([tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"].createFromEncoded(nsId)]);\n                        if (nsName.length) {\n                            txn.targetIdName = nsName[0].name;\n                        }\n                        let nsMetadataEntry = yield DashboardService.getNamespaceMetadata(namespaceMetadataTxn.targetNamespaceId, namespaceMetadataTxn.scopedMetadataKey);\n                        if (nsMetadataEntry) {\n                            txn.oldValue = nsMetadataEntry.value;\n                            txn.newValue = DashboardService.applyValueChange(txn.oldValue, txn.valueChange, txn.sizeChanged);\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].ACCOUNT_METADATA_V2) {\n                    let accountMetadataTxn = txns[i];\n                    txn.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataType\"].ACCOUNT;\n                    txn.metadataTypeName = \"Account\";\n                    txn.scopedMetadataKey = accountMetadataTxn.scopedMetadataKey.toHex();\n                    txn.targetPublicKey = accountMetadataTxn.targetPublicKey.publicKey;\n                    txn.sizeChanged = accountMetadataTxn.valueSizeDelta;\n                    txn.valueChange = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Convert\"].uint8ToHex(accountMetadataTxn.valueDifferences);\n                    try {\n                        let nsMetadataEntry = yield DashboardService.getAccountMetadata(accountMetadataTxn.targetPublicKey, accountMetadataTxn.scopedMetadataKey);\n                        if (nsMetadataEntry) {\n                            txn.oldValue = nsMetadataEntry.value;\n                            txn.newValue = DashboardService.applyValueChange(txn.oldValue, txn.valueChange, txn.sizeChanged);\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //-------------Aggregate Txn-----------------------------------------------------------\n    formatUnconfirmedAggregateTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedAggregateTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].AGGREGATE_BONDED || txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].AGGREGATE_COMPLETE) {\n                    let aggregateTxn = yield this.autoFindAggregateTransaction(txn.hash);\n                    txn.aggregateLength = aggregateTxn.innerTransactions.length;\n                    for (let x = 0; x < aggregateTxn.innerTransactions.length; ++x) {\n                        let txnType = aggregateTxn.innerTransactions[x].type;\n                        let listFound = txn.txnList.find(txn => txn.type === txnType);\n                        if (listFound) {\n                            listFound.total += 1;\n                        }\n                        else {\n                            let txnList = {\n                                type: txnType,\n                                name: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(txnType),\n                                total: 1\n                            };\n                            txn.txnList.push(txnList);\n                        }\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedAggregateTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedAggregateTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].AGGREGATE_BONDED || txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].AGGREGATE_COMPLETE) {\n                    let aggregateTxn = yield this.autoFindAggregateTransaction(txn.hash);\n                    txn.aggregateLength = aggregateTxn.innerTransactions.length;\n                    for (let x = 0; x < aggregateTxn.innerTransactions.length; ++x) {\n                        let txnType = aggregateTxn.innerTransactions[x].type;\n                        let listFound = txn.txnList.find(txn => txn.type === txnType);\n                        if (listFound) {\n                            listFound.total += 1;\n                        }\n                        else {\n                            let txnList = {\n                                type: txnType,\n                                name: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(txnType),\n                                total: 1\n                            };\n                            txn.txnList.push(txnList);\n                        }\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatPartialAggregateTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialAggregateTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].AGGREGATE_BONDED || txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].AGGREGATE_COMPLETE) {\n                    let aggregateTxn = yield this.autoFindAggregateTransaction(txn.hash);\n                    txn.aggregateLength = aggregateTxn.innerTransactions.length;\n                    for (let x = 0; x < aggregateTxn.innerTransactions.length; ++x) {\n                        let txnType = aggregateTxn.innerTransactions[x].type;\n                        let listFound = txn.txnList.find(txn => txn.type === txnType);\n                        if (listFound) {\n                            listFound.total += 1;\n                        }\n                        else {\n                            let txnList = {\n                                type: txnType,\n                                name: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(txnType),\n                                total: 1\n                            };\n                            txn.txnList.push(txnList);\n                        }\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //-------------Asset Txn-----------------------------------------------------------\n    formatUnconfirmedAssetTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedAssetTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_DEFINITION) {\n                    let assetDefinitionTxn = txns[i];\n                    txn.assetId = assetDefinitionTxn.mosaicId.toHex();\n                    txn.divisibility = assetDefinitionTxn.mosaicProperties.divisibility;\n                    txn.duration = assetDefinitionTxn.mosaicProperties.duration ?\n                        assetDefinitionTxn.mosaicProperties.duration.compact() : undefined;\n                    txn.transferable = assetDefinitionTxn.mosaicProperties.transferable;\n                    txn.supplyMutable = assetDefinitionTxn.mosaicProperties.supplyMutable;\n                    txn.nonce = assetDefinitionTxn.mosaicNonce.toNumber();\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_SUPPLY_CHANGE) {\n                    let assetSupplyChangeTxn = txns[i];\n                    let assetId = assetSupplyChangeTxn.mosaicId.toHex();\n                    txn.assetId = assetId;\n                    txn.supplyDelta = assetSupplyChangeTxn.delta.compact();\n                    txn.supplyDeltaIsRaw = true;\n                    if (assetSupplyChangeTxn.direction === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MosaicSupplyType\"].Decrease) {\n                        txn.supplyDelta = -txn.supplyDelta;\n                    }\n                    try {\n                        let assetInfo = yield DashboardService.getAssetInfo(assetId);\n                        txn.supplyDelta = DashboardService.convertToExactAmount(txn.supplyDelta, assetInfo.divisibility);\n                        txn.supplyDeltaIsRaw = false;\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_MOSAIC_LEVY) {\n                    let assetModifyLevyTxn = txns[i];\n                    let assetId = assetModifyLevyTxn.mosaicId.toHex();\n                    let levyAssetId = assetModifyLevyTxn.mosaicLevy.mosaicId.toHex();\n                    let levyAmount = assetModifyLevyTxn.mosaicLevy.fee.compact();\n                    txn.assetId = assetId;\n                    txn.levyAssetId = levyAssetId;\n                    txn.levyAssetAmount = levyAmount;\n                    txn.levyAssetAmountIsRaw = true;\n                    txn.levyType = assetModifyLevyTxn.mosaicLevy.type;\n                    txn.levyRecipient = assetModifyLevyTxn.mosaicLevy.recipient.plain();\n                    try {\n                        let assetName = yield DashboardService.getAssetName(assetId);\n                        if (assetName.names.length) {\n                            txn.namespaceName = assetName.names[0].name;\n                        }\n                        let levyAssetInfo = yield DashboardService.getAssetInfo(levyAssetId);\n                        txn.levyAssetAmount = DashboardService.convertToExactAmount(levyAmount, levyAssetInfo.divisibility);\n                        txn.levyAssetAmountIsRaw = false;\n                        let levyAssetName = yield DashboardService.getAssetName(levyAssetId);\n                        if (levyAssetName.names.length) {\n                            txn.levyAssetName = levyAssetName.names[0].name;\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].REMOVE_MOSAIC_LEVY) {\n                    let assetRemoveLevyTxn = txns[i];\n                    let assetId = assetRemoveLevyTxn.mosaicId.toHex();\n                    txn.assetId = assetId;\n                    try {\n                        let assetName = yield DashboardService.getAssetName(assetId);\n                        if (assetName.names.length) {\n                            txn.namespaceName = assetName.names[0].name;\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedAssetTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedAssetTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_DEFINITION) {\n                    let assetDefinitionTxn = txns[i];\n                    txn.assetId = assetDefinitionTxn.mosaicId.toHex();\n                    txn.divisibility = assetDefinitionTxn.mosaicProperties.divisibility;\n                    txn.duration = assetDefinitionTxn.mosaicProperties.duration ?\n                        assetDefinitionTxn.mosaicProperties.duration.compact() : undefined;\n                    txn.transferable = assetDefinitionTxn.mosaicProperties.transferable;\n                    txn.supplyMutable = assetDefinitionTxn.mosaicProperties.supplyMutable;\n                    txn.nonce = assetDefinitionTxn.mosaicNonce.toNumber();\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_SUPPLY_CHANGE) {\n                    let assetSupplyChangeTxn = txns[i];\n                    let assetId = assetSupplyChangeTxn.mosaicId.toHex();\n                    txn.assetId = assetId;\n                    txn.supplyDelta = assetSupplyChangeTxn.delta.compact();\n                    txn.supplyDeltaIsRaw = true;\n                    if (assetSupplyChangeTxn.direction === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MosaicSupplyType\"].Decrease) {\n                        txn.supplyDelta = -txn.supplyDelta;\n                    }\n                    try {\n                        let assetInfo = yield DashboardService.getAssetInfo(assetId);\n                        txn.supplyDelta = DashboardService.convertToExactAmount(txn.supplyDelta, assetInfo.divisibility);\n                        txn.supplyDeltaIsRaw = false;\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_MOSAIC_LEVY) {\n                    let assetModifyLevyTxn = txns[i];\n                    let assetId = assetModifyLevyTxn.mosaicId.toHex();\n                    let levyAssetId = assetModifyLevyTxn.mosaicLevy.mosaicId.toHex();\n                    let levyAmount = assetModifyLevyTxn.mosaicLevy.fee.compact();\n                    txn.assetId = assetId;\n                    txn.levyAssetId = levyAssetId;\n                    txn.levyAssetAmount = levyAmount;\n                    txn.levyAssetAmountIsRaw = true;\n                    txn.levyType = assetModifyLevyTxn.mosaicLevy.type;\n                    txn.levyRecipient = assetModifyLevyTxn.mosaicLevy.recipient.plain();\n                    try {\n                        let assetName = yield DashboardService.getAssetName(assetId);\n                        if (assetName.names.length) {\n                            txn.namespaceName = assetName.names[0].name;\n                        }\n                        let levyAssetInfo = yield DashboardService.getAssetInfo(levyAssetId);\n                        txn.levyAssetAmount = DashboardService.convertToExactAmount(levyAmount, levyAssetInfo.divisibility);\n                        txn.levyAssetAmountIsRaw = false;\n                        let levyAssetName = yield DashboardService.getAssetName(levyAssetId);\n                        if (levyAssetName.names.length) {\n                            txn.levyAssetName = levyAssetName.names[0].name;\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].REMOVE_MOSAIC_LEVY) {\n                    let assetRemoveLevyTxn = txns[i];\n                    let assetId = assetRemoveLevyTxn.mosaicId.toHex();\n                    txn.assetId = assetId;\n                    try {\n                        let assetName = yield DashboardService.getAssetName(assetId);\n                        if (assetName.names.length) {\n                            txn.namespaceName = assetName.names[0].name;\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatPartialAssetTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialAssetTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_DEFINITION) {\n                    let assetDefinitionTxn = txns[i];\n                    txn.assetId = assetDefinitionTxn.mosaicId.toHex();\n                    txn.divisibility = assetDefinitionTxn.mosaicProperties.divisibility;\n                    txn.duration = assetDefinitionTxn.mosaicProperties.duration ?\n                        assetDefinitionTxn.mosaicProperties.duration.compact() : undefined;\n                    txn.transferable = assetDefinitionTxn.mosaicProperties.transferable;\n                    txn.supplyMutable = assetDefinitionTxn.mosaicProperties.supplyMutable;\n                    txn.nonce = assetDefinitionTxn.mosaicNonce.toNumber();\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_SUPPLY_CHANGE) {\n                    let assetSupplyChangeTxn = txns[i];\n                    let assetId = assetSupplyChangeTxn.mosaicId.toHex();\n                    txn.assetId = assetId;\n                    txn.supplyDelta = assetSupplyChangeTxn.delta.compact();\n                    txn.supplyDeltaIsRaw = true;\n                    if (assetSupplyChangeTxn.direction === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MosaicSupplyType\"].Decrease) {\n                        txn.supplyDelta = -txn.supplyDelta;\n                    }\n                    try {\n                        let assetInfo = yield DashboardService.getAssetInfo(assetId);\n                        txn.supplyDelta = DashboardService.convertToExactAmount(txn.supplyDelta, assetInfo.divisibility);\n                        txn.supplyDeltaIsRaw = false;\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_MOSAIC_LEVY) {\n                    let assetModifyLevyTxn = txns[i];\n                    let assetId = assetModifyLevyTxn.mosaicId.toHex();\n                    let levyAssetId = assetModifyLevyTxn.mosaicLevy.mosaicId.toHex();\n                    let levyAmount = assetModifyLevyTxn.mosaicLevy.fee.compact();\n                    txn.assetId = assetId;\n                    txn.levyAssetId = levyAssetId;\n                    txn.levyAssetAmount = levyAmount;\n                    txn.levyAssetAmountIsRaw = true;\n                    txn.levyType = assetModifyLevyTxn.mosaicLevy.type;\n                    txn.levyRecipient = assetModifyLevyTxn.mosaicLevy.recipient.plain();\n                    try {\n                        let assetName = yield DashboardService.getAssetName(assetId);\n                        if (assetName.names.length) {\n                            txn.namespaceName = assetName.names[0].name;\n                        }\n                        let levyAssetInfo = yield DashboardService.getAssetInfo(levyAssetId);\n                        txn.levyAssetAmount = DashboardService.convertToExactAmount(levyAmount, levyAssetInfo.divisibility);\n                        txn.levyAssetAmountIsRaw = false;\n                        let levyAssetName = yield DashboardService.getAssetName(levyAssetId);\n                        if (levyAssetName.names.length) {\n                            txn.levyAssetName = levyAssetName.names[0].name;\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].REMOVE_MOSAIC_LEVY) {\n                    let assetRemoveLevyTxn = txns[i];\n                    let assetId = assetRemoveLevyTxn.mosaicId.toHex();\n                    txn.assetId = assetId;\n                    try {\n                        let assetName = yield DashboardService.getAssetName(assetId);\n                        if (assetName.names.length) {\n                            txn.namespaceName = assetName.names[0].name;\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //-------------Chain Txn-----------------------------------------------------------\n    formatUnconfirmedChainTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedChainTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].CHAIN_CONFIGURE) {\n                    let chainConfigureTxn = txns[i];\n                    txn.applyHeightDelta = chainConfigureTxn.applyHeightDelta.compact();\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].CHAIN_UPGRADE) {\n                    let chainUpgradeTxn = txns[i];\n                    txn.upgradePeriod = chainUpgradeTxn.upgradePeriod.compact();\n                    txn.newVersion = chainUpgradeTxn.newBlockchainVersion.toHex();\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedChainTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedChainTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].CHAIN_CONFIGURE) {\n                    let chainConfigureTxn = txns[i];\n                    txn.applyHeightDelta = chainConfigureTxn.applyHeightDelta.compact();\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].CHAIN_UPGRADE) {\n                    let chainUpgradeTxn = txns[i];\n                    txn.upgradePeriod = chainUpgradeTxn.upgradePeriod.compact();\n                    txn.newVersion = chainUpgradeTxn.newBlockchainVersion.toHex();\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatPartialChainTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialChainTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].CHAIN_CONFIGURE) {\n                    let chainConfigureTxn = txns[i];\n                    txn.applyHeightDelta = chainConfigureTxn.applyHeightDelta.compact();\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].CHAIN_UPGRADE) {\n                    let chainUpgradeTxn = txns[i];\n                    txn.upgradePeriod = chainUpgradeTxn.upgradePeriod.compact();\n                    txn.newVersion = chainUpgradeTxn.newBlockchainVersion.toHex();\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //-------------Exchange Txn-----------------------------------------------------------\n    formatUnconfirmedExchangeTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedExchangeTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].EXCHANGE_OFFER) {\n                    txn.isTakingOffer = true;\n                    let exchangeOfferTxn = txns[i];\n                    for (let i = 0; i < exchangeOfferTxn.offers.length; ++i) {\n                        let tempExchangeOffer = exchangeOfferTxn.offers[i];\n                        let assetId = tempExchangeOffer.mosaicId.toHex();\n                        let amount = tempExchangeOffer.mosaicAmount.compact();\n                        let newTxnExchangeOffer = {\n                            amount: amount,\n                            amountIsRaw: true,\n                            assetId: assetId,\n                            cost: DashboardService.convertToExactNativeAmount(tempExchangeOffer.cost.compact()),\n                            owner: tempExchangeOffer.owner.publicKey,\n                            type: tempExchangeOffer.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"ExchangeOfferType\"].SELL_OFFER ? \"Sell\" : \"Buy\",\n                        };\n                        try {\n                            let assetInfo = yield DashboardService.getAssetInfo(assetId);\n                            newTxnExchangeOffer.amountIsRaw = false;\n                            newTxnExchangeOffer.amount = DashboardService.convertToExactAmount(amount, assetInfo.divisibility);\n                            let assetName = yield DashboardService.getAssetName(assetId);\n                            if (assetName.names.length) {\n                                newTxnExchangeOffer.assetNamespace = assetName.names[0].name;\n                            }\n                        }\n                        catch (error) {\n                        }\n                        txn.exchangeOffers.push(newTxnExchangeOffer);\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].ADD_EXCHANGE_OFFER) {\n                    let addExchangeOfferTxn = txns[i];\n                    for (let i = 0; i < addExchangeOfferTxn.offers.length; ++i) {\n                        let tempExchangeOffer = addExchangeOfferTxn.offers[i];\n                        let assetId = tempExchangeOffer.mosaicId.toHex();\n                        let amount = tempExchangeOffer.mosaicAmount.compact();\n                        let newTxnExchangeOffer = {\n                            amount: amount,\n                            amountIsRaw: true,\n                            assetId: assetId,\n                            cost: DashboardService.convertToExactNativeAmount(tempExchangeOffer.cost.compact()),\n                            duration: tempExchangeOffer.duration.compact(),\n                            type: tempExchangeOffer.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"ExchangeOfferType\"].SELL_OFFER ? \"Sell\" : \"Buy\",\n                        };\n                        try {\n                            let assetInfo = yield DashboardService.getAssetInfo(assetId);\n                            newTxnExchangeOffer.amountIsRaw = false;\n                            newTxnExchangeOffer.amount = DashboardService.convertToExactAmount(amount, assetInfo.divisibility);\n                            let assetName = yield DashboardService.getAssetName(assetId);\n                            if (assetName.names.length) {\n                                newTxnExchangeOffer.assetNamespace = assetName.names[0].name;\n                            }\n                        }\n                        catch (error) {\n                        }\n                        txn.exchangeOffers.push(newTxnExchangeOffer);\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].REMOVE_EXCHANGE_OFFER) {\n                    let removeExchangeOfferTxn = txns[i];\n                    for (let i = 0; i < removeExchangeOfferTxn.offers.length; ++i) {\n                        let tempExchangeOffer = removeExchangeOfferTxn.offers[i];\n                        let assetId = tempExchangeOffer.mosaicId.toHex();\n                        let newTxnExchangeOffer = {\n                            assetId: assetId,\n                            type: tempExchangeOffer.offerType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"ExchangeOfferType\"].SELL_OFFER ? \"Sell\" : \"Buy\",\n                        };\n                        try {\n                            let assetName = yield DashboardService.getAssetName(assetId);\n                            if (assetName.names.length) {\n                                newTxnExchangeOffer.assetNamespace = assetName.names[0].name;\n                            }\n                        }\n                        catch (error) {\n                        }\n                        txn.exchangeOffers.push(newTxnExchangeOffer);\n                    }\n                }\n                let allBuyOffers = txn.exchangeOffers.filter(x => x.type === \"Buy\");\n                let allSellOffers = txn.exchangeOffers.filter(x => x.type === \"Sell\");\n                txn.exchangeOffers = txn.isTakingOffer ? allSellOffers.concat(allBuyOffers) : allBuyOffers.concat(allSellOffers);\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedExchangeTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedExchangeTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].EXCHANGE_OFFER) {\n                    txn.isTakingOffer = true;\n                    let exchangeOfferTxn = txns[i];\n                    for (let i = 0; i < exchangeOfferTxn.offers.length; ++i) {\n                        let tempExchangeOffer = exchangeOfferTxn.offers[i];\n                        let assetId = tempExchangeOffer.mosaicId.toHex();\n                        let amount = tempExchangeOffer.mosaicAmount.compact();\n                        let newTxnExchangeOffer = {\n                            amount: amount,\n                            amountIsRaw: true,\n                            assetId: assetId,\n                            cost: DashboardService.convertToExactNativeAmount(tempExchangeOffer.cost.compact()),\n                            owner: tempExchangeOffer.owner.publicKey,\n                            type: tempExchangeOffer.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"ExchangeOfferType\"].SELL_OFFER ? \"Sell\" : \"Buy\",\n                        };\n                        try {\n                            let assetInfo = yield DashboardService.getAssetInfo(assetId);\n                            newTxnExchangeOffer.amountIsRaw = false;\n                            newTxnExchangeOffer.amount = DashboardService.convertToExactAmount(amount, assetInfo.divisibility);\n                            let assetName = yield DashboardService.getAssetName(assetId);\n                            if (assetName.names.length) {\n                                newTxnExchangeOffer.assetNamespace = assetName.names[0].name;\n                            }\n                        }\n                        catch (error) {\n                        }\n                        txn.exchangeOffers.push(newTxnExchangeOffer);\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].ADD_EXCHANGE_OFFER) {\n                    let addExchangeOfferTxn = txns[i];\n                    for (let i = 0; i < addExchangeOfferTxn.offers.length; ++i) {\n                        let tempExchangeOffer = addExchangeOfferTxn.offers[i];\n                        let assetId = tempExchangeOffer.mosaicId.toHex();\n                        let amount = tempExchangeOffer.mosaicAmount.compact();\n                        let newTxnExchangeOffer = {\n                            amount: amount,\n                            amountIsRaw: true,\n                            assetId: assetId,\n                            cost: DashboardService.convertToExactNativeAmount(tempExchangeOffer.cost.compact()),\n                            duration: tempExchangeOffer.duration.compact(),\n                            type: tempExchangeOffer.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"ExchangeOfferType\"].SELL_OFFER ? \"Sell\" : \"Buy\",\n                        };\n                        try {\n                            let assetInfo = yield DashboardService.getAssetInfo(assetId);\n                            newTxnExchangeOffer.amountIsRaw = false;\n                            newTxnExchangeOffer.amount = DashboardService.convertToExactAmount(amount, assetInfo.divisibility);\n                            let assetName = yield DashboardService.getAssetName(assetId);\n                            if (assetName.names.length) {\n                                newTxnExchangeOffer.assetNamespace = assetName.names[0].name;\n                            }\n                        }\n                        catch (error) {\n                        }\n                        txn.exchangeOffers.push(newTxnExchangeOffer);\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].REMOVE_EXCHANGE_OFFER) {\n                    let removeExchangeOfferTxn = txns[i];\n                    for (let i = 0; i < removeExchangeOfferTxn.offers.length; ++i) {\n                        let tempExchangeOffer = removeExchangeOfferTxn.offers[i];\n                        let assetId = tempExchangeOffer.mosaicId.toHex();\n                        let newTxnExchangeOffer = {\n                            assetId: assetId,\n                            type: tempExchangeOffer.offerType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"ExchangeOfferType\"].SELL_OFFER ? \"Sell\" : \"Buy\",\n                        };\n                        try {\n                            let assetName = yield DashboardService.getAssetName(assetId);\n                            if (assetName.names.length) {\n                                newTxnExchangeOffer.assetNamespace = assetName.names[0].name;\n                            }\n                        }\n                        catch (error) {\n                        }\n                        txn.exchangeOffers.push(newTxnExchangeOffer);\n                    }\n                }\n                let allBuyOffers = txn.exchangeOffers.filter(x => x.type === \"Buy\");\n                let allSellOffers = txn.exchangeOffers.filter(x => x.type === \"Sell\");\n                txn.exchangeOffers = txn.isTakingOffer ? allSellOffers.concat(allBuyOffers) : allBuyOffers.concat(allSellOffers);\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatPartialExchangeTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialExchangeTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].EXCHANGE_OFFER) {\n                    txn.isTakingOffer = true;\n                    let exchangeOfferTxn = txns[i];\n                    for (let i = 0; i < exchangeOfferTxn.offers.length; ++i) {\n                        let tempExchangeOffer = exchangeOfferTxn.offers[i];\n                        let assetId = tempExchangeOffer.mosaicId.toHex();\n                        let amount = tempExchangeOffer.mosaicAmount.compact();\n                        let newTxnExchangeOffer = {\n                            amount: amount,\n                            amountIsRaw: true,\n                            assetId: assetId,\n                            cost: DashboardService.convertToExactNativeAmount(tempExchangeOffer.cost.compact()),\n                            owner: tempExchangeOffer.owner.publicKey,\n                            type: tempExchangeOffer.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"ExchangeOfferType\"].SELL_OFFER ? \"Sell\" : \"Buy\",\n                        };\n                        try {\n                            let assetInfo = yield DashboardService.getAssetInfo(assetId);\n                            newTxnExchangeOffer.amountIsRaw = false;\n                            newTxnExchangeOffer.amount = DashboardService.convertToExactAmount(amount, assetInfo.divisibility);\n                            let assetName = yield DashboardService.getAssetName(assetId);\n                            if (assetName.names.length) {\n                                newTxnExchangeOffer.assetNamespace = assetName.names[0].name;\n                            }\n                        }\n                        catch (error) {\n                        }\n                        txn.exchangeOffers.push(newTxnExchangeOffer);\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].ADD_EXCHANGE_OFFER) {\n                    let addExchangeOfferTxn = txns[i];\n                    for (let i = 0; i < addExchangeOfferTxn.offers.length; ++i) {\n                        let tempExchangeOffer = addExchangeOfferTxn.offers[i];\n                        let assetId = tempExchangeOffer.mosaicId.toHex();\n                        let amount = tempExchangeOffer.mosaicAmount.compact();\n                        let newTxnExchangeOffer = {\n                            amount: amount,\n                            amountIsRaw: true,\n                            assetId: assetId,\n                            cost: DashboardService.convertToExactNativeAmount(tempExchangeOffer.cost.compact()),\n                            duration: tempExchangeOffer.duration.compact(),\n                            type: tempExchangeOffer.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"ExchangeOfferType\"].SELL_OFFER ? \"Sell\" : \"Buy\",\n                        };\n                        try {\n                            let assetInfo = yield DashboardService.getAssetInfo(assetId);\n                            newTxnExchangeOffer.amountIsRaw = false;\n                            newTxnExchangeOffer.amount = DashboardService.convertToExactAmount(amount, assetInfo.divisibility);\n                            let assetName = yield DashboardService.getAssetName(assetId);\n                            if (assetName.names.length) {\n                                newTxnExchangeOffer.assetNamespace = assetName.names[0].name;\n                            }\n                        }\n                        catch (error) {\n                        }\n                        txn.exchangeOffers.push(newTxnExchangeOffer);\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].REMOVE_EXCHANGE_OFFER) {\n                    let removeExchangeOfferTxn = txns[i];\n                    for (let i = 0; i < removeExchangeOfferTxn.offers.length; ++i) {\n                        let tempExchangeOffer = removeExchangeOfferTxn.offers[i];\n                        let assetId = tempExchangeOffer.mosaicId.toHex();\n                        let newTxnExchangeOffer = {\n                            assetId: assetId,\n                            type: tempExchangeOffer.offerType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"ExchangeOfferType\"].SELL_OFFER ? \"Sell\" : \"Buy\",\n                        };\n                        try {\n                            let assetName = yield DashboardService.getAssetName(assetId);\n                            if (assetName.names.length) {\n                                newTxnExchangeOffer.assetNamespace = assetName.names[0].name;\n                            }\n                        }\n                        catch (error) {\n                        }\n                        txn.exchangeOffers.push(newTxnExchangeOffer);\n                    }\n                }\n                let allBuyOffers = txn.exchangeOffers.filter(x => x.type === \"Buy\");\n                let allSellOffers = txn.exchangeOffers.filter(x => x.type === \"Sell\");\n                txn.exchangeOffers = txn.isTakingOffer ? allSellOffers.concat(allBuyOffers) : allBuyOffers.concat(allSellOffers);\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //-------------Link Txn-----------------------------------------------------------\n    formatUnconfirmedLinkTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedLinkTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].LINK_ACCOUNT) {\n                    let linkAccTxn = txns[i];\n                    txn.action = linkAccTxn.linkAction === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"LinkAction\"].Link ? \"Link\" : \"Unlink\";\n                    txn.remotePublicKey = linkAccTxn.remoteAccountKey;\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedLinkTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedLinkTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].LINK_ACCOUNT) {\n                    let linkAccTxn = txns[i];\n                    txn.action = linkAccTxn.linkAction === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"LinkAction\"].Link ? \"Link\" : \"Unlink\";\n                    txn.remotePublicKey = linkAccTxn.remoteAccountKey;\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatPartialLinkTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialLinkTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].LINK_ACCOUNT) {\n                    let linkAccTxn = txns[i];\n                    txn.action = linkAccTxn.linkAction === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"LinkAction\"].Link ? \"Link\" : \"Unlink\";\n                    txn.remotePublicKey = linkAccTxn.remoteAccountKey;\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //-------------Lock Txn-----------------------------------------------------------\n    formatUnconfirmedLockTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedLockTransaction\"], formattedTxn);\n                let lockFundTxn = txns[i];\n                txn.lockHash = lockFundTxn.hash;\n                txn.duration = lockFundTxn.duration.compact();\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedLockTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedLockTransaction\"], formattedTxn);\n                let lockFundTxn = txns[i];\n                txn.lockHash = lockFundTxn.hash;\n                txn.duration = lockFundTxn.duration.compact();\n                try {\n                    let txnStatus = yield chainAPI.transactionAPI.getTransactionStatus(lockFundTxn.hash);\n                    txn.isRefunded = txnStatus.group === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionGroupType\"].CONFIRMED;\n                }\n                catch (error) {\n                    txn.isRefunded = false;\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatPartialLockTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialLockTransaction\"], formattedTxn);\n                let lockFundTxn = txns[i];\n                txn.lockHash = lockFundTxn.hash;\n                txn.duration = lockFundTxn.duration.compact();\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //-------------Namespace Txn-----------------------------------------------------------\n    formatUnconfirmedNamespaceTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedNamespaceTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].REGISTER_NAMESPACE) {\n                    let registerTxn = txns[i];\n                    txn.namespaceName = registerTxn.namespaceName;\n                    if (registerTxn.namespaceType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceType\"].RootNamespace) {\n                        txn.duration = registerTxn.duration.compact();\n                        txn.registerType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceType\"].RootNamespace;\n                        txn.registerTypeName = \"Root namespace\";\n                    }\n                    else {\n                        txn.registerType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceType\"].SubNamespace;\n                        txn.registerTypeName = \"Sub namespace\";\n                        txn.parentId = registerTxn.parentId.toHex();\n                        let namespaceName = yield DashboardService.getNamespacesName([registerTxn.parentId]);\n                        txn.parentName = namespaceName[0].name;\n                    }\n                    txn.namespaceId = registerTxn.namespaceId.toHex();\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedNamespaceTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedNamespaceTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].REGISTER_NAMESPACE) {\n                    let registerTxn = txns[i];\n                    txn.namespaceName = registerTxn.namespaceName;\n                    if (registerTxn.namespaceType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceType\"].RootNamespace) {\n                        txn.duration = registerTxn.duration.compact();\n                        txn.registerType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceType\"].RootNamespace;\n                        txn.registerTypeName = \"Root namespace\";\n                    }\n                    else {\n                        txn.registerType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceType\"].SubNamespace;\n                        txn.registerTypeName = \"Sub namespace\";\n                        txn.parentId = registerTxn.parentId.toHex();\n                        let namespaceName = yield DashboardService.getNamespacesName([registerTxn.parentId]);\n                        txn.parentName = namespaceName[0].name;\n                    }\n                    txn.namespaceId = registerTxn.namespaceId.toHex();\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatPartialNamespaceTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialNamespaceTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].REGISTER_NAMESPACE) {\n                    let registerTxn = txns[i];\n                    txn.namespaceName = registerTxn.namespaceName;\n                    if (registerTxn.namespaceType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceType\"].RootNamespace) {\n                        txn.duration = registerTxn.duration.compact();\n                        txn.registerType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceType\"].RootNamespace;\n                        txn.registerTypeName = \"Root namespace\";\n                    }\n                    else {\n                        txn.registerType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceType\"].SubNamespace;\n                        txn.registerTypeName = \"Sub namespace\";\n                        txn.parentId = registerTxn.parentId.toHex();\n                        let namespaceName = yield DashboardService.getNamespacesName([registerTxn.parentId]);\n                        txn.parentName = namespaceName[0].name;\n                    }\n                    txn.namespaceId = registerTxn.namespaceId.toHex();\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //-------------Restriction Txn-----------------------------------------------------------\n    formatUnconfirmedRestrictionTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedRestrictionTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_ADDRESS) {\n                    let accAddressRestrictionTxn = txns[i];\n                    txn.restrictionTypeOutput = DashboardService.getRestrictionTypeName(accAddressRestrictionTxn.restrictionType).action;\n                    for (let i = 0; i < accAddressRestrictionTxn.modifications.length; ++i) {\n                        let modification = accAddressRestrictionTxn.modifications[i];\n                        let newRestrictionModification = {\n                            action: modification.modificationType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionModificationType\"].Add ? \"Add\" : \"Remove\",\n                            value: modification.value\n                        };\n                        txn.modification.push(newRestrictionModification);\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_MOSAIC) {\n                    let accAssetRestrictionTxn = txns[i];\n                    txn.restrictionTypeOutput = DashboardService.getRestrictionTypeName(accAssetRestrictionTxn.restrictionType).action;\n                    for (let i = 0; i < accAssetRestrictionTxn.modifications.length; ++i) {\n                        let modification = accAssetRestrictionTxn.modifications[i];\n                        let newRestrictionModification = {\n                            action: modification.modificationType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionModificationType\"].Add ? \"Add\" : \"Remove\",\n                            value: new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MosaicId\"](modification.value).toHex()\n                        };\n                        try {\n                            let assetId = newRestrictionModification.value;\n                            if (assetId === nativeTokenAssetId.value) {\n                                newRestrictionModification.name = nativeTokenName.value;\n                            }\n                            else {\n                                let assetName = yield DashboardService.getAssetName(assetId);\n                                if (assetName.names.length) {\n                                    newRestrictionModification.name = assetName.names[0].name;\n                                }\n                            }\n                        }\n                        catch (error) {\n                        }\n                        txn.modification.push(newRestrictionModification);\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_OPERATION) {\n                    let accOperationRestrictionTxn = txns[i];\n                    txn.restrictionTypeOutput = DashboardService.getRestrictionTypeName(accOperationRestrictionTxn.restrictionType).action;\n                    for (let i = 0; i < accOperationRestrictionTxn.modifications.length; ++i) {\n                        let modification = accOperationRestrictionTxn.modifications[i];\n                        let newRestrictionModification = {\n                            action: modification.modificationType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionModificationType\"].Add ? \"Add\" : \"Remove\",\n                            value: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeNameByEnum(modification.value)\n                        };\n                        txn.modification.push(newRestrictionModification);\n                    }\n                }\n                let allAddModification = txn.modification.filter(x => x.action === \"Add\");\n                let allRemoveModification = txn.modification.filter(x => x.action === \"Remove\");\n                txn.modification = allAddModification.concat(allRemoveModification);\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedRestrictionTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedRestrictionTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_ADDRESS) {\n                    let accAddressRestrictionTxn = txns[i];\n                    txn.restrictionTypeOutput = DashboardService.getRestrictionTypeName(accAddressRestrictionTxn.restrictionType).action;\n                    for (let i = 0; i < accAddressRestrictionTxn.modifications.length; ++i) {\n                        let modification = accAddressRestrictionTxn.modifications[i];\n                        let newRestrictionModification = {\n                            action: modification.modificationType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionModificationType\"].Add ? \"Add\" : \"Remove\",\n                            value: modification.value\n                        };\n                        txn.modification.push(newRestrictionModification);\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_MOSAIC) {\n                    let accAssetRestrictionTxn = txns[i];\n                    txn.restrictionTypeOutput = DashboardService.getRestrictionTypeName(accAssetRestrictionTxn.restrictionType).action;\n                    for (let i = 0; i < accAssetRestrictionTxn.modifications.length; ++i) {\n                        let modification = accAssetRestrictionTxn.modifications[i];\n                        let newRestrictionModification = {\n                            action: modification.modificationType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionModificationType\"].Add ? \"Add\" : \"Remove\",\n                            value: new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MosaicId\"](modification.value).toHex()\n                        };\n                        try {\n                            let assetId = newRestrictionModification.value;\n                            if (assetId === nativeTokenAssetId.value) {\n                                newRestrictionModification.name = nativeTokenName.value;\n                            }\n                            else {\n                                let assetName = yield DashboardService.getAssetName(assetId);\n                                if (assetName.names.length) {\n                                    newRestrictionModification.name = assetName.names[0].name;\n                                }\n                            }\n                        }\n                        catch (error) {\n                        }\n                        txn.modification.push(newRestrictionModification);\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_OPERATION) {\n                    let accOperationRestrictionTxn = txns[i];\n                    txn.restrictionTypeOutput = DashboardService.getRestrictionTypeName(accOperationRestrictionTxn.restrictionType).action;\n                    for (let i = 0; i < accOperationRestrictionTxn.modifications.length; ++i) {\n                        let modification = accOperationRestrictionTxn.modifications[i];\n                        let newRestrictionModification = {\n                            action: modification.modificationType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionModificationType\"].Add ? \"Add\" : \"Remove\",\n                            value: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeNameByEnum(modification.value)\n                        };\n                        txn.modification.push(newRestrictionModification);\n                    }\n                }\n                let allAddModification = txn.modification.filter(x => x.action === \"Add\");\n                let allRemoveModification = txn.modification.filter(x => x.action === \"Remove\");\n                txn.modification = allAddModification.concat(allRemoveModification);\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatPartialRestrictionTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialRestrictionTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_ADDRESS) {\n                    let accAddressRestrictionTxn = txns[i];\n                    txn.restrictionTypeOutput = DashboardService.getRestrictionTypeName(accAddressRestrictionTxn.restrictionType).action;\n                    for (let i = 0; i < accAddressRestrictionTxn.modifications.length; ++i) {\n                        let modification = accAddressRestrictionTxn.modifications[i];\n                        let newRestrictionModification = {\n                            action: modification.modificationType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionModificationType\"].Add ? \"Add\" : \"Remove\",\n                            value: modification.value\n                        };\n                        txn.modification.push(newRestrictionModification);\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_MOSAIC) {\n                    let accAssetRestrictionTxn = txns[i];\n                    txn.restrictionTypeOutput = DashboardService.getRestrictionTypeName(accAssetRestrictionTxn.restrictionType).action;\n                    for (let i = 0; i < accAssetRestrictionTxn.modifications.length; ++i) {\n                        let modification = accAssetRestrictionTxn.modifications[i];\n                        let newRestrictionModification = {\n                            action: modification.modificationType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionModificationType\"].Add ? \"Add\" : \"Remove\",\n                            value: new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MosaicId\"](modification.value).toHex()\n                        };\n                        try {\n                            let assetId = newRestrictionModification.value;\n                            if (assetId === nativeTokenAssetId.value) {\n                                newRestrictionModification.name = nativeTokenName.value;\n                            }\n                            else {\n                                let assetName = yield DashboardService.getAssetName(assetId);\n                                if (assetName.names.length) {\n                                    newRestrictionModification.name = assetName.names[0].name;\n                                }\n                            }\n                        }\n                        catch (error) {\n                        }\n                        txn.modification.push(newRestrictionModification);\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_OPERATION) {\n                    let accOperationRestrictionTxn = txns[i];\n                    txn.restrictionTypeOutput = DashboardService.getRestrictionTypeName(accOperationRestrictionTxn.restrictionType).action;\n                    for (let i = 0; i < accOperationRestrictionTxn.modifications.length; ++i) {\n                        let modification = accOperationRestrictionTxn.modifications[i];\n                        let newRestrictionModification = {\n                            action: modification.modificationType === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionModificationType\"].Add ? \"Add\" : \"Remove\",\n                            value: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeNameByEnum(modification.value)\n                        };\n                        txn.modification.push(newRestrictionModification);\n                    }\n                }\n                let allAddModification = txn.modification.filter(x => x.action === \"Add\");\n                let allRemoveModification = txn.modification.filter(x => x.action === \"Remove\");\n                txn.modification = allAddModification.concat(allRemoveModification);\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //-------------Secret Txn-----------------------------------------------------------\n    formatUnconfirmedSecretTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatUnconfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedSecretTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].SECRET_LOCK) {\n                    let secretLockTxn = txns[i];\n                    txn.duration = secretLockTxn.duration.compact();\n                    txn.secret = secretLockTxn.secret;\n                    txn.recipient = secretLockTxn.recipient.plain();\n                    txn.amount = secretLockTxn.mosaic.amount.compact();\n                    txn.hashType = _models_const_hashType__WEBPACK_IMPORTED_MODULE_2__[\"HashType\"][secretLockTxn.hashType];\n                    let isNamespace = DashboardService.isNamespace(secretLockTxn.mosaic.id);\n                    try {\n                        if (!isNamespace) {\n                            txn.assetId = secretLockTxn.mosaic.id.toHex();\n                            let assetsNames = yield DashboardService.getAssetsName([secretLockTxn.mosaic.id]);\n                            if (assetsNames[0].names.length) {\n                                txn.namespaceName = assetsNames[0].names[0].name;\n                            }\n                        }\n                        else {\n                            let namespaceId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"](secretLockTxn.mosaic.id.toDTO().id);\n                            let linkedAssetId = yield DashboardService.getAssetAlias(namespaceId);\n                            txn.assetId = linkedAssetId.toHex();\n                            txn.isSendWithNamespace = true;\n                            let nsNames = yield DashboardService.getNamespacesName([namespaceId]);\n                            txn.namespaceName = nsNames[0].name;\n                        }\n                        if (txn.namespaceName && txn.namespaceName === \"prx.xpx\") {\n                            txn.namespaceName = nativeTokenName.value;\n                        }\n                        let assetInfo = yield DashboardService.getAssetInfo(txn.assetId);\n                        if (assetInfo.divisibility > 0) {\n                            txn.amount = DashboardService.convertToExactAmount(txn.amount, assetInfo.divisibility);\n                        }\n                        txn.amountIsRaw = false;\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].SECRET_PROOF) {\n                    let secretProofTxn = txns[i];\n                    txn.secret = secretProofTxn.secret;\n                    txn.recipient = secretProofTxn.recipient.plain();\n                    txn.hashType = _models_const_hashType__WEBPACK_IMPORTED_MODULE_2__[\"HashType\"][secretProofTxn.hashType];\n                    txn.proof = secretProofTxn.proof;\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatConfirmedSecretTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatConfirmedTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedSecretTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].SECRET_LOCK) {\n                    let secretLockTxn = txns[i];\n                    txn.duration = secretLockTxn.duration.compact();\n                    txn.secret = secretLockTxn.secret;\n                    txn.recipient = secretLockTxn.recipient.plain();\n                    txn.amount = secretLockTxn.mosaic.amount.compact();\n                    txn.hashType = _models_const_hashType__WEBPACK_IMPORTED_MODULE_2__[\"HashType\"][secretLockTxn.hashType];\n                    let isNamespace = DashboardService.isNamespace(secretLockTxn.mosaic.id);\n                    let resolvedAssetId = yield DashboardService.getResolvedAsset(secretLockTxn.mosaic.id, txn.block);\n                    txn.assetId = resolvedAssetId.toHex();\n                    try {\n                        if (!isNamespace) {\n                            let assetsNames = yield DashboardService.getAssetsName([secretLockTxn.mosaic.id]);\n                            if (assetsNames[0].names.length) {\n                                txn.namespaceName = assetsNames[0].names[0].name;\n                            }\n                        }\n                        else {\n                            txn.isSendWithNamespace = true;\n                            let namespaceId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"](secretLockTxn.mosaic.id.toDTO().id);\n                            let nsNames = yield DashboardService.getNamespacesName([namespaceId]);\n                            txn.namespaceName = nsNames[0].name;\n                        }\n                        if (txn.namespaceName && txn.namespaceName === \"prx.xpx\") {\n                            txn.namespaceName = nativeTokenName.value;\n                        }\n                        let assetInfo = yield DashboardService.getAssetInfo(txn.assetId);\n                        if (assetInfo.divisibility > 0) {\n                            txn.amount = DashboardService.convertToExactAmount(txn.amount, assetInfo.divisibility);\n                        }\n                        txn.amountIsRaw = false;\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].SECRET_PROOF) {\n                    let secretProofTxn = txns[i];\n                    txn.secret = secretProofTxn.secret;\n                    txn.recipient = secretProofTxn.recipient.plain();\n                    txn.hashType = _models_const_hashType__WEBPACK_IMPORTED_MODULE_2__[\"HashType\"][secretProofTxn.hashType];\n                    txn.proof = secretProofTxn.proof;\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    formatPartialSecretTransaction(txns) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let formatedTxns = [];\n            for (let i = 0; i < txns.length; ++i) {\n                let formattedTxn = yield this.formatPartialTransaction(txns[i]);\n                let txn = _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"].convertToSubClass(_model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialSecretTransaction\"], formattedTxn);\n                if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].SECRET_LOCK) {\n                    let secretLockTxn = txns[i];\n                    txn.duration = secretLockTxn.duration.compact();\n                    txn.secret = secretLockTxn.secret;\n                    txn.recipient = secretLockTxn.recipient.plain();\n                    txn.amount = secretLockTxn.mosaic.amount.compact();\n                    txn.hashType = _models_const_hashType__WEBPACK_IMPORTED_MODULE_2__[\"HashType\"][secretLockTxn.hashType];\n                    let isNamespace = DashboardService.isNamespace(secretLockTxn.mosaic.id);\n                    try {\n                        if (!isNamespace) {\n                            txn.assetId = secretLockTxn.mosaic.id.toHex();\n                            let assetsNames = yield DashboardService.getAssetsName([secretLockTxn.mosaic.id]);\n                            if (assetsNames[0].names.length) {\n                                txn.namespaceName = assetsNames[0].names[0].name;\n                            }\n                        }\n                        else {\n                            let namespaceId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"](secretLockTxn.mosaic.id.toDTO().id);\n                            let linkedAssetId = yield DashboardService.getAssetAlias(namespaceId);\n                            txn.assetId = linkedAssetId.toHex();\n                            txn.isSendWithNamespace = true;\n                            let nsNames = yield DashboardService.getNamespacesName([namespaceId]);\n                            txn.namespaceName = nsNames[0].name;\n                        }\n                        if (txn.namespaceName && txn.namespaceName === \"prx.xpx\") {\n                            txn.namespaceName = nativeTokenName.value;\n                        }\n                        let assetInfo = yield DashboardService.getAssetInfo(txn.assetId);\n                        if (assetInfo.divisibility > 0) {\n                            txn.amount = DashboardService.convertToExactAmount(txn.amount, assetInfo.divisibility);\n                        }\n                        txn.amountIsRaw = false;\n                    }\n                    catch (error) {\n                    }\n                }\n                else if (txns[i].type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].SECRET_PROOF) {\n                    let secretProofTxn = txns[i];\n                    txn.secret = secretProofTxn.secret;\n                    txn.recipient = secretProofTxn.recipient.plain();\n                    txn.hashType = _models_const_hashType__WEBPACK_IMPORTED_MODULE_2__[\"HashType\"][secretProofTxn.hashType];\n                    txn.proof = secretProofTxn.proof;\n                }\n                formatedTxns.push(txn);\n            }\n            return formatedTxns;\n        });\n    }\n    //------------- format groupType transaction ------------------------------------------\n    formatPartialTransaction(txn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactionInfo = txn.transactionInfo;\n            let txnHash = transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AggregateTransactionInfo\"] ?\n                transactionInfo.aggregateHash : transactionInfo.hash;\n            let formattedTxn = new _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"PartialTransaction\"](txnHash);\n            formattedTxn.type = _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(txn.type);\n            formattedTxn.maxFee = transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AggregateTransactionInfo\"] ?\n                null : DashboardService.convertToExactNativeAmount(txn.maxFee.compact());\n            formattedTxn.signer = txn.signer.publicKey;\n            formattedTxn.signerAddress = txn.signer.address.plain();\n            let deadline = null;\n            if (transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AggregateTransactionInfo\"]) {\n                try {\n                    let aggregateTxn = yield this.autoFindAggregateTransaction(txnHash);\n                    deadline = aggregateTxn.deadline.adjustedValue.compact();\n                }\n                catch (error) {\n                }\n            }\n            else {\n                deadline = txn.deadline.adjustedValue.compact();\n            }\n            formattedTxn.deadline = deadline;\n            if (txn.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].AGGREGATE_BONDED || txn.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].AGGREGATE_COMPLETE) {\n                let aggregateTxn = txn;\n                for (let i = 0; i < aggregateTxn.cosignatures.length; ++i) {\n                    formattedTxn.cosignedPublickKey.push(aggregateTxn.cosignatures[i].signer.publicKey);\n                }\n            }\n            return formattedTxn;\n        });\n    }\n    formatUnconfirmedTransaction(txn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactionInfo = txn.transactionInfo;\n            let txnHash = transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AggregateTransactionInfo\"] ?\n                transactionInfo.aggregateHash : transactionInfo.hash;\n            let formattedTxn = new _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"UnconfirmedTransaction\"](txnHash);\n            formattedTxn.type = _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(txn.type);\n            formattedTxn.maxFee = transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AggregateTransactionInfo\"] ?\n                null : DashboardService.convertToExactNativeAmount(txn.maxFee.compact());\n            formattedTxn.signer = txn.signer.publicKey;\n            formattedTxn.signerAddress = txn.signer.address.plain();\n            let deadline = null;\n            if (transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AggregateTransactionInfo\"]) {\n                try {\n                    let aggregateTxn = yield this.autoFindAggregateTransaction(txnHash);\n                    deadline = aggregateTxn.deadline.adjustedValue.compact();\n                }\n                catch (error) {\n                }\n            }\n            else {\n                deadline = txn.deadline.adjustedValue.compact();\n            }\n            formattedTxn.deadline = deadline;\n            return formattedTxn;\n        });\n    }\n    formatConfirmedTransaction(txn) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactionInfo = txn.transactionInfo;\n            let txnHash = transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AggregateTransactionInfo\"] ?\n                transactionInfo.aggregateHash : transactionInfo.hash;\n            let blockHeight = 0;\n            let txnBytes = 0;\n            let deadline = null;\n            if (transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AggregateTransactionInfo\"]) {\n                //let aggregateTxn = await this.autoFindAggregateTransaction(txnHash);\n                blockHeight = transactionInfo.height.compact();\n                //txnBytes = aggregateTxn.serialize().length / 2;\n                //deadline = aggregateTxn.deadline.adjustedValue.compact();\n            }\n            else if (txn.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].AGGREGATE_BONDED || txn.type === tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].AGGREGATE_COMPLETE) {\n                let aggregateTxn = yield this.autoFindAggregateTransaction(txnHash);\n                blockHeight = aggregateTxn.transactionInfo.height.compact();\n                txnBytes = aggregateTxn.serialize().length / 2;\n                deadline = aggregateTxn.deadline.adjustedValue.compact();\n            }\n            else {\n                blockHeight = transactionInfo.height.compact();\n                // wait SDK to fix\n                try {\n                    txnBytes = txn.serialize().length / 2;\n                }\n                catch (error) {\n                    console.log(error);\n                }\n                deadline = txn.deadline.adjustedValue.compact();\n            }\n            let blockInfo = yield chainAPI.blockAPI.getBlockByHeight(blockHeight);\n            let fee = txnBytes * blockInfo.feeMultiplier;\n            let formattedTxn = new _model_transactions_transaction__WEBPACK_IMPORTED_MODULE_9__[\"ConfirmedTransaction\"](txnHash);\n            formattedTxn.block = blockHeight;\n            formattedTxn.deadline = deadline;\n            formattedTxn.type = _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(txn.type);\n            formattedTxn.maxFee = transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AggregateTransactionInfo\"] ?\n                null : DashboardService.convertToExactNativeAmount(txn.maxFee.compact());\n            formattedTxn.signer = txn.signer.publicKey;\n            formattedTxn.signerAddress = txn.signer.address.plain();\n            formattedTxn.fee = DashboardService.convertToExactNativeAmount(fee);\n            if (transactionInfo instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AggregateTransactionInfo\"]) {\n                formattedTxn.fee = null;\n            }\n            formattedTxn.timestamp = new Date(blockInfo.timestamp.compact() + tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Deadline\"].timestampNemesisBlock * 1000).toISOString();\n            return formattedTxn;\n        });\n    }\n    searchAggregateTransaction(hash) {\n        let txnFound = this.savedAggregateTxn.find(txn => txn.transactionInfo.hash === hash);\n        if (txnFound) {\n            return txnFound;\n        }\n        return null;\n    }\n    autoFindAggregateTransaction(hash) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let foundTxn = this.searchAggregateTransaction(hash);\n            if (foundTxn) {\n                return foundTxn;\n            }\n            let statusGroup = \"\";\n            let txn = null;\n            while (txn === null && statusGroup !== \"confirmed\" && statusGroup !== \"error\") {\n                try {\n                    let txnStatus = yield chainAPI.transactionAPI.getTransactionStatus(hash);\n                    statusGroup = txnStatus.group;\n                    switch (statusGroup) {\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionGroupType\"].CONFIRMED:\n                            try {\n                                txn = yield chainAPI.transactionAPI.getTransaction(hash);\n                            }\n                            catch (error) {\n                                statusGroup = \"error\";\n                            }\n                            break;\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionGroupType\"].UNCONFIRMED:\n                            try {\n                                txn = yield chainAPI.transactionAPI.getUnconfirmedTransaction(hash);\n                            }\n                            catch (error) {\n                            }\n                            break;\n                        case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionGroupType\"].PARTIAL:\n                            try {\n                                txn = yield chainAPI.transactionAPI.getPartialTransaction(hash);\n                            }\n                            catch (error) {\n                            }\n                            break;\n                        default:\n                            statusGroup = \"error\";\n                            break;\n                    }\n                }\n                catch (error) {\n                    statusGroup = \"error\";\n                }\n            }\n            if (statusGroup === \"error\" || txn === null) {\n                return null;\n            }\n            else {\n                let aggregateTxn = txn;\n                this.addAggregateTxns(aggregateTxn);\n                return aggregateTxn;\n            }\n        });\n    }\n    addAggregateTxns(txn) {\n        let txnFound = this.savedAggregateTxn.find(txn => txn.transactionInfo.hash === txn.transactionInfo.hash);\n        if (txnFound) {\n            return false;\n        }\n        else {\n            this.savedAggregateTxn.push(txn);\n            return true;\n        }\n    }\n    //-----------------------end-------------------------------\n    /**\n     * @param oldValue - string\n     * @param valueChange - hex string\n     * @param sizeDelta\n     */\n    static applyValueChange(oldValue, valueChange, sizeDelta) {\n        let newSize = (tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Convert\"].utf8ToHex(oldValue).length / 2) + sizeDelta;\n        let oldValueBytes = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Convert\"].hexToUint8(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Convert\"].utf8ToHex(oldValue));\n        let valueChangeBytes = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Convert\"].hexToUint8(valueChange);\n        let valueUint8Array = new Uint8Array(newSize);\n        for (let i = 0; i < valueUint8Array.length; ++i) {\n            valueUint8Array[i] = oldValueBytes[i] ^ valueChangeBytes[i];\n        }\n        return tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Convert\"].decodeHexToUtf8(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Convert\"].uint8ToHex(valueUint8Array));\n    }\n    static getAssetInfo(assetId) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let mosaicId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MosaicId\"](assetId);\n            let assetInfo = yield chainAPI.assetAPI.getMosaic(mosaicId);\n            return assetInfo;\n        });\n    }\n    static getAssetName(assetId) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let mosaicId = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MosaicId\"](assetId);\n            let assetNames = yield chainAPI.assetAPI.getMosaicsNames([mosaicId]);\n            return assetNames[0];\n        });\n    }\n    static getAssetsName(mosaicIds) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let assetNames = yield chainAPI.assetAPI.getMosaicsNames(mosaicIds);\n            return assetNames;\n        });\n    }\n    static getNamespacesName(namespaceIds) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let namespacesName = yield chainAPI.namespaceAPI.getNamespacesName(namespaceIds);\n            return namespacesName;\n        });\n    }\n    static getAddressAlias(namespaceId) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let address = yield chainAPI.namespaceAPI.getLinkedAddress(namespaceId);\n            return address;\n        });\n    }\n    static getAssetAlias(namespaceId) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let assetId = yield chainAPI.namespaceAPI.getLinkedMosaicId(namespaceId);\n            return assetId;\n        });\n    }\n    static getAssetMetadata(assetId, scopedMetadataKey) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let metadataQP = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataQueryParams\"]();\n            metadataQP.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataType\"].MOSAIC;\n            metadataQP.scopedMetadataKey = scopedMetadataKey;\n            metadataQP.targetId = assetId;\n            let metadataResult = yield chainAPI.metadataAPI.searchMetadatas(metadataQP);\n            return metadataResult.metadataEntries.length ? metadataResult.metadataEntries[0] : null;\n        });\n    }\n    static getNamespaceMetadata(nsId, scopedMetadataKey) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let metadataQP = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataQueryParams\"]();\n            metadataQP.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataType\"].NAMESPACE;\n            metadataQP.scopedMetadataKey = scopedMetadataKey;\n            metadataQP.targetId = nsId;\n            let metadataResult = yield chainAPI.metadataAPI.searchMetadatas(metadataQP);\n            return metadataResult.metadataEntries.length ? metadataResult.metadataEntries[0] : null;\n        });\n    }\n    static getAccountMetadata(targetKey, scopedMetadataKey) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let metadataQP = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataQueryParams\"]();\n            metadataQP.metadataType = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MetadataType\"].ACCOUNT;\n            metadataQP.scopedMetadataKey = scopedMetadataKey;\n            metadataQP.targetKey = targetKey;\n            let metadataResult = yield chainAPI.metadataAPI.searchMetadatas(metadataQP);\n            return metadataResult.metadataEntries.length ? metadataResult.metadataEntries[0] : null;\n        });\n    }\n    static getRecipient(transferTxn, blockHeight) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let recipient = null;\n            if (transferTxn.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"]) {\n                let receipts = yield chainAPI.blockAPI.getBlockReceipts(blockHeight);\n                for (let i = 0; i < receipts.addressResolutionStatements.length; ++i) {\n                    let unresolved = receipts.addressResolutionStatements[i].unresolved;\n                    let resolved = receipts.addressResolutionStatements[i].resolutionEntries[0].resolved;\n                    if (unresolved instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MosaicId\"]) { // actually is namespaceId\n                        let namespaceIdHex = unresolved.toHex();\n                        if (transferTxn.recipient.toHex() !== namespaceIdHex) {\n                            continue;\n                        }\n                        if (resolved instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"AddressAlias\"]) {\n                            recipient = resolved.address;\n                            break;\n                        }\n                        else {\n                            continue;\n                        }\n                    }\n                    else {\n                        continue;\n                    }\n                }\n            }\n            else {\n                recipient = transferTxn.recipient;\n            }\n            return recipient;\n        });\n    }\n    static isNamespace(mosaicId) {\n        return Array.from(namespaceIdFirstCharacterString).includes(mosaicId.toHex().toUpperCase().substring(0, 1));\n    }\n    static getResolvedAsset(mosaicId, blockHeight) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let resolvedAsset = null;\n            if (DashboardService.isNamespace(mosaicId)) {\n                let receipts = yield chainAPI.blockAPI.getBlockReceipts(blockHeight);\n                for (let i = 0; i < receipts.mosaicResolutionStatements.length; ++i) {\n                    let unresolved = receipts.mosaicResolutionStatements[i].unresolved;\n                    let resolved = receipts.mosaicResolutionStatements[i].resolutionEntries[0].resolved;\n                    if (unresolved instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MosaicId\"]) { // actually is namespaceId\n                        let namespaceIdHex = unresolved.toHex();\n                        if (mosaicId.toHex() !== namespaceIdHex) {\n                            continue;\n                        }\n                        if (resolved instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"MosaicAlias\"]) {\n                            resolvedAsset = resolved.mosaicId;\n                            break;\n                        }\n                        else {\n                            continue;\n                        }\n                    }\n                    else {\n                        continue;\n                    }\n                }\n            }\n            else {\n                resolvedAsset = mosaicId;\n            }\n            return resolvedAsset;\n        });\n    }\n    static getRestrictionTypeName(restrictionType) {\n        let restrictionTypeName = {\n            action: '',\n            type: ''\n        };\n        switch (restrictionType) {\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionType\"].AllowAddress:\n                restrictionTypeName.action = \"Allow\";\n                restrictionTypeName.type = \"Address\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionType\"].BlockAddress:\n                restrictionTypeName.action = \"Block\";\n                restrictionTypeName.type = \"Address\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionType\"].AllowMosaic:\n                restrictionTypeName.action = \"Allow\";\n                restrictionTypeName.type = \"SDA\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionType\"].BlockMosaic:\n                restrictionTypeName.action = \"Block\";\n                restrictionTypeName.type = \"SDA\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionType\"].AllowTransaction:\n                restrictionTypeName.action = \"Allow\";\n                restrictionTypeName.type = \"Transaction Type\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionType\"].BlockTransaction:\n                restrictionTypeName.action = \"Block\";\n                restrictionTypeName.type = \"Transaction Type\";\n                break;\n            default:\n                break;\n        }\n        return restrictionTypeName;\n    }\n    getAllAccountTransactions() {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactions = [];\n            for (let i = 0; i < this.wallet.accounts.length; ++i) {\n                let accountTransactions = yield DashboardService.getAccountAllTransactions(this.wallet.accounts[i]);\n                transactions = transactions.concat(accountTransactions);\n            }\n            for (let i = 0; i < this.wallet.others.length; ++i) {\n                let accountTransactions = yield DashboardService.getAccountAllTransactions(this.wallet.others[i]);\n                transactions = transactions.concat(accountTransactions);\n            }\n            return transactions.filter((transaction, index, array) => index === array.findIndex(foundTx => foundTx.transactionInfo.id === transaction.transactionInfo.id));\n        });\n    }\n    getAllAccountUnconfirmedTransactions() {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactions = [];\n            for (let i = 0; i < this.wallet.accounts.length; ++i) {\n                let accountTransactions = yield DashboardService.getAccountAllUnconfirmedTransactions(this.wallet.accounts[i]);\n                transactions = transactions.concat(accountTransactions);\n            }\n            for (let i = 0; i < this.wallet.others.length; ++i) {\n                let accountTransactions = yield DashboardService.getAccountAllUnconfirmedTransactions(this.wallet.others[i]);\n                transactions = transactions.concat(accountTransactions);\n            }\n            return transactions.filter((transaction, index, array) => index === array.findIndex(foundTx => foundTx.transactionInfo.id === transaction.transactionInfo.id));\n        });\n    }\n    getAllAccountPartialTransactions() {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactions = [];\n            for (let i = 0; i < this.wallet.accounts.length; ++i) {\n                let accountTransactions = yield DashboardService.getAccountAllPartialTransactions(this.wallet.accounts[i]);\n                transactions = transactions.concat(accountTransactions);\n            }\n            for (let i = 0; i < this.wallet.others.length; ++i) {\n                let accountTransactions = yield DashboardService.getAccountAllPartialTransactions(this.wallet.others[i]);\n                transactions = transactions.concat(accountTransactions);\n            }\n            return transactions.filter((transaction, index, array) => index === array.findIndex(foundTx => foundTx.transactionInfo.id === transaction.transactionInfo.id));\n        });\n    }\n    static getAccountAllTransactions(account) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let pageNum = 1;\n            let publicAccount = _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].createPublicAccount(account.publicKey, localNetworkType.value);\n            let fullTransaction = [];\n            let queryParams = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionQueryParams\"]();\n            queryParams.pageSize = 100;\n            queryParams.pageNumber = pageNum;\n            let transactions = yield _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactions(publicAccount, queryParams);\n            fullTransaction = fullTransaction.concat(transactions);\n            while (transactions.length === 100) {\n                pageNum += 1;\n                queryParams.pageNumber = pageNum;\n                let lastId = transactions[transactions.length - 1].transactionInfo.id;\n                // queryParams = Helper.createQueryParams(100, lastId);\n                transactions = yield _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactions(publicAccount, queryParams);\n                fullTransaction = fullTransaction.concat(transactions);\n            }\n            return fullTransaction;\n        });\n    }\n    static getAccountAllUnconfirmedTransactions(account) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let pageNum = 1;\n            let publicAccount = _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].createPublicAccount(account.publicKey, localNetworkType.value);\n            let fullTransaction = [];\n            let queryParams = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionQueryParams\"]();\n            queryParams.pageSize = 100;\n            queryParams.pageNumber = pageNum;\n            let transactions = yield _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getUnconfirmedTransactions(publicAccount, queryParams);\n            fullTransaction = fullTransaction.concat(transactions);\n            while (transactions.length === 100) {\n                pageNum += 1;\n                queryParams.pageNumber = pageNum;\n                let lastId = transactions[transactions.length - 1].transactionInfo.id;\n                // queryParams = Helper.createQueryParams(100, lastId);\n                transactions = yield _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getUnconfirmedTransactions(publicAccount, queryParams);\n                fullTransaction = fullTransaction.concat(transactions);\n            }\n            return fullTransaction;\n        });\n    }\n    static getAccountAllPartialTransactions(account) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let pageNum = 1;\n            let publicAccount = _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].createPublicAccount(account.publicKey, localNetworkType.value);\n            let fullTransaction = [];\n            let queryParams = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionQueryParams\"]();\n            queryParams.pageSize = 100;\n            queryParams.pageNumber = pageNum;\n            let transactions = yield _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getPartialTransactions(publicAccount, queryParams);\n            if (transactions) {\n                fullTransaction = fullTransaction.concat(transactions);\n                while (transactions && transactions.length === 100) {\n                    pageNum += 1;\n                    queryParams.pageNumber = pageNum;\n                    let lastId = transactions[transactions.length - 1].transactionInfo.id;\n                    // queryParams = Helper.createQueryParams(100, lastId);\n                    transactions = yield _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getPartialTransactions(publicAccount, queryParams);\n                    if (transactions) {\n                        fullTransaction = fullTransaction.concat(transactions);\n                    }\n                }\n            }\n            return fullTransaction;\n        });\n    }\n    getAccountTransactionsCount(account) {\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__awaiter\"])(this, void 0, void 0, function* () {\n            let transactionsCount = {\n                confirmed: 0,\n                unconfirmed: 0,\n                partial: 0\n            };\n            let txnQueryParams = new tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionQueryParams\"]();\n            txnQueryParams.address = account.address;\n            let searchConfirmedTxnResult = yield _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].searchTransactions(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionGroupType\"].CONFIRMED, txnQueryParams);\n            let searchUnconfirmedTxnResult = yield _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].searchTransactions(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionGroupType\"].UNCONFIRMED, txnQueryParams);\n            let searchPartialTxnResult = yield _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].searchTransactions(tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionGroupType\"].PARTIAL, txnQueryParams);\n            transactionsCount.confirmed = searchConfirmedTxnResult.pagination.totalEntries;\n            transactionsCount.unconfirmed = searchUnconfirmedTxnResult.pagination.totalEntries;\n            transactionsCount.partial = searchPartialTxnResult.pagination.totalEntries;\n            return transactionsCount;\n        });\n    }\n    convertToSwapType(txnMessage) {\n        let newType = null;\n        try {\n            if (txnMessage) {\n                let messageData = JSON.parse(txnMessage);\n                if (messageData.type) {\n                    switch (messageData.type) {\n                        case 'Swap':\n                            newType = 'Swap (nis1-XPX)';\n                            break;\n                        case 'Swap-bsc-xpx':\n                            newType = 'Swap (BSC-XPX)';\n                            break;\n                        case 'Swap-xpx-bsc':\n                            newType = 'Swap (XPX-BSC)';\n                            break;\n                        case 'Swap-xpx-bsc-fees':\n                            newType = 'Swap Fee (XPX-BSC)';\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n        catch (error) {\n        }\n        return newType;\n    }\n    // async fetchConfirmedTransactions(){\n    //     let transactions = await this.getAllAccountTransactions();\n    //     let dashboardTransactions: DashboardTransaction[] = this.formatConfirmedTransaction(transactions);\n    //     return dashboardTransactions;\n    // }\n    // async fetchUnconfirmedTransactions(){\n    //     let transactions = await this.getAllAccountUnconfirmedTransactions();\n    //     let dashboardTransactions: DashboardTransaction[] = this.formatUnconfirmedTransaction(transactions);\n    //     return dashboardTransactions;\n    // }\n    // async fetchPartialTransactions(){\n    //     let transactions = await this.getAllAccountPartialTransactions();\n    //     let dashboardTransactions: DashboardTransaction[] = this.formatUnconfirmedTransaction(transactions);\n    //     return { txns: transactions, formatted: dashboardTransactions};\n    // }\n    // formatConfirmedWithTransaction(txs: Transaction[]){\n    //     let dashboardTransactions: DashboardTransaction[] = this.formatConfirmedTransaction(txs);\n    //     return dashboardTransactions;\n    // }\n    // formatUnconfirmedWithTransaction(txs: Transaction[]){\n    //     let dashboardTransactions: DashboardTransaction[] = this.formatUnconfirmedTransaction(txs);\n    //     return dashboardTransactions;\n    // }\n    // formatConfirmedTransaction(transactions: Transaction[]): DashboardTransaction[] {\n    //     let formattedTransactions: DashboardTransaction[] = [];\n    //     for (let i = 0; i < transactions.length; ++i) {\n    //         let dashboardTransaction: DashboardTransaction = {\n    //             id: transactions[i].transactionInfo.id,\n    //             typeName: TransactionUtils.getTransactionTypeName(transactions[i].type),\n    //             signer: transactions[i].signer.publicKey,\n    //             size: transactions[i].size,\n    //             signerAddress: transactions[i].signer.address.plain(),\n    //             signerAddressPretty: transactions[i].signer.address.pretty(),\n    //             signerDisplay: this.addressConvertToName(transactions[i].signer.address.plain()),\n    //             hash: transactions[i].transactionInfo.hash,\n    //             block: transactions[i].transactionInfo.height.compact(),\n    //             formattedDeadline: Helper.convertDisplayDateTimeFormat24(transactions[i].deadline.value.toString()),\n    //             relatedAddress: [],\n    //             relatedAsset: [],\n    //             relatedNamespace: [],\n    //             relatedPublicKey: [],\n    //             searchString: [],\n    //             extractedData: {},\n    //             displayList: new Map<string, string>(),\n    //             transferList: [],\n    //             displayTips: [],\n    //             cosignatures: null,\n    //             signedPublicKeys: [transactions[i].signer.publicKey],\n    //             maxFee: Helper.convertToExact(transactions[i].maxFee.compact(), 6),\n    //             otherAssets: [],\n    //         };\n    //         dashboardTransaction.searchString.push(dashboardTransaction.block.toString());\n    //         dashboardTransaction.searchString.push(dashboardTransaction.hash);\n    //         // dashboardTransaction.relatedAddress.push(transactions[i].signer.address.plain());\n    //         // dashboardTransaction.relatedPublicKey.push(dashboardTransaction.signer);\n    //         let tempData: DashboardInnerTransaction;\n    //         let totalLength: number = 1;\n    //         switch (transactions[i].type) {\n    //             case TransactionType.ADDRESS_ALIAS:\n    //                 let addressAliasTx = transactions[i] as AddressAliasTransaction;\n    //                 tempData = this.extractTransactionAddressAlias(addressAliasTx);\n    //                 break;\n    //             case TransactionType.ADD_EXCHANGE_OFFER:\n    //                 let addExchangeOfferTx = transactions[i] as AddExchangeOfferTransaction;\n    //                 tempData = this.extractTransactionAddExchangeOffer(addExchangeOfferTx);\n    //                 break;\n    //             case TransactionType.AGGREGATE_BONDED:\n    //                 let aggregateBondedTx = transactions[i] as AggregateTransaction;\n    //                 if(aggregateBondedTx.cosignatures.length){\n    //                     dashboardTransaction.cosignatures = { \n    //                         cosigners: aggregateBondedTx.cosignatures.map(\n    //                             (x)=> { return { publicKey: x.signer.publicKey, address: x.signer.address.plain()}}\n    //                         )\n    //                     };\n    //                     dashboardTransaction.signedPublicKeys = dashboardTransaction.signedPublicKeys.concat(dashboardTransaction.cosignatures.cosigners.map(x => x.publicKey));\n    //                 }   \n    //                 totalLength = aggregateBondedTx.innerTransactions.length;\n    //                 dashboardTransaction.innerTransactions = [];\n    //                 tempData = {\n    //                     signer: aggregateBondedTx.signer.publicKey,\n    //                     relatedAsset: [],\n    //                     relatedNamespace: [],\n    //                     relatedPublicKey: [],\n    //                     signerAddress: aggregateBondedTx.signer.address.plain(),\n    //                     relatedAddress: [],\n    //                     typeName: TransactionUtils.getTransactionTypeName(aggregateBondedTx.type),\n    //                     searchString: [],\n    //                     extractedData: {},\n    //                     displayList: new Map<string, string>(),\n    //                     transferList: [],\n    //                     displayTips: [],\n    //                     signerPublicKeys: [aggregateBondedTx.signer.publicKey]\n    //                 };\n    //                 for (let y = 0; y < totalLength; ++y) {\n    //                     let tempInnerData = this.extractInnerTransaction(aggregateBondedTx.innerTransactions[y]);\n    //                     tempData.relatedAddress = tempData.relatedAddress.concat(tempInnerData.relatedAddress);\n    //                     tempData.relatedAsset = tempData.relatedAsset.concat(tempInnerData.relatedAsset);\n    //                     tempData.relatedNamespace = tempData.relatedNamespace.concat(tempInnerData.relatedNamespace);\n    //                     tempData.relatedPublicKey = tempData.relatedPublicKey.concat(tempInnerData.relatedPublicKey);\n    //                     tempData.searchString = tempData.searchString.concat(tempInnerData.searchString);\n    //                     dashboardTransaction.innerTransactions.push(tempInnerData);\n    //                 }\n    //                 break;\n    //             case TransactionType.AGGREGATE_COMPLETE:\n    //                 let aggregateCompleteTx = transactions[i] as AggregateTransaction;\n    //                 if(aggregateCompleteTx.cosignatures.length){\n    //                     dashboardTransaction.cosignatures = { \n    //                         cosigners: aggregateCompleteTx.cosignatures.map(\n    //                             (x)=> { return { publicKey: x.signer.publicKey, address: x.signer.address.plain()}}\n    //                         )\n    //                     };\n    //                     dashboardTransaction.signedPublicKeys = dashboardTransaction.signedPublicKeys.concat(dashboardTransaction.cosignatures.cosigners.map(x => x.publicKey));\n    //                 }     \n    //                 totalLength = aggregateCompleteTx.innerTransactions.length;\n    //                 dashboardTransaction.innerTransactions = [];\n    //                 tempData = {\n    //                     signer: aggregateCompleteTx.signer.publicKey,\n    //                     relatedAsset: [],\n    //                     relatedNamespace: [],\n    //                     relatedPublicKey: [],\n    //                     signerAddress: aggregateCompleteTx.signer.address.plain(),\n    //                     relatedAddress: [],\n    //                     typeName: TransactionUtils.getTransactionTypeName(aggregateCompleteTx.type),\n    //                     searchString: [],\n    //                     extractedData: {},\n    //                     displayList: new Map<string, string>(),\n    //                     displayTips: [],\n    //                     signerPublicKeys: [aggregateCompleteTx.signer.publicKey]\n    //                 };\n    //                 for (let x = 0; x < totalLength; ++x) {\n    //                     let tempInnerData = this.extractInnerTransaction(aggregateCompleteTx.innerTransactions[x]);\n    //                     tempData.relatedAddress = tempData.relatedAddress.concat(tempInnerData.relatedAddress);\n    //                     tempData.relatedAsset = tempData.relatedAsset.concat(tempInnerData.relatedAsset);\n    //                     tempData.relatedNamespace = tempData.relatedNamespace.concat(tempInnerData.relatedNamespace);\n    //                     tempData.relatedPublicKey = tempData.relatedPublicKey.concat(tempInnerData.relatedPublicKey);\n    //                     tempData.searchString = tempData.searchString.concat(tempInnerData.searchString);\n    //                     dashboardTransaction.innerTransactions.push(tempInnerData);\n    //                 }\n    //                 break;\n    //             case TransactionType.CHAIN_CONFIGURE:\n    //                 let chainConfigureTx = transactions[i] as ChainConfigTransaction;\n    //                 tempData = this.extractTransactionChainConfig(chainConfigureTx);\n    //                 break;\n    //             case TransactionType.CHAIN_UPGRADE:\n    //                 let chainUpgradeTx = transactions[i] as ChainUpgradeTransaction;\n    //                 tempData = this.extractTransactionChainUpgrade(chainUpgradeTx);\n    //                 break;\n    //             case TransactionType.EXCHANGE_OFFER:\n    //                 let exchangeOfferTx = transactions[i] as ExchangeOfferTransaction;\n    //                 tempData = this.extractTransactionExchangeOffer(exchangeOfferTx);\n    //                 break;\n    //             case TransactionType.REMOVE_EXCHANGE_OFFER:\n    //                 let removeExchangeOfferTx = transactions[i] as RemoveExchangeOfferTransaction;\n    //                 tempData = this.extractTransactionRemoveExchangeOffer(removeExchangeOfferTx);\n    //                 break;\n    //             case TransactionType.LINK_ACCOUNT:\n    //                 let accountLinkTx = transactions[i] as AccountLinkTransaction;\n    //                 tempData = this.extractTransactionAccountLink(accountLinkTx);\n    //                 break;\n    //             case TransactionType.LOCK:\n    //                 let lockFundTx = transactions[i] as LockFundsTransaction;\n    //                 tempData = this.extractTransactionLockFunds(lockFundTx);\n    //                 break;\n    //             // case TransactionType.MODIFY_ACCOUNT_METADATA:\n    //             //     let modifyAccountMetadataTx = transactions[i] as ModifyMetadataTransaction;\n    //             //     tempData = this.extractTransactionModifyAccountMetadata(modifyAccountMetadataTx);\n    //             //     break;\n    //             // case TransactionType.MODIFY_MOSAIC_METADATA:\n    //             //     let modifyMosaicMetadataTx = transactions[i] as ModifyMetadataTransaction;\n    //             //     tempData = this.extractTransactionModifyMosaicMetadata(modifyMosaicMetadataTx);\n    //             //     break;\n    //             // case TransactionType.MODIFY_NAMESPACE_METADATA:\n    //             //     let modifyNamespaceMetadataTx = transactions[i] as ModifyMetadataTransaction;\n    //             //     tempData = this.extractTransactionModifyNamespaceMetadata(modifyNamespaceMetadataTx);\n    //             //     break;\n    //             case TransactionType.MODIFY_ACCOUNT_RESTRICTION_ADDRESS:\n    //                 let accAddressModifyTx = transactions[i] as AccountAddressRestrictionModificationTransaction;\n    //                 tempData = this.extractTransactionAccountAddressRestriction(accAddressModifyTx);\n    //                 break;\n    //             case TransactionType.MODIFY_ACCOUNT_RESTRICTION_MOSAIC:\n    //                 let accMosaicModifyTx = transactions[i] as AccountMosaicRestrictionModificationTransaction;\n    //                 tempData = this.extractTransactionAccountMosaicRestriction(accMosaicModifyTx);\n    //                 break;\n    //             case TransactionType.MODIFY_ACCOUNT_RESTRICTION_OPERATION:\n    //                 let accOperationModifyTx = transactions[i] as AccountOperationRestrictionModificationTransaction;\n    //                 tempData = this.extractTransactionAccountOperationRestriction(accOperationModifyTx);\n    //                 break;\n    //             case TransactionType.MODIFY_MULTISIG_ACCOUNT:\n    //                 let modifyMultisigAccountTx = transactions[i] as ModifyMultisigAccountTransaction;\n    //                 tempData = this.extractTransactionModifyMultisigAccount(modifyMultisigAccountTx);\n    //                 break;\n    //             case TransactionType.MOSAIC_ALIAS:\n    //                 let mosaicAliasTx = transactions[i] as MosaicAliasTransaction;\n    //                 tempData = this.extractTransactionMosaicAlias(mosaicAliasTx);\n    //                 break;\n    //             case TransactionType.MOSAIC_DEFINITION:\n    //                 let mosaicDefinitionTx = transactions[i] as MosaicDefinitionTransaction;\n    //                 tempData = this.extractTransactionMosaicDefinition(mosaicDefinitionTx);\n    //                 break;\n    //             case TransactionType.MOSAIC_SUPPLY_CHANGE:\n    //                 let mosaicSupplyTx = transactions[i] as MosaicSupplyChangeTransaction;\n    //                 tempData = this.extractTransactionMosaicSupplyChange(mosaicSupplyTx);\n    //                 break;\n    //             case TransactionType.REGISTER_NAMESPACE:\n    //                 let registerNamespaceTx = transactions[i] as RegisterNamespaceTransaction;\n    //                 tempData = this.extractTransactionRegisterNamespace(registerNamespaceTx);\n    //                 break;\n    //             case TransactionType.SECRET_LOCK:\n    //                 let secretLockTx = transactions[i] as SecretLockTransaction;\n    //                 tempData = this.extractTransactionSecretLock(secretLockTx);\n    //                 break;\n    //             case TransactionType.SECRET_PROOF:\n    //                 let secretProofTx = transactions[i] as SecretProofTransaction;\n    //                 tempData = this.extractTransactionSecretProof(secretProofTx);\n    //                 break;\n    //             case TransactionType.TRANSFER:\n    //                 let transferTx = transactions[i] as TransferTransaction;\n    //                 tempData = this.extractTransactionTransfer(transferTx);\n    //                 break;\n    //             default:\n    //                 break;\n    //         }\n    //         dashboardTransaction.relatedAddress = dashboardTransaction.relatedAddress.concat(tempData.relatedAddress);\n    //         dashboardTransaction.relatedAsset = dashboardTransaction.relatedAsset.concat(tempData.relatedAsset);\n    //         dashboardTransaction.relatedNamespace = dashboardTransaction.relatedNamespace.concat(tempData.relatedNamespace);\n    //         dashboardTransaction.relatedPublicKey = dashboardTransaction.relatedPublicKey.concat(tempData.relatedPublicKey);\n    //         dashboardTransaction.searchString = dashboardTransaction.searchString.concat(tempData.searchString);\n    //         dashboardTransaction.extractedData = tempData.extractedData;\n    //         dashboardTransaction.displayList = tempData.displayList;\n    //         dashboardTransaction.transferList = tempData.transferList ? tempData.transferList: [];\n    //         dashboardTransaction.displayTips = tempData.displayTips;\n    //         dashboardTransaction.otherAssets = tempData.otherAssets;\n    //         dashboardTransaction.relatedAddress = Array.from(new Set(dashboardTransaction.relatedAddress));\n    //         dashboardTransaction.relatedAsset = Array.from(new Set(dashboardTransaction.relatedAsset));\n    //         dashboardTransaction.relatedNamespace = Array.from(new Set(dashboardTransaction.relatedNamespace));\n    //         dashboardTransaction.relatedPublicKey = Array.from(new Set(dashboardTransaction.relatedPublicKey));\n    //         dashboardTransaction.searchString = Array.from(new Set(dashboardTransaction.searchString));\n    //         formattedTransactions.push(dashboardTransaction);\n    //     }\n    //     return formattedTransactions;\n    // }\n    // formatUnconfirmedTransaction(transactions: Transaction[]): DashboardTransaction[] {\n    //     let formattedTransactions: DashboardTransaction[] = [];\n    //     for (let i = 0; i < transactions.length; ++i) {\n    //         let dashboardTransaction: DashboardTransaction = {\n    //             id: transactions[i].transactionInfo.id,\n    //             typeName: TransactionUtils.getTransactionTypeName(transactions[i].type),\n    //             signer: transactions[i].signer.publicKey,\n    //             size: transactions[i].size,\n    //             signerAddress: transactions[i].signer.address.plain(),\n    //             signerAddressPretty: transactions[i].signer.address.pretty(),\n    //             signerDisplay: this.addressConvertToName(transactions[i].signer.address.plain()),\n    //             hash: transactions[i].transactionInfo.hash,\n    //             formattedDeadline: Helper.convertDisplayDateTimeFormat(transactions[i].deadline.value.toString()),\n    //             relatedAddress: [],\n    //             relatedAsset: [],\n    //             relatedNamespace: [],\n    //             relatedPublicKey: [],\n    //             searchString: [],\n    //             extractedData: {},\n    //             displayList: new Map<string, string>(),\n    //             transferList: [],\n    //             displayTips: [],\n    //             cosignatures: null,\n    //             signedPublicKeys: [transactions[i].signer.publicKey],\n    //             otherAssets: []\n    //         };\n    //         dashboardTransaction.searchString.push(dashboardTransaction.hash);\n    //         // dashboardTransaction.relatedAddress.push(transactions[i].signer.address.plain());\n    //         // dashboardTransaction.relatedPublicKey.push(dashboardTransaction.signer);\n    //         let tempData: DashboardInnerTransaction;\n    //         let totalLength: number = 1;\n    //         switch (transactions[i].type) {\n    //             case TransactionType.ADDRESS_ALIAS:\n    //                 let addressAliasTx = transactions[i] as AddressAliasTransaction;\n    //                 tempData = this.extractTransactionAddressAlias(addressAliasTx);\n    //                 break;\n    //             case TransactionType.ADD_EXCHANGE_OFFER:\n    //                 let addExchangeOfferTx = transactions[i] as AddExchangeOfferTransaction;\n    //                 tempData = this.extractTransactionAddExchangeOffer(addExchangeOfferTx);\n    //                 break;\n    //             case TransactionType.AGGREGATE_BONDED:\n    //                 let aggregateBondedTx = transactions[i] as AggregateTransaction;\n    //                 if(aggregateBondedTx.cosignatures.length){\n    //                     dashboardTransaction.cosignatures = { \n    //                         cosigners: aggregateBondedTx.cosignatures.map(\n    //                             (x)=> { return { publicKey: x.signer.publicKey, address: x.signer.address.plain()}}\n    //                         )\n    //                     };\n    //                     dashboardTransaction.signedPublicKeys = dashboardTransaction.signedPublicKeys.concat(dashboardTransaction.cosignatures.cosigners.map(x => x.publicKey));\n    //                 }\n    //                 totalLength = aggregateBondedTx.innerTransactions.length;\n    //                 dashboardTransaction.innerTransactions = [];\n    //                 tempData = {\n    //                     signer: aggregateBondedTx.signer.publicKey,\n    //                     relatedAsset: [],\n    //                     relatedNamespace: [],\n    //                     relatedPublicKey: [],\n    //                     signerAddress: aggregateBondedTx.signer.address.plain(),\n    //                     relatedAddress: [],\n    //                     typeName: TransactionUtils.getTransactionTypeName(aggregateBondedTx.type),\n    //                     searchString: [],\n    //                     extractedData: {},\n    //                     displayList: new Map<string, string>(),\n    //                     transferList: [],\n    //                     displayTips: [],\n    //                     signerPublicKeys: [aggregateBondedTx.signer.publicKey]\n    //                 };\n    //                 for (let y = 0; y < totalLength; ++y) {\n    //                     let tempInnerData = this.extractInnerTransaction(aggregateBondedTx.innerTransactions[y]);\n    //                     tempData.relatedAddress = tempData.relatedAddress.concat(tempInnerData.relatedAddress);\n    //                     tempData.relatedAsset = tempData.relatedAsset.concat(tempInnerData.relatedAsset);\n    //                     tempData.relatedNamespace = tempData.relatedNamespace.concat(tempInnerData.relatedNamespace);\n    //                     tempData.relatedPublicKey = tempData.relatedPublicKey.concat(tempInnerData.relatedPublicKey);\n    //                     tempData.searchString = tempData.searchString.concat(tempInnerData.searchString);\n    //                     dashboardTransaction.innerTransactions.push(tempInnerData);\n    //                 }\n    //                 break;\n    //             case TransactionType.AGGREGATE_COMPLETE:\n    //                 let aggregateCompleteTx = transactions[i] as AggregateTransaction;\n    //                 if(aggregateCompleteTx.cosignatures.length){\n    //                     dashboardTransaction.cosignatures = { \n    //                         cosigners: aggregateCompleteTx.cosignatures.map(\n    //                             (x)=> { return { publicKey: x.signer.publicKey, address: x.signer.address.plain()}}\n    //                         )\n    //                     };\n    //                     dashboardTransaction.signedPublicKeys = dashboardTransaction.signedPublicKeys.concat(dashboardTransaction.cosignatures.cosigners.map(x => x.publicKey));\n    //                 }\n    //                 totalLength = aggregateCompleteTx.innerTransactions.length;\n    //                 dashboardTransaction.innerTransactions = [];\n    //                 tempData = {\n    //                     signer: aggregateCompleteTx.signer.publicKey,\n    //                     relatedAsset: [],\n    //                     relatedNamespace: [],\n    //                     relatedPublicKey: [],\n    //                     signerAddress: aggregateCompleteTx.signer.address.plain(),\n    //                     relatedAddress: [],\n    //                     typeName: TransactionUtils.getTransactionTypeName(aggregateCompleteTx.type),\n    //                     searchString: [],\n    //                     extractedData: {},\n    //                     displayList: new Map<string, string>(),\n    //                     displayTips: [],\n    //                     signerPublicKeys: [aggregateCompleteTx.signer.publicKey]\n    //                 };\n    //                 for (let x = 0; x < totalLength; ++x) {\n    //                     let tempInnerData = this.extractInnerTransaction(aggregateCompleteTx.innerTransactions[x]);\n    //                     tempData.relatedAddress = tempData.relatedAddress.concat(tempInnerData.relatedAddress);\n    //                     tempData.relatedAsset = tempData.relatedAsset.concat(tempInnerData.relatedAsset);\n    //                     tempData.relatedNamespace = tempData.relatedNamespace.concat(tempInnerData.relatedNamespace);\n    //                     tempData.relatedPublicKey = tempData.relatedPublicKey.concat(tempInnerData.relatedPublicKey);\n    //                     tempData.searchString = tempData.searchString.concat(tempInnerData.searchString);\n    //                     dashboardTransaction.innerTransactions.push(tempInnerData);\n    //                 }\n    //                 break;\n    //             case TransactionType.CHAIN_CONFIGURE:\n    //                 let chainConfigureTx = transactions[i] as ChainConfigTransaction;\n    //                 tempData = this.extractTransactionChainConfig(chainConfigureTx);\n    //                 break;\n    //             case TransactionType.CHAIN_UPGRADE:\n    //                 let chainUpgradeTx = transactions[i] as ChainUpgradeTransaction;\n    //                 tempData = this.extractTransactionChainUpgrade(chainUpgradeTx);\n    //                 break;\n    //             case TransactionType.EXCHANGE_OFFER:\n    //                 let exchangeOfferTx = transactions[i] as ExchangeOfferTransaction;\n    //                 tempData = this.extractTransactionExchangeOffer(exchangeOfferTx);\n    //                 break;\n    //             case TransactionType.REMOVE_EXCHANGE_OFFER:\n    //                 let removeExchangeOfferTx = transactions[i] as RemoveExchangeOfferTransaction;\n    //                 tempData = this.extractTransactionRemoveExchangeOffer(removeExchangeOfferTx);\n    //                 break;\n    //             case TransactionType.LINK_ACCOUNT:\n    //                 let accountLinkTx = transactions[i] as AccountLinkTransaction;\n    //                 tempData = this.extractTransactionAccountLink(accountLinkTx);\n    //                 break;\n    //             case TransactionType.LOCK:\n    //                 let lockFundTx = transactions[i] as LockFundsTransaction;\n    //                 tempData = this.extractTransactionLockFunds(lockFundTx);\n    //                 break;\n    //             // case TransactionType.MODIFY_ACCOUNT_METADATA:\n    //             //     let modifyAccountMetadataTx = transactions[i] as ModifyMetadataTransaction;\n    //             //     tempData = this.extractTransactionModifyAccountMetadata(modifyAccountMetadataTx);\n    //             //     break;\n    //             // case TransactionType.MODIFY_MOSAIC_METADATA:\n    //             //     let modifyMosaicMetadataTx = transactions[i] as ModifyMetadataTransaction;\n    //             //     tempData = this.extractTransactionModifyMosaicMetadata(modifyMosaicMetadataTx);\n    //             //     break;\n    //             // case TransactionType.MODIFY_NAMESPACE_METADATA:\n    //             //     let modifyNamespaceMetadataTx = transactions[i] as ModifyMetadataTransaction;\n    //             //     tempData = this.extractTransactionModifyNamespaceMetadata(modifyNamespaceMetadataTx);\n    //             //     break;\n    //             case TransactionType.MODIFY_ACCOUNT_RESTRICTION_ADDRESS:\n    //                 let accAddressModifyTx = transactions[i] as AccountAddressRestrictionModificationTransaction;\n    //                 tempData = this.extractTransactionAccountAddressRestriction(accAddressModifyTx);\n    //                 break;\n    //             case TransactionType.MODIFY_ACCOUNT_RESTRICTION_MOSAIC:\n    //                 let accMosaicModifyTx = transactions[i] as AccountMosaicRestrictionModificationTransaction;\n    //                 tempData = this.extractTransactionAccountMosaicRestriction(accMosaicModifyTx);\n    //                 break;\n    //             case TransactionType.MODIFY_ACCOUNT_RESTRICTION_OPERATION:\n    //                 let accOperationModifyTx = transactions[i] as AccountOperationRestrictionModificationTransaction;\n    //                 tempData = this.extractTransactionAccountOperationRestriction(accOperationModifyTx);\n    //                 break;\n    //             case TransactionType.MODIFY_MULTISIG_ACCOUNT:\n    //                 let modifyMultisigAccountTx = transactions[i] as ModifyMultisigAccountTransaction;\n    //                 tempData = this.extractTransactionModifyMultisigAccount(modifyMultisigAccountTx);\n    //                 break;\n    //             case TransactionType.MOSAIC_ALIAS:\n    //                 let mosaicAliasTx = transactions[i] as MosaicAliasTransaction;\n    //                 tempData = this.extractTransactionMosaicAlias(mosaicAliasTx);\n    //                 break;\n    //             case TransactionType.MOSAIC_DEFINITION:\n    //                 let mosaicDefinitionTx = transactions[i] as MosaicDefinitionTransaction;\n    //                 tempData = this.extractTransactionMosaicDefinition(mosaicDefinitionTx);\n    //                 break;\n    //             case TransactionType.MOSAIC_SUPPLY_CHANGE:\n    //                 let mosaicSupplyTx = transactions[i] as MosaicSupplyChangeTransaction;\n    //                 tempData = this.extractTransactionMosaicSupplyChange(mosaicSupplyTx);\n    //                 break;\n    //             case TransactionType.REGISTER_NAMESPACE:\n    //                 let registerNamespaceTx = transactions[i] as RegisterNamespaceTransaction;\n    //                 tempData = this.extractTransactionRegisterNamespace(registerNamespaceTx);\n    //                 break;\n    //             case TransactionType.SECRET_LOCK:\n    //                 let secretLockTx = transactions[i] as SecretLockTransaction;\n    //                 tempData = this.extractTransactionSecretLock(secretLockTx);\n    //                 break;\n    //             case TransactionType.SECRET_PROOF:\n    //                 let secretProofTx = transactions[i] as SecretProofTransaction;\n    //                 tempData = this.extractTransactionSecretProof(secretProofTx);\n    //                 break;\n    //             case TransactionType.TRANSFER:\n    //                 let transferTx = transactions[i] as TransferTransaction;\n    //                 tempData = this.extractTransactionTransfer(transferTx);\n    //                 break;\n    //             default:\n    //                 break;\n    //         }\n    //         dashboardTransaction.relatedAddress = dashboardTransaction.relatedAddress.concat(tempData.relatedAddress);\n    //         dashboardTransaction.relatedAsset = dashboardTransaction.relatedAsset.concat(tempData.relatedAsset);\n    //         dashboardTransaction.relatedNamespace = dashboardTransaction.relatedNamespace.concat(tempData.relatedNamespace);\n    //         dashboardTransaction.relatedPublicKey = dashboardTransaction.relatedPublicKey.concat(tempData.relatedPublicKey);\n    //         dashboardTransaction.searchString = dashboardTransaction.searchString.concat(tempData.searchString);\n    //         dashboardTransaction.extractedData = tempData.extractedData;\n    //         dashboardTransaction.displayList = tempData.displayList;\n    //         dashboardTransaction.transferList = tempData.transferList ? tempData.transferList: [];\n    //         dashboardTransaction.displayTips = tempData.displayTips;\n    //         dashboardTransaction.relatedAddress = Array.from(new Set(dashboardTransaction.relatedAddress));\n    //         dashboardTransaction.relatedAsset = Array.from(new Set(dashboardTransaction.relatedAsset));\n    //         dashboardTransaction.relatedNamespace = Array.from(new Set(dashboardTransaction.relatedNamespace));\n    //         dashboardTransaction.relatedPublicKey = Array.from(new Set(dashboardTransaction.relatedPublicKey));\n    //         dashboardTransaction.searchString = Array.from(new Set(dashboardTransaction.searchString));\n    //         formattedTransactions.push(dashboardTransaction);\n    //     }\n    //     return formattedTransactions;\n    // }\n    extractTransactionTransfer(transferTx) {\n        let transactionDetails = {\n            signer: transferTx.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [transferTx.signer.publicKey],\n            signerAddress: transferTx.signer.address.plain(),\n            relatedAddress: [transferTx.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(transferTx.type),\n            searchString: [],\n            transferList: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [transferTx.signer.publicKey],\n            otherAssets: [],\n        };\n        let sendTo = \"\";\n        let toType = \"\";\n        if (transferTx.recipient instanceof tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"NamespaceId\"]) {\n            let recipientNamespaceIdHex = transferTx.recipient.toHex().toUpperCase();\n            transactionDetails.relatedNamespace.push(recipientNamespaceIdHex);\n            sendTo = recipientNamespaceIdHex;\n            toType = \"namespace\";\n        }\n        else {\n            let plainRecipientAddress = transferTx.recipient.plain();\n            transactionDetails.relatedAddress.push(transferTx.recipient.plain());\n            sendTo = plainRecipientAddress;\n            toType = \"address\";\n        }\n        let fromToRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        // sender\n        let senderDisplay = this.addressConvertToName(transactionDetails.signerAddress);\n        //let senderTip: DashboardTip = DashboardService.createAddressTip(senderDisplay, transactionDetails.signerAddress);\n        // to who\n        //let recipientTip: DashboardTip = toType === \"namespace\" ? DashboardService.createNamespaceIDTip(sendTo): DashboardService.createAddressTip(this.addressConvertToName(sendTo), sendTo);\n        let transferTip;\n        if (toType === \"namespace\") {\n            transferTip = DashboardService.createTransferUnresolvedTip(transactionDetails.signerAddress, senderDisplay, sendTo, sendTo);\n        }\n        else {\n            transferTip = DashboardService.createTransferTip(transactionDetails.signerAddress, senderDisplay, sendTo, this.addressConvertToName(sendTo));\n        }\n        // fromToRowTip.rowTips.push(senderTip);\n        // fromToRowTip.rowTips.push(DashboardService.createToRightArrowTip());\n        fromToRowTip.rowTips.push(transferTip);\n        let messageTypeString;\n        let messageType;\n        if (transferTx.message.payload.length === 0) {\n            messageTypeString = \"Empty message\";\n            messageType = \"empty\";\n        }\n        else if (transferTx.message.type === 0) {\n            messageTypeString = \"Plain message\";\n            messageType = \"plain\";\n        }\n        else if (transferTx.message.type === 1) {\n            messageTypeString = \"Encrypted message\";\n            messageType = \"encrypted\";\n        }\n        else {\n            messageTypeString = \"Other message\";\n            messageType = \"other\";\n        }\n        let messageTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].MESSAGE);\n        messageTip.displayValue = messageTypeString;\n        messageTip.valueType = messageType;\n        messageTip.value = transferTx.message.payload;\n        fromToRowTip.rowTips.push(messageTip);\n        transactionDetails.displayTips.push(fromToRowTip);\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        newRowTip.rowTips.push(messageTip);\n        let transfer = [];\n        let txnAmount;\n        if (transferTx.mosaics.length) {\n            for (let i = 0; i < transferTx.mosaics.length; ++i) {\n                let valueType = \"asset\";\n                let mosaicIdHex = transferTx.mosaics[i].id.toHex().toUpperCase();\n                if (Array.from(namespaceIdFirstCharacterString).includes(mosaicIdHex.substring(0, 1))) {\n                    valueType = \"namespace\";\n                    transactionDetails.relatedNamespace.push(mosaicIdHex);\n                }\n                else {\n                    transactionDetails.relatedAsset.push(mosaicIdHex);\n                }\n                let newTransfer = {\n                    from: transactionDetails.signerAddress,\n                    to: sendTo,\n                    toType: toType,\n                    sendingType: valueType,\n                    value: mosaicIdHex,\n                    valueDisplay: mosaicIdHex,\n                    amount: transferTx.mosaics[i].amount.compact()\n                };\n                if (mosaicIdHex.toUpperCase() === nativeTokenAssetId.value.toUpperCase()) {\n                    txnAmount = transferTx.mosaics[i].amount.compact();\n                }\n                let resolved = false;\n                if (mosaicIdHex.toUpperCase() === nativeTokenAssetId.value.toUpperCase() || mosaicIdHex.toUpperCase() === nativeTokenNamespaceId.value.toUpperCase()) {\n                    newTransfer.value = nativeTokenAssetId.value.toUpperCase();\n                    valueType = \"asset\";\n                    newTransfer.valueDisplay = \"XPX\";\n                    newTransfer.amount = DashboardService.convertToExactNativeAmount(newTransfer.amount);\n                    resolved = true;\n                }\n                transfer.push(newTransfer);\n                transactionDetails.transferList.push(newTransfer);\n                let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n                //let sendingAmountTip: DashboardTip = resolved ? DashboardService.createExactAmountTip(newTransfer.amount) : DashboardService.createAbsoluteAmountTip(newTransfer.amount);\n                // send what\n                //let sendingTip: DashboardTip = valueType === \"asset\" ? DashboardService.createAssetTip(newTransfer.valueDisplay, newTransfer.value) : DashboardService.createNamespaceIDTip(newTransfer.value);\n                let amountTip;\n                if (valueType === \"asset\") {\n                    amountTip = DashboardService.createAssetAmountTip(newTransfer.amount, newTransfer.value, newTransfer.valueDisplay, true);\n                    // get other assets\n                    if (mosaicIdHex.toUpperCase() != nativeTokenAssetId.value.toUpperCase() && mosaicIdHex.toUpperCase() != nativeTokenNamespaceId.value.toUpperCase()) {\n                        let otherAsset = DashboardService.displayOtherAsset(newTransfer.amount, newTransfer.value, transferTx.mosaics[i].id);\n                        transactionDetails.otherAssets.push(otherAsset);\n                    }\n                }\n                else {\n                    amountTip = DashboardService.createNamespaceAmountTip(newTransfer.amount, newTransfer.value, newTransfer.valueDisplay, true);\n                }\n                newRowTip.rowTips.push(amountTip);\n                //newRowTip.rowTips.push(sendingTip);              \n                transactionDetails.displayTips.push(newRowTip);\n            }\n        }\n        let data = {\n            transferList: transfer,\n            recipient: sendTo,\n            recipientType: toType,\n            recipientName: this.addressConvertToName(sendTo),\n            messageTypeString: messageTypeString,\n            messageType: messageType,\n            messagePayload: transferTx.message.payload,\n            amount: txnAmount ? _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].convertToExact(txnAmount, 6) : '',\n        };\n        //transactionDetails.displayTips.push(newRowTip);\n        transactionDetails.extractedData = data;\n        //transactionDetails.displayList.set(\"Address\", data.address);\n        //transactionDetails.displayList.set(\"Namespace ID\", data.namespaceId);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionAddressAlias(addressAliasTransaction) {\n        let transactionDetails = {\n            signer: addressAliasTransaction.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [addressAliasTransaction.namespaceId.toHex().toUpperCase()],\n            relatedPublicKey: [addressAliasTransaction.signer.publicKey],\n            signerAddress: addressAliasTransaction.signer.address.plain(),\n            relatedAddress: [addressAliasTransaction.signer.address.plain(), addressAliasTransaction.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(addressAliasTransaction.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [addressAliasTransaction.signer.publicKey]\n        };\n        let linkType = addressAliasTransaction.actionType === 0 ? \"Link\" : \"Unlink\";\n        let data = {\n            linkType: linkType,\n            address: addressAliasTransaction.address.pretty(),\n            addressPlain: addressAliasTransaction.address.plain(),\n            namespaceId: addressAliasTransaction.namespaceId.toHex().toUpperCase(),\n        };\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let addressDisplay = this.addressConvertToName(data.addressPlain);\n        let namespaceIdDisplay = data.namespaceId;\n        if (linkType === \"Link\") {\n            newRowTip.rowTips.push(DashboardService.createAddressAliasTip(data.namespaceId, namespaceIdDisplay, data.addressPlain, addressDisplay));\n        }\n        else {\n            newRowTip.rowTips.push(DashboardService.createRemoveAddressAliasTip(data.namespaceId, namespaceIdDisplay, data.addressPlain, addressDisplay));\n        }\n        transactionDetails.displayTips.push(newRowTip);\n        transactionDetails.extractedData = data;\n        // transactionDetails.displayList.set(\"Address\", data.address);\n        // transactionDetails.displayList.set(\"Namespace ID\", data.namespaceId);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionAddExchangeOffer(addExchangeOfferTransaction) {\n        let transactionDetails = {\n            signer: addExchangeOfferTransaction.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [addExchangeOfferTransaction.signer.publicKey],\n            signerAddress: addExchangeOfferTransaction.signer.address.plain(),\n            relatedAddress: [addExchangeOfferTransaction.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(addExchangeOfferTransaction.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [addExchangeOfferTransaction.signer.publicKey]\n        };\n        let offerArray = [];\n        for (let i = 0; i < addExchangeOfferTransaction.offers.length; ++i) {\n            let cost = addExchangeOfferTransaction.offers[i].cost.compact();\n            let duration = addExchangeOfferTransaction.offers[i].duration.compact();\n            let mosaicAmount = addExchangeOfferTransaction.offers[i].mosaicAmount.compact();\n            let assetId = addExchangeOfferTransaction.offers[i].mosaicId.toHex().toUpperCase();\n            let type = addExchangeOfferTransaction.offers[i].type === 0 ? \"Sell offer\" : \"Buy offer\";\n            offerArray.push({\n                cost: cost,\n                duration: duration,\n                assetAmount: mosaicAmount,\n                assetId: assetId,\n                type: type\n            });\n            let exactAmount = DashboardService.convertToExactNativeAmount(cost);\n            let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n            let typeTip = DashboardService.createSimpleStringTip(type);\n            let durationTip = DashboardService.createDurationTip(duration);\n            let assetAmountTip = DashboardService.createAbsoluteAmountTip(mosaicAmount);\n            let assetTip = DashboardService.createAssetTip(assetId);\n            let costTip = DashboardService.createStringTip(exactAmount.toString(), \"Cost:\", nativeTokenName.value);\n            newRowTip.rowTips.push(typeTip);\n            newRowTip.rowTips.push(durationTip);\n            newRowTip.rowTips.push(assetAmountTip);\n            newRowTip.rowTips.push(assetTip);\n            newRowTip.rowTips.push(costTip);\n            transactionDetails.displayTips.push(newRowTip);\n        }\n        let data = {\n            offers: offerArray\n        };\n        transactionDetails.extractedData = data;\n        /*\n        transactionDetails.displayList.set(\"Offers Added\", data.offers.map(\n            (offer)=> `${offer.type}: ${offer.assetAmount} ${offer.assetId} for ${offer.cost} per unit (Duration: ${offer.duration} blocks)`).join('<br>')\n        );\n        */\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionChainConfig(chainConfigTransaction) {\n        let transactionDetails = {\n            signer: chainConfigTransaction.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [chainConfigTransaction.signer.publicKey],\n            signerAddress: chainConfigTransaction.signer.address.plain(),\n            relatedAddress: [chainConfigTransaction.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(chainConfigTransaction.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [chainConfigTransaction.signer.publicKey]\n        };\n        let data = {\n            applyHeightDelta: chainConfigTransaction.applyHeightDelta.compact(),\n            networkConfig: chainConfigTransaction.networkConfig,\n            supportedEntityVersions: chainConfigTransaction.supportedEntityVersions\n        };\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let applyHeightDeltaTip = DashboardService.createStringTip(data.applyHeightDelta.toString(), \"Apply after\", \"blocks\");\n        newRowTip.rowTips.push(applyHeightDeltaTip);\n        transactionDetails.displayTips.push(newRowTip);\n        transactionDetails.extractedData = data;\n        //transactionDetails.displayList.set(\"Apply after\", `${data.applyHeightDelta} `);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionChainUpgrade(chainUpgradeTransaction) {\n        let transactionDetails = {\n            signer: chainUpgradeTransaction.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [chainUpgradeTransaction.signer.publicKey],\n            signerAddress: chainUpgradeTransaction.signer.address.plain(),\n            relatedAddress: [chainUpgradeTransaction.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(chainUpgradeTransaction.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [chainUpgradeTransaction.signer.publicKey]\n        };\n        let data = {\n            newVersion: chainUpgradeTransaction.newBlockchainVersion.compact(),\n            upgradePeriod: chainUpgradeTransaction.upgradePeriod.compact()\n        };\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let versionTip = DashboardService.createStringTip(data.newVersion.toString(), \"New version:\");\n        let upgradePeriodTip = DashboardService.createStringTip(data.upgradePeriod.toString(), \"Upgrade period:\" + \"blocks\");\n        newRowTip.rowTips.push(versionTip);\n        newRowTip.rowTips.push(upgradePeriodTip);\n        transactionDetails.displayTips.push(newRowTip);\n        transactionDetails.extractedData = data;\n        // transactionDetails.displayList.set(\"New Version\", `${data.newVersion}`);\n        // transactionDetails.displayList.set(\"Upgrade Period\", `${data.upgradePeriod} blocks`);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionExchangeOffer(exchangeOfferTransaction) {\n        let transactionDetails = {\n            signer: exchangeOfferTransaction.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [exchangeOfferTransaction.signer.publicKey],\n            signerAddress: exchangeOfferTransaction.signer.address.plain(),\n            relatedAddress: [exchangeOfferTransaction.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(exchangeOfferTransaction.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [exchangeOfferTransaction.signer.publicKey]\n        };\n        let exchangeOfferArray = [];\n        for (let i = 0; i < exchangeOfferTransaction.offers.length; ++i) {\n            let cost = exchangeOfferTransaction.offers[i].cost.compact();\n            let owner = exchangeOfferTransaction.offers[i].owner; // Owner of the offer we want to accept\n            let mosaicAmount = exchangeOfferTransaction.offers[i].mosaicAmount.compact();\n            let assetId = exchangeOfferTransaction.offers[i].mosaicId.toHex().toUpperCase();\n            let type = exchangeOfferTransaction.offers[i].type === 0 ? \"Sell offer\" : \"Buy offer\";\n            exchangeOfferArray.push({\n                cost: cost,\n                owner: owner,\n                assetAmount: mosaicAmount,\n                assetId: assetId,\n                type: type\n            });\n            let exactAmount = DashboardService.convertToExactNativeAmount(cost);\n            let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n            let typeTip = DashboardService.createSimpleStringTip(type);\n            let publicKeyTip = DashboardService.createStringTip(owner.publicKey, \"Owner: \");\n            let assetAmountTip = DashboardService.createAbsoluteAmountTip(mosaicAmount);\n            let assetTip = DashboardService.createAssetTip(assetId);\n            let costTip = DashboardService.createStringTip(exactAmount.toString(), \"Cost:\", nativeTokenName.value);\n            newRowTip.rowTips.push(typeTip);\n            newRowTip.rowTips.push(publicKeyTip);\n            newRowTip.rowTips.push(assetAmountTip);\n            newRowTip.rowTips.push(assetTip);\n            newRowTip.rowTips.push(costTip);\n            transactionDetails.displayTips.push(newRowTip);\n        }\n        let data = {\n            exchangeOffers: exchangeOfferArray\n        };\n        transactionDetails.extractedData = data;\n        // transactionDetails.displayList.set(\"Offer Exchanges\", data.exchangeOffers.map(\n        //     (arr)=> `${arr.type}: Offer ${arr.assetAmount} ${arr.assetId} from ${arr.owner} for ${arr.cost} per unit`).join(\"<br>\")\n        // );\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionRemoveExchangeOffer(removeExchangeOfferTransaction) {\n        let transactionDetails = {\n            signer: removeExchangeOfferTransaction.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [removeExchangeOfferTransaction.signer.publicKey],\n            signerAddress: removeExchangeOfferTransaction.signer.address.plain(),\n            relatedAddress: [removeExchangeOfferTransaction.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(removeExchangeOfferTransaction.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [removeExchangeOfferTransaction.signer.publicKey]\n        };\n        let offerRemoveArray = [];\n        for (let i = 0; i < removeExchangeOfferTransaction.offers.length; ++i) {\n            let assetId = removeExchangeOfferTransaction.offers[i].mosaicId.toHex().toUpperCase();\n            let type = removeExchangeOfferTransaction.offers[i].offerType === 0 ? \"Sell offer\" : \"Buy offer\";\n            offerRemoveArray.push({\n                assetId: assetId,\n                type: type\n            });\n            transactionDetails.relatedAsset.push(assetId);\n            let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n            let typeTip = DashboardService.createSimpleStringTip(type);\n            let assetTip = DashboardService.createAssetTip(assetId);\n            newRowTip.rowTips.push(typeTip);\n            newRowTip.rowTips.push(assetTip);\n            transactionDetails.displayTips.push(newRowTip);\n        }\n        let data = {\n            offersRemove: offerRemoveArray\n        };\n        transactionDetails.extractedData = data;\n        //transactionDetails.displayList.set(\"Removed Offers\", data.offersRemove.map((arr)=> `${arr.type}: ${arr.assetId}`).join(\"<br>\"));\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionAccountLink(accountLinkTransaction) {\n        let transactionDetails = {\n            signer: accountLinkTransaction.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [accountLinkTransaction.signer.publicKey],\n            signerAddress: accountLinkTransaction.signer.address.plain(),\n            relatedAddress: [accountLinkTransaction.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(accountLinkTransaction.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [accountLinkTransaction.signer.publicKey]\n        };\n        let publicKey = accountLinkTransaction.remoteAccountKey;\n        let data = {\n            remoteAccountKey: publicKey,\n            linkAction: accountLinkTransaction.linkAction === 0 ? \"Link\" : \"Unlink\"\n        };\n        transactionDetails.extractedData = data;\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let remoteAddress = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"PublicAccount\"].createFromPublicKey(data.remoteAccountKey, localNetworkType.value).address.plain();\n        let remoteAddressPretty = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"PublicAccount\"].createFromPublicKey(data.remoteAccountKey, localNetworkType.value).address.pretty();\n        let searchedAddress = this.addressConvertToName(remoteAddress);\n        let publicKeyDisplay = searchedAddress === remoteAddressPretty ? data.remoteAccountKey : searchedAddress;\n        if (data.linkAction === \"Link\") {\n            newRowTip.rowTips.push(DashboardService.createAccountLinkTip(data.remoteAccountKey, publicKeyDisplay));\n        }\n        else {\n            newRowTip.rowTips.push(DashboardService.createAccountUnlinkTip(data.remoteAccountKey, publicKeyDisplay));\n        }\n        transactionDetails.displayTips.push(newRowTip);\n        // transactionDetails.displayList.set(\"Action\", `${data.linkAction}`);\n        // transactionDetails.displayList.set(\"Linked Account\", `${data.remoteAccountKey}`);   \n        transactionDetails.relatedPublicKey.push(publicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionLockFunds(lockFundsTransaction) {\n        let transactionDetails = {\n            signer: lockFundsTransaction.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [lockFundsTransaction.signer.publicKey],\n            signerAddress: lockFundsTransaction.signer.address.plain(),\n            relatedAddress: [lockFundsTransaction.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(lockFundsTransaction.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [lockFundsTransaction.signer.publicKey]\n        };\n        let lockedHash = lockFundsTransaction.hash;\n        let mosaicIdHex = lockFundsTransaction.mosaic.id.toHex().toUpperCase();\n        let data = {\n            lockedHash: lockFundsTransaction.hash,\n            duration: lockFundsTransaction.duration.compact(),\n            mosaicId: mosaicIdHex,\n            mosaicAmount: lockFundsTransaction.mosaic.amount.compact()\n        };\n        transactionDetails.extractedData = data;\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let lockHashTip = DashboardService.createTxHashTip(data.lockedHash);\n        let durationTip = DashboardService.createDurationTip(data.duration);\n        let assetAmountTip = DashboardService.createAssetAmountTip(DashboardService.convertToExactNativeAmount(data.mosaicAmount), data.mosaicId, \"XPX\", true);\n        // let assetIdTip = DashboardService.createAssetTip(data.mosaicId);\n        // let mosaicAmountTip = DashboardService.createExactAmountTip(DashboardService.convertToExactNativeAmount(data.mosaicAmount));\n        //assetIdTip.displayValue = \"XPX\";\n        newRowTip.rowTips.push(lockHashTip);\n        newRowTip.rowTips.push(durationTip);\n        newRowTip.rowTips.push(assetAmountTip);\n        // newRowTip.rowTips.push(assetIdTip);\n        transactionDetails.displayTips.push(newRowTip);\n        // transactionDetails.displayList.set(\"Locked Hash\", `${data.lockedHash}`);\n        // transactionDetails.displayList.set(\"Duration\", `${data.duration} blocks`);\n        // transactionDetails.displayList.set(\"Asset ID\", `${data.mosaicId}`);\n        // transactionDetails.displayList.set(\"Asset Amount\", `${data.mosaicAmount}`);\n        transactionDetails.searchString.push(lockedHash);\n        transactionDetails.relatedAsset.push(mosaicIdHex);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    // extractTransactionModifyAccountMetadata(modifyAccountMetadataTx: ModifyMetadataTransaction): DashboardInnerTransaction {\n    //     let transactionDetails: DashboardInnerTransaction = {\n    //         signer: modifyAccountMetadataTx.signer.publicKey,\n    //         relatedAsset: [],\n    //         relatedNamespace: [],\n    //         relatedPublicKey: [modifyAccountMetadataTx.signer.publicKey],\n    //         signerAddress: modifyAccountMetadataTx.signer.address.plain(),\n    //         relatedAddress: [modifyAccountMetadataTx.signer.address.plain()],\n    //         typeName: TransactionUtils.getTransactionTypeName(modifyAccountMetadataTx.type),\n    //         searchString: [],\n    //         extractedData: {},\n    //         displayList: new Map<string, string>(),\n    //         displayTips: [],\n    //         signerPublicKeys: [modifyAccountMetadataTx.signer.publicKey]\n    //     };\n    //     let metadataId = modifyAccountMetadataTx.metadataId;\n    //     let metadataType = \"Address\";\n    //     let modifications = [];\n    //     let modificationsTip: DashboardTip[] = [];\n    //     for (let i = 0; i < modifyAccountMetadataTx.modifications.length; ++i) {\n    //         let key = modifyAccountMetadataTx.modifications[i].key;\n    //         let type = modifyAccountMetadataTx.modifications[i].type === 0 ? \"Add\" : \"Remove\";\n    //         let value = modifyAccountMetadataTx.modifications[i].value;\n    //         modifications.push({\n    //             key: key,\n    //             value: value,\n    //             type: type\n    //         });\n    //         modificationsTip.push(DashboardService.createSimpleStringTip(`${type}-${key}:${value}`));\n    //     }\n    //     let data = {\n    //         metadataId: metadataId,\n    //         metadataType: metadataType,\n    //         modifications: modifications\n    //     };\n    //     transactionDetails.extractedData = data;\n    //     let newRowTip = new RowDashboardTip();\n    //     let metadataIdTip = DashboardService.createStringTip(data.metadataId, \"Metadata ID:\");\n    //     let metadataTypeTip = DashboardService.createSimpleStringTip(data.metadataType);\n    //     let allTip: DashboardTip[] = [ metadataIdTip, metadataTypeTip];\n    //     allTip = allTip.concat(modificationsTip);\n    //     newRowTip.rowTips = allTip;\n    //     transactionDetails.displayTips.push(newRowTip);\n    //     // transactionDetails.displayList.set(\"Type\", `${data.metadataType}`);\n    //     // transactionDetails.displayList.set(\"Address\", `${data.metadataId}`);\n    //     // transactionDetails.displayList.set(\"Modifications\", data.modifications.map((modi)=> `${modi.type}: '${modi.value}' into '${modi.key}' key`).join(\"<br>\"));\n    //     transactionDetails.relatedAddress.push(metadataId);\n    //     transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n    //     transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n    //     transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n    //     transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n    //     return transactionDetails;\n    // }\n    // extractTransactionModifyMosaicMetadata(modifyMosaicMetadataTx: ModifyMetadataTransaction): DashboardInnerTransaction {\n    //     let transactionDetails: DashboardInnerTransaction = {\n    //         signer: modifyMosaicMetadataTx.signer.publicKey,\n    //         relatedAsset: [],\n    //         relatedNamespace: [],\n    //         relatedPublicKey: [modifyMosaicMetadataTx.signer.publicKey],\n    //         signerAddress: modifyMosaicMetadataTx.signer.address.plain(),\n    //         relatedAddress: [modifyMosaicMetadataTx.signer.address.plain()],\n    //         typeName: TransactionUtils.getTransactionTypeName(modifyMosaicMetadataTx.type),\n    //         searchString: [],\n    //         extractedData: {},\n    //         displayList: new Map<string, string>(),\n    //         displayTips: [],\n    //         signerPublicKeys: [modifyMosaicMetadataTx.signer.publicKey]\n    //     };\n    //     let metadataId = modifyMosaicMetadataTx.metadataId;\n    //     let metadataType = \"Asset\";\n    //     let modifications = [];\n    //     let modificationsTip: DashboardTip[] = [];\n    //     for (let i = 0; i < modifyMosaicMetadataTx.modifications.length; ++i) {\n    //         let key = modifyMosaicMetadataTx.modifications[i].key;\n    //         let type = modifyMosaicMetadataTx.modifications[i].type === 0 ? \"Add\" : \"Remove\";\n    //         let value = modifyMosaicMetadataTx.modifications[i].value;\n    //         modifications.push({\n    //             key: key,\n    //             value: value,\n    //             type: type\n    //         });\n    //         modificationsTip.push(DashboardService.createSimpleStringTip(`${type}-${key}:${value}`));\n    //     }\n    //     let data = {\n    //         metadataId: metadataId,\n    //         metadataType: metadataType,\n    //         modifications: modifications\n    //     };\n    //     transactionDetails.extractedData = data;\n    //     let newRowTip = new RowDashboardTip();\n    //     let metadataIdTip = DashboardService.createStringTip(data.metadataId, \"Metadata ID:\");\n    //     let metadataTypeTip = DashboardService.createSimpleStringTip(data.metadataType);\n    //     let allTip: DashboardTip[] = [ metadataIdTip, metadataTypeTip];\n    //     allTip = allTip.concat(modificationsTip);\n    //     newRowTip.rowTips = allTip;\n    //     transactionDetails.displayTips.push(newRowTip);\n    //     // transactionDetails.displayList.set(\"Type\", `${data.metadataType}`);\n    //     // transactionDetails.displayList.set(\"Asset ID\", `${data.metadataId}`);\n    //     // transactionDetails.displayList.set(\"Modifications\", data.modifications.map((modi)=> `${modi.type}: '${modi.value}' into '${modi.key}' key`).join(\"<br>\"));\n    //     transactionDetails.relatedAsset.push(metadataId);\n    //     transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n    //     transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n    //     transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n    //     transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n    //     return transactionDetails;\n    // }\n    // extractTransactionModifyNamespaceMetadata(modifyNamespaceMetadataTx: ModifyMetadataTransaction): DashboardInnerTransaction {\n    //     let transactionDetails: DashboardInnerTransaction = {\n    //         signer: modifyNamespaceMetadataTx.signer.publicKey,\n    //         relatedAsset: [],\n    //         relatedNamespace: [],\n    //         relatedPublicKey: [modifyNamespaceMetadataTx.signer.publicKey],\n    //         signerAddress: modifyNamespaceMetadataTx.signer.address.plain(),\n    //         relatedAddress: [modifyNamespaceMetadataTx.signer.address.plain()],\n    //         typeName: TransactionUtils.getTransactionTypeName(modifyNamespaceMetadataTx.type),\n    //         searchString: [],\n    //         extractedData: {},\n    //         displayList: new Map<string, string>(),\n    //         displayTips: [],\n    //         signerPublicKeys: [modifyNamespaceMetadataTx.signer.publicKey]\n    //     };\n    //     let metadataId = modifyNamespaceMetadataTx.metadataId;\n    //     let metadataType = \"Namespace\";\n    //     let modifications = [];\n    //     let modificationsTip: DashboardTip[] = [];\n    //     for (let i = 0; i < modifyNamespaceMetadataTx.modifications.length; ++i) {\n    //         let key = modifyNamespaceMetadataTx.modifications[i].key;\n    //         let type = modifyNamespaceMetadataTx.modifications[i].type === 0 ? \"Add\" : \"Remove\";\n    //         let value = modifyNamespaceMetadataTx.modifications[i].value;\n    //         modifications.push({\n    //             key: key,\n    //             value: value,\n    //             type: type\n    //         });\n    //         modificationsTip.push(DashboardService.createSimpleStringTip(`${type}-${key}:${value}`));\n    //     }\n    //     let data = {\n    //         metadataId: metadataId,\n    //         metadataType: metadataType,\n    //         modifications: modifications\n    //     };\n    //     transactionDetails.extractedData = data;\n    //     let newRowTip = new RowDashboardTip();\n    //     let metadataIdTip = DashboardService.createStringTip(data.metadataId, \"Metadata ID:\");\n    //     let metadataTypeTip = DashboardService.createSimpleStringTip(data.metadataType);\n    //     let allTip: DashboardTip[] = [ metadataIdTip, metadataTypeTip];\n    //     allTip = allTip.concat(modificationsTip);\n    //     newRowTip.rowTips = allTip;\n    //     transactionDetails.displayTips.push(newRowTip);\n    //     // transactionDetails.displayList.set(\"Type\", `${data.metadataType}`);\n    //     // transactionDetails.displayList.set(\"Namespace ID\", `${data.metadataId}`);\n    //     // transactionDetails.displayList.set(\"Modifications\", data.modifications.map((modi)=> `${modi.type}: '${modi.value}' into '${modi.key}' key`).join(\"<br>\"));\n    //     transactionDetails.relatedNamespace.push(metadataId);\n    //     transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n    //     transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n    //     transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n    //     transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n    //     return transactionDetails;\n    // }\n    extractTransactionAccountAddressRestriction(accAddressRestrictModification) {\n        let transactionDetails = {\n            signer: accAddressRestrictModification.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [accAddressRestrictModification.signer.publicKey],\n            signerAddress: accAddressRestrictModification.signer.address.plain(),\n            relatedAddress: [accAddressRestrictModification.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(accAddressRestrictModification.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [accAddressRestrictModification.signer.publicKey]\n        };\n        let restrictionType = accAddressRestrictModification.restrictionType == tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionType\"].AllowAddress ? \"Allow Address\" : \"Block Address\";\n        let modifications = [];\n        let modificationsTip = [];\n        for (let i = 0; i < accAddressRestrictModification.modifications.length; ++i) {\n            let modificationType = accAddressRestrictModification.modifications[i].modificationType === 0 ? \"Add\" : \"Remove\";\n            let address = accAddressRestrictModification.modifications[i].value;\n            modifications.push({\n                modificationType: modificationType,\n                address: address\n            });\n            let addressName = this.addressConvertToName(address);\n            modificationsTip.push(DashboardService.createSimpleStringTip(`${modificationType} ${addressName}`));\n            transactionDetails.relatedAddress.push(address);\n        }\n        let data = {\n            restrictionType: restrictionType,\n            modifications: modifications\n        };\n        transactionDetails.extractedData = data;\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let restrictionTypeTip = DashboardService.createStringTip(data.restrictionType);\n        let allTip = [restrictionTypeTip];\n        allTip = allTip.concat(modificationsTip);\n        newRowTip.rowTips = allTip;\n        transactionDetails.displayTips.push(newRowTip);\n        // transactionDetails.displayList.set(\"Type\", `${data.restrictionType}`);\n        // transactionDetails.displayList.set(\"Modifications\", data.modifications.map((modi)=> `${modi.modificationType} ${modi.address}`).join(\"<br>\"));\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionAccountMosaicRestriction(accMosaicRestrictModification) {\n        let transactionDetails = {\n            signer: accMosaicRestrictModification.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [accMosaicRestrictModification.signer.publicKey],\n            signerAddress: accMosaicRestrictModification.signer.address.plain(),\n            relatedAddress: [accMosaicRestrictModification.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(accMosaicRestrictModification.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [accMosaicRestrictModification.signer.publicKey]\n        };\n        let restrictionType = accMosaicRestrictModification.restrictionType == tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionType\"].AllowMosaic ? \"Allow Asset\" : \"Block Asset\";\n        let modifications = [];\n        let modificationsTip = [];\n        for (let i = 0; i < accMosaicRestrictModification.modifications.length; ++i) {\n            let modificationType = accMosaicRestrictModification.modifications[i].modificationType === 0 ? \"Add\" : \"Remove\";\n            let assetId = accMosaicRestrictModification.modifications[i].value;\n            let assetIdHex = _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].createAssetId(assetId).toHex().toUpperCase();\n            modifications.push({\n                modificationType: modificationType,\n                assetIdHex: assetIdHex\n            });\n            transactionDetails.relatedAsset.push(assetIdHex);\n            modificationsTip.push(DashboardService.createSimpleStringTip(`${modificationType} ${assetIdHex}`));\n        }\n        let data = {\n            restrictionType: restrictionType,\n            modifications: modifications\n        };\n        transactionDetails.extractedData = data;\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let restrictionTypeTip = DashboardService.createStringTip(data.restrictionType);\n        let allTip = [restrictionTypeTip];\n        allTip = allTip.concat(modificationsTip);\n        newRowTip.rowTips = allTip;\n        transactionDetails.displayTips.push(newRowTip);\n        // transactionDetails.displayList.set(\"Type\", `${data.restrictionType}`);\n        // transactionDetails.displayList.set(\"Modifications\", data.modifications.map((modi)=> `${modi.modificationType} - ${modi.assetIdHex}`).join(\"<br>\"));\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionAccountOperationRestriction(accOperationRestrictModification) {\n        let transactionDetails = {\n            signer: accOperationRestrictModification.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [accOperationRestrictModification.signer.publicKey],\n            signerAddress: accOperationRestrictModification.signer.address.plain(),\n            relatedAddress: [accOperationRestrictModification.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(accOperationRestrictModification.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [accOperationRestrictModification.signer.publicKey]\n        };\n        let restrictionType = accOperationRestrictModification.restrictionType == tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"RestrictionType\"].AllowTransaction ? \"Allow Transaction\" : \"Block Transaction\";\n        let modifications = [];\n        let modificationsTip = [];\n        for (let i = 0; i < accOperationRestrictModification.modifications.length; ++i) {\n            let modificationType = accOperationRestrictModification.modifications[i].modificationType === 0 ? \"Add\" : \"Remove\";\n            let transactionType = accOperationRestrictModification.modifications[i].value;\n            let transactionName = _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeNameByEnum(transactionType);\n            modifications.push({\n                modificationType: modificationType,\n                transactionName: transactionName\n            });\n            modificationsTip.push(DashboardService.createSimpleStringTip(`${modificationType} ${transactionName}`));\n        }\n        let data = {\n            restrictionType: restrictionType,\n            modifications: modifications\n        };\n        transactionDetails.extractedData = data;\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let restrictionTypeTip = DashboardService.createStringTip(data.restrictionType);\n        let allTip = [restrictionTypeTip];\n        allTip = allTip.concat(modificationsTip);\n        newRowTip.rowTips = allTip;\n        transactionDetails.displayTips.push(newRowTip);\n        // transactionDetails.displayList.set(\"Type\", `${data.restrictionType}`);\n        // transactionDetails.displayList.set(\"Modifications\", data.modifications.map((modi)=> `${modi.modificationType} - ${modi.transactionName}`).join(\"<br>\"));\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionModifyMultisigAccount(modifyMultisigAccountTransaction) {\n        let transactionDetails = {\n            signer: modifyMultisigAccountTransaction.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [modifyMultisigAccountTransaction.signer.publicKey],\n            signerAddress: modifyMultisigAccountTransaction.signer.address.plain(),\n            relatedAddress: [modifyMultisigAccountTransaction.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(modifyMultisigAccountTransaction.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [modifyMultisigAccountTransaction.signer.publicKey]\n        };\n        let modificationArray = [];\n        let modificationsTip = [];\n        for (let i = 0; i < modifyMultisigAccountTransaction.modifications.length; ++i) {\n            let cosignerPublicKey = modifyMultisigAccountTransaction.modifications[i].cosignatoryPublicAccount.publicKey;\n            let type = modifyMultisigAccountTransaction.modifications[i].type === 0 ? \"Add\" : \"Remove\";\n            transactionDetails.relatedPublicKey.push(cosignerPublicKey);\n            transactionDetails.relatedAddress.push(modifyMultisigAccountTransaction.modifications[i].cosignatoryPublicAccount.address.plain());\n            modificationArray.push({\n                cosignerPublicKey: cosignerPublicKey,\n                type: type\n            });\n            let modify = type === \"Add\" ? \"+\" : \"-\";\n            if (type === \"Add\") {\n                transactionDetails.signerPublicKeys.push(cosignerPublicKey);\n            }\n            let cosignerDisplay = this.publickKeyConvertToName(cosignerPublicKey);\n            let modifyTip = DashboardService.createPublicKeyStringTip(cosignerPublicKey, cosignerDisplay, modify);\n            modificationsTip.push(modifyTip);\n        }\n        let data = {\n            minApproval: modifyMultisigAccountTransaction.minApprovalDelta,\n            minRemoval: modifyMultisigAccountTransaction.minRemovalDelta,\n            modifications: modificationArray\n        };\n        transactionDetails.extractedData = data;\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let multisigMinApproveTip = DashboardService.createStringTip(`Min.Approval: ${data.minApproval}`);\n        let multisigMinRemoveTip = DashboardService.createStringTip(`Min.Removal: ${data.minRemoval}`);\n        let allTip = [multisigMinApproveTip, multisigMinRemoveTip];\n        allTip = allTip.concat(modificationsTip);\n        newRowTip.rowTips = allTip;\n        transactionDetails.displayTips.push(newRowTip);\n        // transactionDetails.displayList.set(\"Minimum Approval\", `${data.minApproval}`);\n        // transactionDetails.displayList.set(\"Minimum Removal\", `${data.minRemoval}`);\n        // transactionDetails.displayList.set(\"Modifications\", data.modifications.map((modi)=> `${modi.type} ${modi.cosignerPublicKey}`).join(\"<br>\"));\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionMosaicAlias(mosaicAliasTx) {\n        let transactionDetails = {\n            signer: mosaicAliasTx.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [mosaicAliasTx.signer.publicKey],\n            signerAddress: mosaicAliasTx.signer.address.plain(),\n            relatedAddress: [mosaicAliasTx.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(mosaicAliasTx.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [mosaicAliasTx.signer.publicKey]\n        };\n        let mosaicIdHex = mosaicAliasTx.mosaicId.toHex().toUpperCase();\n        let namespaceIdHex = mosaicAliasTx.namespaceId.toHex().toUpperCase();\n        let linkType = mosaicAliasTx.actionType === 0 ? \"Link\" : \"Unlink\";\n        let data = {\n            mosaicIdHex: mosaicIdHex,\n            namespaceIdHex: namespaceIdHex,\n            linkType: linkType,\n        };\n        transactionDetails.extractedData = data;\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let namespaceIdDisplay = data.namespaceIdHex === nativeTokenNamespaceId.value.toUpperCase() ? \"prx.xpx\" : data.namespaceIdHex;\n        if (linkType === \"Link\") {\n            newRowTip.rowTips.push(DashboardService.createAssetAliasTip(namespaceIdHex, namespaceIdDisplay, mosaicIdHex, mosaicIdHex));\n        }\n        else {\n            newRowTip.rowTips.push(DashboardService.createRemoveAssetAliasTip(namespaceIdHex, namespaceIdDisplay, mosaicIdHex, mosaicIdHex));\n        }\n        transactionDetails.displayTips.push(newRowTip);\n        // transactionDetails.displayList.set(\"Action\", linkType);\n        // transactionDetails.displayList.set(\"Asset ID\", mosaicIdHex);\n        // transactionDetails.displayList.set(\"Namespace ID\", namespaceIdHex);\n        transactionDetails.relatedAsset.push(mosaicIdHex);\n        transactionDetails.relatedNamespace.push(namespaceIdHex);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionMosaicDefinition(mosaicDefinitionTransaction) {\n        let transactionDetails = {\n            signer: mosaicDefinitionTransaction.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [mosaicDefinitionTransaction.signer.publicKey],\n            signerAddress: mosaicDefinitionTransaction.signer.address.plain(),\n            relatedAddress: [mosaicDefinitionTransaction.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(mosaicDefinitionTransaction.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [mosaicDefinitionTransaction.signer.publicKey]\n        };\n        let mosaicIdHex = mosaicDefinitionTransaction.mosaicId.toHex().toUpperCase();\n        let nonceString = \"\"; //mosaicDefinitionTransaction.nonce.nonce.toString();\n        let properties = mosaicDefinitionTransaction.mosaicProperties;\n        let data = {\n            mosaicIdHex: mosaicIdHex,\n            nonce: nonceString,\n            properties: {\n                divisibility: properties.divisibility,\n                supplyMutable: properties.supplyMutable ? \"TRUE\" : \"FALSE\",\n                transferable: properties.transferable ? \"TRUE\" : \"FALSE\",\n                duration: properties.duration ? properties.duration.compact() : 0\n            }\n        };\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        newRowTip.rowTips.push(DashboardService.createAssetTip(mosaicIdHex, mosaicIdHex));\n        //newRowTip.rowTips.push(DashboardService.createStringTip(`Nonce: ${nonceString}`));\n        newRowTip.rowTips.push(DashboardService.createStringTip(`Divisibility: ${properties.divisibility}`));\n        newRowTip.rowTips.push(DashboardService.createStringTip(`Supply Mutable: ${properties.supplyMutable}`));\n        newRowTip.rowTips.push(DashboardService.createStringTip(`Transferable: ${properties.transferable}`));\n        if (data.properties.duration !== 0) {\n            newRowTip.rowTips.push(DashboardService.createDurationTip(data.properties.duration));\n        }\n        transactionDetails.displayTips.push(newRowTip);\n        transactionDetails.extractedData = data;\n        // transactionDetails.displayList.set(\"Asset ID\", mosaicIdHex);\n        // transactionDetails.displayList.set(\"Nonce\", nonceString);\n        // transactionDetails.displayList.set(\"Divisibility\", `${data.properties.divisibility}`);\n        // transactionDetails.displayList.set(\"Supply Mutable\", data.properties.supplyMutable);\n        // transactionDetails.displayList.set(\"Transferable\", data.properties.transferable);\n        // transactionDetails.displayList.set(\"Duration\", data.properties.duration === 0 ? \"No Expiration\" : `${data.properties.duration} blocks`);\n        transactionDetails.relatedAsset.push(mosaicIdHex);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionMosaicSupplyChange(mosaicSupplyChangeTransaction) {\n        let transactionDetails = {\n            signer: mosaicSupplyChangeTransaction.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [mosaicSupplyChangeTransaction.signer.publicKey],\n            signerAddress: mosaicSupplyChangeTransaction.signer.address.plain(),\n            relatedAddress: [mosaicSupplyChangeTransaction.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(mosaicSupplyChangeTransaction.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [mosaicSupplyChangeTransaction.signer.publicKey]\n        };\n        let mosaicIdHex = mosaicSupplyChangeTransaction.mosaicId.toHex().toUpperCase();\n        let deltaAmount = mosaicSupplyChangeTransaction.delta.compact();\n        let direction = mosaicSupplyChangeTransaction.direction === 0 ? \"Decrease\" : \"Increase\";\n        let data = {\n            mosaicIdHex: mosaicIdHex,\n            deltaAmount: deltaAmount,\n            direction: direction,\n        };\n        transactionDetails.extractedData = data;\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        //newRowTip.rowTips.push(DashboardService.createAssetTip(mosaicIdHex, mosaicIdHex));\n        newRowTip.rowTips.push(DashboardService.createSupplyAssetAmountTip(deltaAmount, false, mosaicIdHex, mosaicIdHex, direction === \"Increase\"));\n        //newRowTip.rowTips.push(DashboardService.createSupplyAmountTip(deltaAmount, false, direction === \"Increase\"));\n        transactionDetails.displayTips.push(newRowTip);\n        // transactionDetails.displayList.set(\"Asset ID\", mosaicIdHex);\n        // transactionDetails.displayList.set(\"Type\", direction);\n        // transactionDetails.displayList.set(\"Delta Amount\", `${deltaAmount}`);\n        transactionDetails.relatedAsset.push(mosaicIdHex);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionRegisterNamespace(registerNamespaceTx) {\n        let transactionDetails = {\n            signer: registerNamespaceTx.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [registerNamespaceTx.signer.publicKey],\n            signerAddress: registerNamespaceTx.signer.address.plain(),\n            relatedAddress: [registerNamespaceTx.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(registerNamespaceTx.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [registerNamespaceTx.signer.publicKey]\n        };\n        let namespaceIdHex = registerNamespaceTx.namespaceId.toHex().toUpperCase();\n        let namespaceName = registerNamespaceTx.namespaceName;\n        let parentId = registerNamespaceTx.parentId ? registerNamespaceTx.parentId.toHex().toUpperCase() : null;\n        let duration = registerNamespaceTx.duration ? registerNamespaceTx.duration.compact() : null;\n        let type = registerNamespaceTx.namespaceType === 0 ? \"RootNamespace\" : \"SubNamespace\";\n        let data = {\n            namespaceIdHex: namespaceIdHex,\n            namespaceName: namespaceName,\n            parentId: parentId,\n            duration: duration,\n            type: type\n        };\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        newRowTip.rowTips.push(DashboardService.createStringTip(type, \"Type: \"));\n        let namespaceTip = DashboardService.createNamespaceIDTip(namespaceName, namespaceIdHex);\n        namespaceTip.valueType = \"fixed\";\n        newRowTip.rowTips.push(namespaceTip);\n        if (parentId) {\n            newRowTip.rowTips.push(DashboardService.createMsgNamespaceTip(parentId, parentId, \"Parent ID:\"));\n        }\n        if (duration) {\n            newRowTip.rowTips.push(DashboardService.createDurationTip(duration));\n        }\n        transactionDetails.displayTips.push(newRowTip);\n        transactionDetails.extractedData = data;\n        // transactionDetails.displayList.set(\"Type\", type);\n        // transactionDetails.displayList.set(\"Namespace ID\", namespaceIdHex);\n        // transactionDetails.displayList.set(\"Name\", namespaceName);\n        // transactionDetails.displayList.set(\"Duration\", `${duration} blocks`);\n        transactionDetails.relatedNamespace.push(namespaceIdHex);\n        transactionDetails.relatedNamespace.push(namespaceName);\n        if (parentId) {\n            transactionDetails.relatedNamespace.push(parentId);\n            //transactionDetails.displayList.set(\"Parent ID\", parentId);\n        }\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionSecretLock(secretLockTx) {\n        let transactionDetails = {\n            signer: secretLockTx.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [secretLockTx.signer.publicKey],\n            signerAddress: secretLockTx.signer.address.plain(),\n            relatedAddress: [secretLockTx.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(secretLockTx.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [secretLockTx.signer.publicKey]\n        };\n        let assetIdHex = secretLockTx.mosaic.id.toHex().toUpperCase();\n        let assetAmount = secretLockTx.mosaic.amount.compact();\n        let address = secretLockTx.recipient.pretty();\n        let addressPlain = secretLockTx.recipient.plain();\n        let secret = secretLockTx.secret;\n        let duration = secretLockTx.duration.compact();\n        let hashType = \"\";\n        switch (secretLockTx.hashType) {\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"HashType\"].Op_Sha3_256:\n                hashType = \"Op_Sha3_256\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"HashType\"].Op_Keccak_256:\n                hashType = \"Op_Keccak_256\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"HashType\"].Op_Hash_160:\n                hashType = \"Op_Hash_160\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"HashType\"].Op_Hash_256:\n                hashType = \"Op_Hash_256\";\n                break;\n        }\n        let data = {\n            assetIdHex: assetIdHex,\n            assetAmount: assetAmount,\n            secret: secret,\n            duration: duration,\n            hashType: hashType,\n            address: address,\n            addressPlain: addressPlain\n        };\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let recipientDisplay = this.addressConvertToName(addressPlain);\n        let senderDisplay = this.addressConvertToName(transactionDetails.signerAddress);\n        newRowTip.rowTips.push(DashboardService.createTransferTip(transactionDetails.signerAddress, senderDisplay, addressPlain, recipientDisplay));\n        let newRow2Tip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let assetAmountTip = DashboardService.createAssetAmountTip(data.assetAmount, data.assetIdHex, data.assetIdHex, false);\n        if (data.assetIdHex === nativeTokenAssetId.value) {\n            assetAmountTip.displayValue2 = \"XPX\";\n            assetAmountTip.value = DashboardService.convertToExactNativeAmount(data.assetAmount).toString();\n            assetAmountTip.valueType = _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"AmountType\"].EXACT;\n        }\n        newRow2Tip.rowTips.push(assetAmountTip);\n        newRow2Tip.rowTips.push(DashboardService.createStringTip(data.hashType, \"Hash Type:\"));\n        newRow2Tip.rowTips.push(DashboardService.createStringTip(data.secret, \"Secret:\"));\n        transactionDetails.displayTips.push(newRowTip);\n        transactionDetails.displayTips.push(newRow2Tip);\n        transactionDetails.extractedData = data;\n        // transactionDetails.displayList.set(\"Hash Type\", hashType);\n        // transactionDetails.displayList.set(\"Secret\", secret);\n        // transactionDetails.displayList.set(\"Duration\", `${duration} blocks`);\n        // transactionDetails.displayList.set(\"Asset ID\", assetIdHex);\n        // transactionDetails.displayList.set(\"Asset Amount\", `${assetAmount}`);\n        // transactionDetails.displayList.set(\"Address\", address);\n        transactionDetails.relatedAsset.push(assetIdHex);\n        transactionDetails.relatedAddress.push(addressPlain);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractTransactionSecretProof(secretProofTx) {\n        let transactionDetails = {\n            signer: secretProofTx.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [secretProofTx.signer.publicKey],\n            signerAddress: secretProofTx.signer.address.plain(),\n            relatedAddress: [secretProofTx.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(secretProofTx.type),\n            searchString: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [secretProofTx.signer.publicKey]\n        };\n        let proof = secretProofTx.proof;\n        let address = secretProofTx.recipient.pretty();\n        let addressPlain = secretProofTx.recipient.plain();\n        let secret = secretProofTx.secret;\n        let hashType = \"\";\n        switch (secretProofTx.hashType) {\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"HashType\"].Op_Sha3_256:\n                hashType = \"Op_Sha3_256\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"HashType\"].Op_Keccak_256:\n                hashType = \"Op_Keccak_256\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"HashType\"].Op_Hash_160:\n                hashType = \"Op_Hash_160\";\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"HashType\"].Op_Hash_256:\n                hashType = \"Op_Hash_256\";\n                break;\n        }\n        let data = {\n            proof: proof,\n            secret: secret,\n            address: address,\n            addressPlain: addressPlain,\n            hashType: hashType\n        };\n        transactionDetails.extractedData = data;\n        let newRowTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        let recipientDisplay = this.addressConvertToName(addressPlain);\n        let senderDisplay = this.addressConvertToName(transactionDetails.signerAddress);\n        newRowTip.rowTips.push(DashboardService.createTransferTip(transactionDetails.signerAddress, senderDisplay, address, recipientDisplay));\n        let newRow2Tip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"RowDashboardTip\"]();\n        newRow2Tip.rowTips.push(DashboardService.createStringTip(data.hashType, \"Hash Type:\"));\n        newRow2Tip.rowTips.push(DashboardService.createStringTip(data.secret, \"Secret:\"));\n        newRow2Tip.rowTips.push(DashboardService.createStringTip(data.proof, \"Proof:\"));\n        transactionDetails.displayTips.push(newRowTip);\n        transactionDetails.displayTips.push(newRow2Tip);\n        // transactionDetails.displayList.set(\"Hash Type\", hashType);\n        // transactionDetails.displayList.set(\"Secret\", secret);\n        // transactionDetails.displayList.set(\"Proof\", proof);\n        // transactionDetails.displayList.set(\"Address\", address);\n        transactionDetails.relatedAddress.push(addressPlain);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAsset);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedAddress);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedPublicKey);\n        transactionDetails.searchString = transactionDetails.searchString.concat(transactionDetails.relatedNamespace);\n        return transactionDetails;\n    }\n    extractInnerTransaction(innerTransaction) {\n        let transactionDetails = {\n            signer: innerTransaction.signer.publicKey,\n            relatedAsset: [],\n            relatedNamespace: [],\n            relatedPublicKey: [innerTransaction.signer.publicKey],\n            signerAddress: innerTransaction.signer.address.plain(),\n            relatedAddress: [innerTransaction.signer.address.plain()],\n            typeName: _util_transactionUtils__WEBPACK_IMPORTED_MODULE_3__[\"TransactionUtils\"].getTransactionTypeName(innerTransaction.type),\n            searchString: [],\n            transferList: [],\n            extractedData: {},\n            displayList: new Map(),\n            displayTips: [],\n            signerPublicKeys: [innerTransaction.signer.publicKey]\n        };\n        let tempData;\n        switch (innerTransaction.type) {\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].ADDRESS_ALIAS:\n                let addressAliasTx = innerTransaction;\n                tempData = this.extractTransactionAddressAlias(addressAliasTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].ADD_EXCHANGE_OFFER:\n                let addExchangeOfferTx = innerTransaction;\n                tempData = this.extractTransactionAddExchangeOffer(addExchangeOfferTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].CHAIN_CONFIGURE:\n                let chainConfigureTx = innerTransaction;\n                tempData = this.extractTransactionChainConfig(chainConfigureTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].CHAIN_UPGRADE:\n                let chainUpgradeTx = innerTransaction;\n                tempData = this.extractTransactionChainUpgrade(chainUpgradeTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].EXCHANGE_OFFER:\n                let exchangeOfferTx = innerTransaction;\n                tempData = this.extractTransactionExchangeOffer(exchangeOfferTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].REMOVE_EXCHANGE_OFFER:\n                let removeExchangeOfferTx = innerTransaction;\n                tempData = this.extractTransactionRemoveExchangeOffer(removeExchangeOfferTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].LINK_ACCOUNT:\n                let accountLinkTx = innerTransaction;\n                tempData = this.extractTransactionAccountLink(accountLinkTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].LOCK:\n                let lockFundTx = innerTransaction;\n                tempData = this.extractTransactionLockFunds(lockFundTx);\n                break;\n            // case TransactionType.MODIFY_ACCOUNT_METADATA:\n            //     let modifyAccountMetadataTx = innerTransaction as ModifyMetadataTransaction;\n            //     tempData = this.extractTransactionModifyAccountMetadata(modifyAccountMetadataTx);\n            //     break;\n            // case TransactionType.MODIFY_MOSAIC_METADATA:\n            //     let modifyMosaicMetadataTx = innerTransaction as ModifyMetadataTransaction;\n            //     tempData = this.extractTransactionModifyMosaicMetadata(modifyMosaicMetadataTx);\n            //     break;\n            // case TransactionType.MODIFY_NAMESPACE_METADATA:\n            //     let modifyNamespaceMetadataTx = innerTransaction as ModifyMetadataTransaction;\n            //     tempData = this.extractTransactionModifyNamespaceMetadata(modifyNamespaceMetadataTx);\n            //     break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_ADDRESS:\n                let accAddressModifyTx = innerTransaction;\n                tempData = this.extractTransactionAccountAddressRestriction(accAddressModifyTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_MOSAIC:\n                let accMosaicModifyTx = innerTransaction;\n                tempData = this.extractTransactionAccountMosaicRestriction(accMosaicModifyTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_ACCOUNT_RESTRICTION_OPERATION:\n                let accOperationModifyTx = innerTransaction;\n                tempData = this.extractTransactionAccountOperationRestriction(accOperationModifyTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MODIFY_MULTISIG_ACCOUNT:\n                let modifyMultisigAccountTx = innerTransaction;\n                tempData = this.extractTransactionModifyMultisigAccount(modifyMultisigAccountTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_ALIAS:\n                let mosaicAliasTx = innerTransaction;\n                tempData = this.extractTransactionMosaicAlias(mosaicAliasTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_DEFINITION:\n                let mosaicDefinitionTx = innerTransaction;\n                tempData = this.extractTransactionMosaicDefinition(mosaicDefinitionTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].MOSAIC_SUPPLY_CHANGE:\n                let mosaicSupplyTx = innerTransaction;\n                tempData = this.extractTransactionMosaicSupplyChange(mosaicSupplyTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].REGISTER_NAMESPACE:\n                let registerNamespaceTx = innerTransaction;\n                tempData = this.extractTransactionRegisterNamespace(registerNamespaceTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].SECRET_LOCK:\n                let secretLockTx = innerTransaction;\n                tempData = this.extractTransactionSecretLock(secretLockTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].SECRET_PROOF:\n                let secretProofTx = innerTransaction;\n                tempData = this.extractTransactionSecretProof(secretProofTx);\n                break;\n            case tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"TransactionType\"].TRANSFER:\n                let transferTx = innerTransaction;\n                tempData = this.extractTransactionTransfer(transferTx);\n                break;\n            default:\n                break;\n        }\n        transactionDetails.relatedAddress = tempData.relatedAddress;\n        transactionDetails.relatedAsset = tempData.relatedAsset;\n        transactionDetails.relatedNamespace = tempData.relatedNamespace;\n        transactionDetails.relatedPublicKey = tempData.relatedPublicKey;\n        transactionDetails.searchString = tempData.searchString;\n        transactionDetails.extractedData = tempData.extractedData;\n        transactionDetails.displayList = tempData.displayList;\n        transactionDetails.transferList = tempData.transferList ? tempData.transferList : [];\n        transactionDetails.displayTips = tempData.displayTips;\n        transactionDetails.otherAssets = tempData.otherAssets ? tempData.otherAssets : [];\n        return transactionDetails;\n    }\n    addressConvertToName(address) {\n        let name = this.wallet.convertAddressToName(address);\n        return name === address ? tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"Address\"].createFromRawAddress(name).pretty() : name;\n    }\n    publickKeyConvertToName(publicKey) {\n        let address = tsjs_xpx_chain_sdk__WEBPACK_IMPORTED_MODULE_1__[\"PublicAccount\"].createFromPublicKey(publicKey, localNetworkType.value).address.plain();\n        let name = this.wallet.convertAddressToName(address);\n        return name === address ? publicKey : name;\n    }\n    static createNamespaceIDTip(displayValue, value) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].NAMESPACE_ID);\n        newTip.displayValue = displayValue;\n        newTip.value = value ? value : displayValue;\n        return newTip;\n    }\n    static createNamespaceStringTip(displayValue, value) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].NAMESPACE_STR);\n        newTip.displayValue = displayValue;\n        newTip.value = value ? value : displayValue;\n        return newTip;\n    }\n    static createMsgNamespaceTip(value, displayValue, pre = \"\") {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].MSG_NAMESPACE);\n        newTip.displayValue = pre;\n        newTip.value = pre;\n        newTip.displayValue2 = displayValue;\n        newTip.value2 = value;\n        return newTip;\n    }\n    static createAssetTip(displayValue, value) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].ASSET);\n        newTip.displayValue = displayValue;\n        newTip.value = value ? value : displayValue;\n        return newTip;\n    }\n    static createPublicKeyTip(displayValue, value) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].PUBLIC_KEY);\n        newTip.displayValue = displayValue;\n        newTip.value = value ? value : displayValue;\n        return newTip;\n    }\n    static createPublicKeyStringTip(publicKey, displayValue, pre) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].PUBLIC_KEY_STRING);\n        newTip.displayValue = pre;\n        newTip.displayValue2 = displayValue;\n        newTip.value = pre;\n        newTip.value2 = publicKey;\n        return newTip;\n    }\n    static createAddressTip(displayValue, value) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].ADDRESS);\n        newTip.displayValue = displayValue;\n        newTip.value = value ? value : displayValue;\n        return newTip;\n    }\n    static createToRightArrowTip() {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].TO_RIGHT_ARROW);\n        return newTip;\n    }\n    static createAbsoluteAmountTip(amount) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].ABSOLUTE_AMOUNT);\n        newTip.value = amount.toString();\n        newTip.displayValue = _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].toCurrencyFormat(amount, 0);\n        return newTip;\n    }\n    static createExactAmountTip(amount) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].EXACT_AMOUNT);\n        newTip.value = amount.toString();\n        newTip.displayValue = _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].toCurrencyFormat(amount, 0);\n        return newTip;\n    }\n    static createSimpleStringTip(messageString) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].STRING);\n        newTip.value = messageString;\n        newTip.displayValue = messageString;\n        return newTip;\n    }\n    static createStringTip(messageString, pre = \"\", post = \"\") {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].STRING);\n        newTip.value = messageString;\n        newTip.displayValue = pre + \" \" + messageString + \" \" + post;\n        return newTip;\n    }\n    static createDurationTip(duration) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].DURATION);\n        newTip.value = duration.toString();\n        newTip.displayValue = \"Duration: \" + duration + \" blocks\";\n        return newTip;\n    }\n    static createTxHashTip(txHash) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].HASH);\n        newTip.value = txHash;\n        newTip.displayValue = \"Hash: \" + txHash;\n        return newTip;\n    }\n    static createAssetAmountTip(amount, assetId, assetDisplay, amountExact, divisibility = 0) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].ASSET_AMOUNT);\n        newTip.value = amount.toString();\n        newTip.value2 = assetId;\n        newTip.displayValue = amountExact ? _util_typeHelper__WEBPACK_IMPORTED_MODULE_4__[\"Helper\"].toCurrencyFormat(amount, divisibility) : amount.toString();\n        newTip.displayValue2 = assetDisplay;\n        newTip.valueType = amountExact ? _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"AmountType\"].EXACT : _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"AmountType\"].RAW;\n        return newTip;\n    }\n    static createSupplyAmountTip(amount, amountExact, increase) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].SUPPLY_AMOUNT);\n        newTip.value = increase ? \"+\" : \"-\";\n        newTip.value2 = amount.toString();\n        newTip.displayValue = newTip.value;\n        newTip.displayValue2 = amount.toString();\n        newTip.valueType2 = amountExact ? _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"AmountType\"].EXACT : _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"AmountType\"].RAW;\n        return newTip;\n    }\n    static createSupplyAssetAmountTip(amount, amountExact, assetDisplay, assetId, increase) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].SUPPLY_ASSET_AMOUNT);\n        newTip.value = increase ? amount.toString() : \"-\" + amount.toString();\n        newTip.value2 = assetId;\n        newTip.displayValue = increase ? \"+\" + amount.toString() : newTip.value;\n        newTip.displayValue2 = assetDisplay;\n        newTip.valueType = amountExact ? _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"AmountType\"].EXACT : _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"AmountType\"].RAW;\n        return newTip;\n    }\n    static createNamespaceAmountTip(amount, namespaceId, namespaceDisplay, amountExact = false) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].NAMESPACE_AMOUNT);\n        newTip.value = amount.toString();\n        newTip.value2 = namespaceId;\n        newTip.displayValue = amount.toString();\n        newTip.displayValue2 = namespaceDisplay;\n        newTip.valueType = amountExact ? _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"AmountType\"].EXACT : _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"AmountType\"].RAW;\n        return newTip;\n    }\n    static createTransferTip(addressFrom, addressFromDisplay, addressTo, addressToDisplay) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].TRANSFER);\n        newTip.value = addressFrom;\n        newTip.value2 = addressTo;\n        newTip.displayValue = addressFromDisplay;\n        newTip.displayValue2 = addressToDisplay;\n        return newTip;\n    }\n    static createTransferUnresolvedTip(addressFrom, addressFromDisplay, addressTo, addressToDisplay) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].TRANSFER_UNRESOLVED);\n        newTip.value = addressFrom;\n        newTip.value2 = addressTo;\n        newTip.displayValue = addressFromDisplay;\n        newTip.displayValue2 = addressToDisplay;\n        return newTip;\n    }\n    static createAssetAliasTip(namespaceId, namespaceDisplay, assetId, assetDisplay) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].ASSET_ALIAS);\n        newTip.value = namespaceId;\n        newTip.value2 = assetId;\n        newTip.displayValue = namespaceDisplay;\n        newTip.displayValue2 = assetDisplay;\n        return newTip;\n    }\n    static createRemoveAssetAliasTip(namespaceId, namespaceDisplay, assetId, assetDisplay) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].REMOVE_ASSET_ALIAS);\n        newTip.value = namespaceId;\n        newTip.value2 = assetId;\n        newTip.displayValue = namespaceDisplay;\n        newTip.displayValue2 = assetDisplay;\n        return newTip;\n    }\n    static createAddressAliasTip(namespaceId, namespaceDisplay, address, addressDisplay) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].ADDRESS_ALIAS);\n        newTip.value = namespaceId;\n        newTip.value2 = address;\n        newTip.displayValue = namespaceDisplay;\n        newTip.displayValue2 = addressDisplay;\n        return newTip;\n    }\n    static createRemoveAddressAliasTip(namespaceId, namespaceDisplay, address, addressDisplay) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].REMOVE_ADDRESS_ALIAS);\n        newTip.value = namespaceId;\n        newTip.value2 = address;\n        newTip.displayValue = namespaceDisplay;\n        newTip.displayValue2 = addressDisplay;\n        return newTip;\n    }\n    static createAccountLinkTip(publicKey, publicKeyDisplay) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].LINK_PUBLICKEY);\n        newTip.value = publicKey;\n        newTip.displayValue = publicKeyDisplay;\n        return newTip;\n    }\n    static createAccountUnlinkTip(publicKey, publicKeyDisplay) {\n        let newTip = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"DashboardTip\"](_model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"TipType\"].UNLINK_PUBLICKEY);\n        newTip.value = publicKey;\n        newTip.displayValue = publicKeyDisplay;\n        return newTip;\n    }\n    static convertToExactNativeAmount(amount) {\n        if (nativeTokenDivisibility.value === 0) {\n            return amount;\n        }\n        return amount > 0 ? amount / Math.pow(10, nativeTokenDivisibility.value) : 0;\n    }\n    static convertToExactAmount(amount, divisibility) {\n        if (divisibility === 0) {\n            return amount;\n        }\n        return amount > 0 ? amount / Math.pow(10, divisibility) : 0;\n    }\n}\nDashboardService.displayOtherAsset = (amount, assetId, mosaic_id) => {\n    // let apiEndpoint = ChainUtils.buildAPIEndpoint(networkState.selectedAPIEndpoint, networkState.currentNetworkProfile.httpPort);\n    // let chainAPICall = new ChainAPICall(apiEndpoint);\n    // let asset = await chainAPICall.assetAPI.getMosaic(mosaic_id);\n    // let assetarray = []\n    // assetarray.push(mosaic_id);\n    // let nsAsset = await chainAPICall.assetAPI.getMosaicsNames(assetarray);\n    let otherAsset = new _model_dashboardClasses__WEBPACK_IMPORTED_MODULE_8__[\"OtherAsset\"]();\n    otherAsset.amount = amount;\n    otherAsset.asset = assetId;\n    otherAsset.assetId = mosaic_id;\n    // if(nsAsset[0].names.length > 0){\n    //     otherAsset.isLinked = true;\n    //     otherAsset.asset = nsAsset[0].names[0].name;\n    // }else{\n    //     otherAsset.isLinked = false;\n    //     otherAsset.asset = assetId;\n    // }\n    return otherAsset;\n};\n\n\n//# sourceURL=webpack:///./src/modules/dashboard/service/dashboardService.ts?");

/***/ })

}]);